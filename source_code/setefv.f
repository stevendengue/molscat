      SUBROUTINE INIEFV(FIXFLD,IPRINT,FLDMIN,FLDMAX,DFIELD,
     1                  NFIELD,FIELD,MAGEL,NFVIN,IFVIN,SEARCH,
     2                  SCAN)
C  Copyright (C) 2019 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
C
C  WRITTEN BY CR Le Sueur 2016 ish
C
C  AMENDED BY CR Le Sueur 2018 ish
      USE sizes, ONLY: MAXSCH
      USE efvs
      USE potential
C  THIS SET OF ROUTINES CHECK, INITIALISE, SET AND WRITE OUT MESSAGES
C  ABOUT THE SET OF EXTERNAL FIELD VARIABLES (EFVs) (MAGNETIC FIELDS ETC)
      IMPLICIT NONE

      INTEGER,          INTENT(INOUT) :: NFIELD,NFVIN,IFVIN(MAXEFV)
      INTEGER,          INTENT(IN)    :: IPRINT,NODE,NSEEK,ISUM,MAGEL
      DOUBLE PRECISION, INTENT(INOUT) :: FIXFLD(MAXEFV),DFIELD,FIELD(1),
     1                                   FLDMAX
      DOUBLE PRECISION, INTENT(IN)    :: FLDMIN,ECM,EFACT
      CHARACTER(8),     INTENT(IN)    :: ENAME
      LOGICAL,          INTENT(IN)    :: SEARCH,ZCNTN
      LOGICAL,          INTENT(INOUT) :: SCAN

C  COMMON BLOCK TO DESCRIBE WHICH DRIVER IS USED
      COMMON /CNTROL/ CDRIVE
      CHARACTER(1) CDRIVE

C  INTERNAL VARIABLES
C
C  CHARACTER VARIABLES TO SET UP FORMAT STATEMENTS
      CHARACTER(3)   CLEN,C1,C2,C3,CNNZRO
      CHARACTER(2)   CEFVN,CEFVU
      CHARACTER(6)   CNUM
      CHARACTER(150) FINI,F300,F301,F401,F500,F600,F700
      CHARACTER(60)  F101,F103
      CHARACTER(1)   PLUR(0:2)
      CHARACTER(2)   ORDNL

      LOGICAL FIXSET(0:MAXEFV),NONZRO(0:MAXEFV),SINGLE,LFSRCH,LFRSET
      INTEGER IVARY,IEFV,ILST,IVAL,LENVAR,
     1        NFVARY,IFVARY(MAXEFV),IUSE,IFIELD
      INTEGER L1,L2,LNUM
      DOUBLE PRECISION SCALIN,SV,FMINT,DFINT,FIXEFV(0:MAXEFV)

      DOUBLE PRECISION, ALLOCATABLE :: FALLOC(:,:)
      INTEGER INDEX,JVARY,ITEMP,NSAME
      DOUBLE PRECISION TEMP,EINT

      SAVE FIXSET,NONZRO,SINGLE,LFSRCH,LFRSET,FIXEFV
      SAVE ILST,SCALIN,LENVAR,NFVARY,IFVARY
      SAVE FMINT,DFINT
      SAVE PLUR,CLEN
      SAVE F103,F300,F301,F401,FINI,F500,F600,F700

      DATA PLUR/' ',' ','S'/

      FMINT=FLDMIN
      NFVARY=NFVIN
      IFVARY=IFVIN
      SCALIN=SCALAM
      ISVEFV=1
      FIXEFV(1:MAXEFV)=FIXFLD(1:MAXEFV)
      FIXEFV(0)=SCALAM

      IF (SEARCH) NFIELD=MAXSCH
      LFRSET=(FLDMIN.NE.0D0 .OR. FLDMAX.NE.0D0)
      IF (LFRSET) THEN
        IF (NFIELD.GT.1 .AND. FLDMAX.NE.FLDMIN .AND. FLDMAX.NE.0D0) THEN
          DFIELD=(FLDMAX-FLDMIN)/(NFIELD-1)
        ELSEIF (NFIELD.GT.1) THEN
          FLDMAX=FLDMIN+(NFIELD-1)*DFIELD
        ENDIF
        IF (DFIELD.NE.0D0) THEN
          NFIELD=MAX(1+INT((FLDMAX-FLDMIN)/DFIELD),1)
        ENDIF
      ENDIF
      DFINT=DFIELD

      SINGLE=NFIELD.EQ.1

C  SET UP NAME FOR POTENTIAL SCALING FACTOR
      EFVNAM(0)='POTL SCALING FACTOR'
      EFVUNT(0)=' '

C  CHECK THAT NEFV HAS BEEN SET
      IF (NEFV.LT.0) THEN
        WRITE(6,9001) '*** ERROR: NUMBER OF EXTERNAL FIELD VARIABLES '//
     1                '(NEFV) MUST NOT BE NEGATIVE.',
     2                'SET NEFV IN BAS9IN.'
 9001       FORMAT(/2X,A/6X,A)
        STOP
      ELSEIF (IPRINT.GE.1 .AND. NEFV.GT.0) THEN
        WRITE(6,9003) 'THIS CALCULATION USES ',NEFV,
     1                'EXTERNAL FIELD VARIABLE'//PLUR(MIN(2,NEFV))
 9003   FORMAT(/2X,A,I2,1X,A)
      ENDIF
 9002 FORMAT(/2X,A)

C  CHECK SPACE
      IF (NEFV.GT.MAXEFV) THEN
        WRITE(6,9004) '*** ERROR: NOT ENOUGH SPACE FOR EFVS.',
     1                'INCREASE PARAMETER MAXEFV TO AT LEAST ',NEFV,
     2                ' AND RECOMPILE.'
 9004   FORMAT(/2X,A/6X,A,I3,A)
        STOP
      ENDIF

C  CHECK THAT MAPEFV HAS BEEN SET IF REQUIRED
      IF (NEFV.GT.0 .AND. MAPEFV.EQ.0) THEN
        WRITE(6,9001) '*** ERROR: MAPPING FROM EXTERNAL FIELD '//
     1                'VARIABLES TO COUPLING MATRIX COEFFICIENTS '//
     2                '(MAPEFV) MUST NOT BE ZERO.',
     3                'SET MAPEFV IN BAS9IN.'
        STOP
      ELSEIF (MAPEFV.NE.0 .AND. IPRINT.GE.1) THEN
        IF (MAPEFV.GT.1) THEN
          WRITE(6,9005) 'OFFSET BETWEEN EFV INDICES AND COUPLING '//
     1                  'MATRIX COEFFICIENT INDICES IS',MAPEFV-1
 9005     FORMAT(/2X,A,1X,I2)
        ELSEIF (MAPEFV.LT.0) THEN
          WRITE(6,9005) 'MAPPING BETWEEN EFVS AND COUPLING MATRIX '//
     1                  'COEFFICIENTS IS CONTROLLED BY MAPEFV =',MAPEFV
        ENDIF
      ENDIF

C  CHECK WHETHER MAGEL HAS BEEN SET
      IF (MAGEL.NE.1) THEN
        IF (IFVARY(1).EQ.MAXEFV+1) THEN
          WRITE(6,9002) '*** WARNING: USE OF MAGEL IS DEPRECATED - '//
     1                  'USE IFVARY INSTEAD.'
          IFVARY(1)=MAGEL
          NFVARY=1
        ELSEIF (IFVARY(1).LE.NEFV) THEN
          WRITE(6,9001) '*** WARNING: USE OF MAGEL IS DEPRECATED.  ',
     1                  'VALUE OF MAGEL CONFLICTS WITH VALUE OF '//
     2                  'IFVARY.  MAGEL VALUE WILL BE IGNORED.'
        ENDIF
      ENDIF

C  IF USING FLDMIN AND FLDMAX, NFVARY MUST BE 1
      IF (SEARCH .OR. LFRSET) THEN
        NFVARY=1
        IF (IFVARY(1).EQ.MAXEFV+1) IFVARY(1)=MIN(1,NEFV)
        ISVEFV=IFVARY(1)
      ENDIF

C  CHECKS FOR UNSET NFVARY
      IF (NFVARY.EQ.-1) THEN
        IF (NFIELD.EQ.1) THEN
          NFVARY=0
          IF (NEFV.GT.0) WRITE(6,9001) '*** WARNING: NFVARY UNSET.',
     1                                 'ALL EXTERNAL FIELD VARIABLE '//
     2                                 'VALUES TAKEN FROM FIXFLD ARRAY.'
        ELSEIF (NEFV.EQ.0 .OR.NEFV.EQ.1) THEN
          WRITE(6,9006) 'NFVARY','NFVARY'
 9006     FORMAT(/2X,'*** WARNING: ',A,' UNSET.  ASSUMING ',A6,' = 1.')
          NFVARY=1
          IF (IFVARY(1).EQ.MAXEFV+1) IFVARY(1)=NEFV
        ELSEIF (IFVARY(1).LE.NEFV) THEN
          WRITE(6,9006) 'NFVARY','NFVARY'
          NFVARY=1
        ELSE
          WRITE(6,9002) '*** ERROR: NFVARY AND IFVARY UNSET.'
          STOP
        ENDIF
      ELSEIF (NEFV.EQ.0 .AND. NFVARY.EQ.1 .AND. IFVARY(1).EQ.0) THEN
      ELSEIF (NFVARY.GT.NEFV) THEN
        WRITE(6,9001) '*** WARNING: NFVARY WAS SET LARGER THAN NEFV.',
     1                'RESETTING NFVARY = NEFV.'
        NFVARY=NEFV
      ENDIF

C  SET UP ISVEFV IF SEARCHING ALONG A LINE
      IF (SEARCH .OR. LFRSET) THEN
        ISVEFV=IFVARY(1)
        IF (IFVARY(1).LT.0) ISVEFV=NEFV+1
        FIXEFV(ISVEFV)=FLDMIN
      ENDIF

C  CHECK SPACE
      IF (ISVEFV.GT.MAXEFV) THEN
        WRITE(6,9004) '*** ERROR: NOT ENOUGH SPACE FOR EFVS.',
     1                'INCREASE PARAMETER MAXEFV TO AT LEAST ',
     2                ISVEFV,' AND RECOMPILE.'
        STOP
      ENDIF

C  CHECK THAT ALL NEFV EFVS HAVE NAMES SET
      DO IEFV=1,NEFV
        IF (EFVNAM(IEFV).EQ.' ') THEN
          WRITE(6,9003) '*** ERROR: EFV ',IEFV,'NEEDS A NAME.'
          STOP
        ELSE
          EFVNAM(IEFV)=ADJUSTL(EFVNAM(IEFV))
          EFVUNT(IEFV)=ADJUSTL(EFVUNT(IEFV))
        ENDIF
      ENDDO

C  CHECK FOR VALID VALUES SET IN IFVARY
      DO IVARY=1,NFVARY
        IF (NFVARY.EQ.1 .AND. IVARY.EQ.1 .AND. IFVARY(IVARY).LE.NEFV)
     1  CYCLE
        IF (IFVARY(IVARY).GE.0 .AND. IFVARY(IVARY).LE.NEFV) CYCLE
        WRITE(6,9007) '*** ERROR: ',IFVARY(IVARY),
     1                ' IS AN INVALID VALUE FOR ',IVARY,
     2                ORDNL(IVARY),'VARYING EFV.'
 9007   FORMAT(/2X,A,I2,A,I2,A2,1X,A)
        STOP
      ENDDO

C  COPY FIELD ARRAY INTO 2D ARRAY TO MAKE REARRANGEMENTS EASIER
      ALLOCATE(FALLOC(NFVARY,NFIELD))
      INDEX=1
      DO IFIELD=1,NFIELD
        DO IVARY=1,NFVARY
          FALLOC(IVARY,IFIELD)=FIELD(INDEX)
          INDEX=INDEX+1
        ENDDO
      ENDDO

      IF (NFVARY.GT.1) THEN
C  ORDER VALUES SET IN IFVARY
        DO IVARY=1,NFVARY-1
          DO JVARY=IVARY+1,NFVARY
            IF (IFVARY(JVARY).LT.IFVARY(IVARY)) THEN
              DO IFIELD=1,NFIELD
                TEMP=FALLOC(IVARY,IFIELD)
                FALLOC(IVARY,IFIELD)=FALLOC(JVARY,IFIELD)
                FALLOC(JVARY,IFIELD)=TEMP
              ENDDO
              ITEMP=IFVARY(IVARY)
              IFVARY(IVARY)=IFVARY(JVARY)
              IFVARY(JVARY)=ITEMP
            ENDIF
          ENDDO
        ENDDO

C  AND CHECK FOR UNIQUENESS
        NSAME=0
        DO IVARY=1,NFVARY-1
          IF (IFVARY(IVARY+1).EQ.IFVARY(IVARY)) THEN
            NSAME=NSAME+1
            DO JVARY=IVARY+1,NFVARY-1
              IFVARY(JVARY)=IFVARY(JVARY+1)
              DO IFIELD=1,NFIELD
                FALLOC(JVARY,IFIELD)=FALLOC(JVARY+1,IFIELD)
              ENDDO
            ENDDO
          ENDIF
        ENDDO
        NFVARY=NFVARY-NSAME
      ENDIF

C  IF ONLY ONE SET OF FIELDS USED, THEN ALL ARE FIXED, BUT BE CAREFUL
C  ABOUT VARYING POTENTIAL SCALING FACTOR
      IF (SINGLE) THEN
        IF (NFVARY.GT.1) THEN
          DO IVARY=1,NFVARY
            IF (IFVARY(IVARY).NE.0) FIXEFV(IFVARY(IVARY))=FIELD(IVARY)
          ENDDO
        ELSEIF (NFVARY.EQ.1 .AND. LFRSET) THEN
          FIXEFV(IFVARY(1))=FLDMIN
        ENDIF
        NFVARY=0
        IFVARY(1)=MAXEFV+1
      ENDIF

C  SET MASK FOR FIXED EFVS
      FIXSET=.TRUE.
      DO IVARY=1,NFVARY
        IEFV=IFVARY(IVARY)
        IF (IEFV.GE.0) FIXSET(IEFV)=.FALSE.
      ENDDO

C  CHECK FOR EFVS THAT ARE ALWAYS ZERO (OR THE SCALING FACTOR ALWAYS
C  BEING 1.0), AND ELIMINATE EFVS FROM LIST PRINTED IN MAIN OUTPUT.
C  (ONLY RELEVANT IF IPRINT < 10)
      NONZRO=.TRUE.
      NONZRO(0)=FIXEFV(0).NE.1.D0
      IF (IPRINT.LT.10 .AND. MAPEFV.GE.0) THEN
        NONZRO(1:NEFV)=.FALSE.
        IF (MAPEFV.GE.0 .AND. IFVARY(1).GE.0) THEN
          DO IEFV=1,NEFV
            IF (FIXSET(IEFV) .AND. FIXEFV(IEFV).NE.0.0D0)
     1        NONZRO(IEFV)=.TRUE.
          ENDDO
          DO IVARY=1,NFVARY
            IEFV=IFVARY(IVARY)
            DO IFIELD=1,NFIELD
              IF (FALLOC(IVARY,IFIELD).NE.0.D0) NONZRO(IEFV)=.TRUE.
              IF (NONZRO(IEFV)) EXIT
            ENDDO
          ENDDO
        ENDIF
        IF (SEARCH .OR. LFRSET) NONZRO(ISVEFV)=.TRUE.
      ENDIF

      IUSE=0
      DO IEFV=0,NEFV
        IF (NONZRO(IEFV) .OR. IPRINT.GE.10) THEN
          IUSE=IUSE+1
          LISTFV(IUSE)=IEFV
        ENDIF
      ENDDO
      NNZRO=IUSE

C  IF IPRINT >=15 PRINT PROXY VARIABLE AS WELL (IF USED)
      IF (IPRINT.GE.15 .AND. (SEARCH .OR. LFRSET) .AND. IFVARY(1).LT.0)
     1  THEN
        NNZRO=NNZRO+1
        LISTFV(NNZRO)=ISVEFV
      ENDIF

C  COPY REARRANGED VARYING EFV VALUES INTO FIELD ARRAY
      INDEX=1
      DO IFIELD=1,NFIELD
        DO IVARY=1,NFVARY
          FIELD(INDEX)=FALLOC(IVARY,IFIELD)
          INDEX=INDEX+1
        ENDDO
      ENDDO
      DEALLOCATE(FALLOC)

      IF (ISVEFV.GT.NEFV) EFVNAM(ISVEFV)='PROXY VARIABLE'
      SVNAME=EFVNAM(ISVEFV)
      SVUNIT=EFVUNT(ISVEFV)

C  SET START AND END OF LIST OF EFVS FOR OUTPUT
      IEFVST=MIN(1,ISVEFV)
      IF (NONZRO(0)) IEFVST=0
      NEFVP=MAX(NEFV,ISVEFV)
      IF (NEFV.EQ.0) NEFVP=0
      LENVAR=MAX(NEFVP+1-IEFVST,0)

C  SAVE THESE LOGICALS SO THEY DON'T NEED TO BE PASSED IN AGAIN
      LFSRCH=SEARCH

C  PASS RESET VALUE OF NFVARY BACK OUT
      NFVIN=NFVARY


C  SET UP CHARACTER VARIABLES FOR CONSTRUCTING FORMAT STATEMENTS
      WRITE(CLEN,'(I3)') LENVAR
      WRITE(CNNZRO,'(I3)') NNZRO
      WRITE(CEFVN,'(I2)') LEFVN
      WRITE(CEFVU,'(I2)') LEFVU
      LNUM=17
      CNUM='G17.10'
      L1=LEFVN-LNUM ! LNUM IS THE LENGTH OF THE NUMBERS TO BE PRINTED
      L1=MAX(1,L1)
      L2=LEFVN+LEFVU+4-LNUM-L1
      WRITE(C1,'(I2)') L1
      WRITE(C2,'(I2)') L2
      CLEN=ADJUSTL(CLEN)
      CNNZRO=ADJUSTL(CNNZRO)
      CEFVN=ADJUSTL(CEFVN)
      CEFVU=ADJUSTL(CEFVU)
      C1=ADJUSTL(C1)
      C2=ADJUSTL(C2)
      C3=ADJUSTL(C3)
      C3=ADJUSTL(C3)

      F103="(/14X,"//TRIM(CNNZRO)//"(A"//TRIM(CEFVN)//",' (',A"//
     1                                   TRIM(CEFVU)//"')',1X))"
      F300="(2X,'SET ',I5,':',5X,"//TRIM(CNNZRO)//"("//TRIM(C1)//
     1     "X,1P,"//CNUM//",0P,"//TRIM(C2)//"X))"
      F301="(2X,A6,':',8X,"//TRIM(CNNZRO)//"("//TRIM(C1)//
     1     "X,1P,"//CNUM//",0P,"//TRIM(C2)//"X))"
      F401="(/2X,'EFV SET ',I5,':',2X,"//TRIM(CNNZRO)//
     1     "(A,1X,A1,1X,1P,"//CNUM//",0P,A1,A:,';',2X))"
      FINI="('  NODE',I6,1P,', ',"//TRIM(CLEN)//"(A"//
     1     ",1X,"//CNUM//",1X),': BINDING ENERGY ',"//CNUM//
     2     ",' CM-1 = ',"//CNUM//",1X,A8"
      F500=TRIM(FINI)//")"
      F600=TRIM(FINI)//",0P,' BUT NODE COUNT =',I6)"
      F700=TRIM(FINI)//",' BUT ',A,' OUTSIDE RANGE')"
C================================================================ RSTEFV
      ENTRY RSTEFV(FIXFLD)
      EFV(0)=SCALIN
C  COPY THE (REARRANGED) FIXFLD ARRAY INTO EFV
      DO IEFV=1,NEFV
        EFV(IEFV)=FIXEFV(IEFV)
      ENDDO

      ILST=0

      RETURN
C ============================================================== SETEFV
      ENTRY SETEFV(FIELD,SV)
C  THIS ROUTINE IS CALLED TO SET UP THE CORRECT VALUES IN THE EFV
C  ARRAY, AND THEN ALSO PUT THE CORRECT VALUES IN THE VCONST ARRAY

      IF (LFSRCH) THEN
        EFV(ISVEFV)=SV
      ELSEIF (LFRSET) THEN
        EFV(ISVEFV)=FMINT+DBLE(ILST)*DFINT
        ILST=ILST+1
      ELSE
        DO IVARY=1,NFVARY
          EFV(IFVARY(IVARY))=FIELD(ILST+IVARY)
        ENDDO
        ILST=ILST+NFVARY

      ENDIF

      SCALAM=EFV(0)

      IF (IFVARY(1).LT.0 .OR. MAPEFV.LT.0) CALL EFV9(IFVARY(1))

      IF (MAPEFV.GE.0) THEN
        DO IEFV=1,NEFV
          VCONST(MAPEFV+IEFV-1)=EFV(IEFV)
        ENDDO
      ENDIF

      RETURN
C===================================================== END OF SETEFV
      ENTRY MSGEFV(IVAL,NFIELD)
C  ENTRY POINT TO WRITE OUT MESSAGES ABOUT SETS OF EFVS

C  BEFORE LOOP OVER EFVS
      IF (IVAL.EQ.0) THEN
        IF (.NOT.LFSRCH) WRITE(6,100) NFIELD,PLUR(MIN(NFIELD,2))
  100   FORMAT(/'  CONTROL DATA FOR EXTERNAL FIELD VARIABLES.  ',
     1         'CALCULATIONS WILL BE PERFORMED FOR',I4,' SET',A1)
        WRITE(6,FMT=F103) (ADJUSTR(EFVNAM(LISTFV(IEFV))),
     1                     EFVUNT(LISTFV(IEFV)),IEFV=1,NNZRO)

C  TO WRITE OUT LIST OF EFVS
      ELSEIF (IVAL.LT.0) THEN
        IF (.NOT.LFSRCH) THEN
          WRITE(6,FMT=F300) -IVAL,(EFV(LISTFV(IEFV)),IEFV=1,NNZRO)
        ELSEIF (IVAL.EQ.-1) THEN
          WRITE(6,FMT=F301) 'FLDMIN',(EFV(LISTFV(IEFV)),IEFV=1,NNZRO)
        ELSEIF (IVAL.EQ.-2) THEN
          WRITE(6,FMT=F301) 'FLDMAX',(EFV(LISTFV(IEFV)),IEFV=1,NNZRO)
        ENDIF

C  RUNNING COMMENTARY ON LIST OF EFVS
      ELSEIF (NEFVP-IEFVST+1.GT.0) THEN
        WRITE(6,FMT=F401) IVAL,(TRIM(EFVNAM(LISTFV(IEFV))),'=',
     1                          EFV(LISTFV(IEFV)),' ',
     2                          TRIM(EFVUNT(LISTFV(IEFV))),
     3                          IEFV=1,NNZRO)
      ENDIF

      RETURN
C========================================================= END OF MOLEFV
      ENTRY OUTEFV(NSEEK,ECM,EFACT,ENAME,NODE,ZCNTN,ISUM)
C  ENTRY POINT USED BY BOUND AND FIELD TO WRITE OUT MESSAGES ABOUT
C  IDENTIFICATION OF BOUND STATES TO BOTH THE OUTPUT STREAM AND ISUM

      IF (ISUM.EQ.0) RETURN

      EINT=ECM/EFACT
C  IF NODE HAS BEEN SUCCESSFULLY IDENTIFIED
      IF (ZCNTN .AND. (NODE.EQ.NSEEK .OR. NODE.EQ.NSEEK-1)) THEN
C
C  WRITE SUMMARY INFORMATION TO ISUM
        IF (LENVAR.GT.0) THEN
        WRITE(ISUM,FMT=F500) NSEEK,(TRIM(EFVNAM(IEFV)),
     1                              EFV(IEFV),IEFV=IEFVST,NEFV),
     2                       ECM,EINT,ADJUSTL(ENAME)
        ELSE
          WRITE(ISUM,500) NSEEK,ECM,EINT,ADJUSTL(ENAME)
        ENDIF
C
  500   FORMAT('  NODE',I6,', ',
     1         ': BINDING ENERGY ',1PG16.9,' CM-1 = ',G20.13,1X,A8)

C  IF NODE HAS BEEN FOUND BUT NODE COUNT IS INCORRECT
      ELSEIF (NODE.NE.NSEEK .AND. NODE.NE.NSEEK-1) THEN
C
C  WRITE SUMMARY INFORMATION TO ISUM
        IF (LENVAR.GT.0) THEN
        WRITE(ISUM,FMT=F600) NSEEK,(TRIM(EFVNAM(IEFV)),
     1                              EFV(IEFV),IEFV=IEFVST,NEFV),
     2                        ECM,EINT,ENAME,NODE
        ELSE
          WRITE(ISUM,600) NSEEK,ECM,EINT,ENAME,NODE
        ENDIF

  600   FORMAT('  NODE',I6,', : BINDING ENERGY ',1PG16.9,' CM-1 = ',
     1         G20.13,1X,A8,' BUT NODE COUNT =',I6)

C  IF NODE HAS BEEN FOUND BUT ENERGY/VARIABLE IS OUTSIDE CURRENT RANGE
      ELSE
C
C  WRITE SUMMARY INFORMATION TO ISUM
        IF (CDRIVE.NE.'B') THEN
          WRITE(ISUM,FMT=F700) NSEEK,(TRIM(EFVNAM(IEFV)),
     1                                EFV(IEFV),IEFV=IEFVST,NEFV),
     2                         ECM,EINT,ENAME,
     3                         TRIM(SVNAME)
        ELSE
          IF (LENVAR.GT.0)
     1      WRITE(ISUM,F700) NSEEK,(TRIM(EFVNAM(IEFV)),
     2                              EFV(IEFV),IEFV=IEFVST,NEFV),
     3                       ECM,EINT,ENAME,'ENERGY'
          IF (LENVAR.EQ.0) WRITE(ISUM,700) NSEEK,ECM,EINT,ENAME
        ENDIF

  700   FORMAT('  NODE',I6,', : BINDING ENERGY ',1PG16.9,' CM-1 = ',
     1         G20.13,1X,A8,'  BUT ENERGY IS OUTSIDE RANGE FOR ',
     2         'CURRENT NODE')

      ENDIF

      RETURN
      END
C ========================================================================
      CHARACTER(2) FUNCTION ORDNL(IUSE)
      IMPLICIT NONE
      INTEGER, INTENT(IN) :: IUSE

      INTEGER :: IORDNL
      CHARACTER(2) ONL(0:4)
      DATA ONL/'TH','ST','ND','RD','TH'/


      IF (MOD(IUSE/10,10).EQ.1) THEN
        IORDNL=0
      ELSE
        IORDNL=MIN(MOD(IUSE,10),4)
      ENDIF

      ORDNL=ONL(IORDNL)

      RETURN
      END
