      SUBROUTINE DRIVER
C  Copyright (C) 2019 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
      USE efvs
      USE potential
      USE basis_data, ONLY: JHALF
      USE physical_constants
      USE sizes, MXFLD => MXFLD_in_MOLSCAT, MXNRG => MXNRG_in_MOLSCAT
C***********************************************************************
C
C  ------  MOLSCAT - J.M. HUTSON & C.R. LE SUEUR -----------------------
C
C   MAIN DRIVER FOR QUANTUM MOLECULAR SCATTERING PROGRAM
C
C   VERSIONS 1 TO 7 OF MOLSCAT WERE BY SHELDON GREEN
C   VERSIONS 8 TO 14 WERE JOINTLY BY JEREMY HUTSON AND SHELDON GREEN
C
C   SHELDON GREEN DIED IN DECEMBER 1995, SO VERSIONS 15, 2014 ONWARDS
C   ARE BY JEREMY HUTSON
C
C   VARIOUS NEW PROPAGATORS HAVE BEEN ADDED SINCE EARLY VERSIONS.
C   THE COMPLETE LIST IN 2015 VERSION IS:
C
C   -1 : WKB METHOD FOR SINGLE CHANNEL, SINGLE TURNING POINT
C    1 : ALEXANDER-MANOLOPOLOUS LOG-DERIVATIVE AIRY PROPAGATOR
C    2 : DE VOGELAERE'S PROPAGATOR
C    3 : WALKER-LIGHT R-MATRIX PROPAGATOR
C    5 : JOHNSON'S LOG-DERIVATIVE PROPAGATOR
C    6 : MANOLOPOULOS'S DIABATIC MODIFIED LOG-DERIVATIVE PROPAGATOR
C    7 : MANOLOPOULOS'S QUASIADIABATIC MODIFIED LOG-DERIVATIVE PROPAGATOR
C    9 : SYMPLECTIC LOG-DERIVATIVE PROPAGATOR OF MANOLOPOULOS AND GRAY
C   14 : VIVS (VIVAS) PROPAGATOR
C
C  CURRENT VERSION: 2019.0
C***********************************************************************
C
C  DEFAULT UNITS ARE
C   MASSES IN UNIFIED ATOMIC MASS UNITS (DALTONS, CARBON MASS/12)
C   ENERGIES AS WAVENUMBERS IN CM-1
C   LENGTHS IN ANGSTROMS
C  BUT THESE MAY BE CHANGED VIA THE VARIABLES EUNITS, EUNIT, MUNIT, RUNIT
C
C  ENERGIES ARE OFTEN WRITTEN OUT IN CM-1 AS WELL AS THE SPECIFIED UNITS
C  LENGTHS (INCLUDING SCATTERING LENGTHS)
C  ARE OUTPUT IN THESE UNITS EXCEPT WHERE OTHERWISE STATED
C  BUT INTEGRAL CROSS SECTIONS ARE ALWAYS WRITTEN OUT IN ANGSTROM**2
C
C  RMIN   IS THE RADIUS AT WHICH THE OUTWARDS PROPAGATION IS BEGUN
C  RMAX   IS THE RADIUS AT WHICH THE INWARDS  PROPAGATION IS BEGUN
C  RMID   IS THE POINT AT WHICH THE PROPAGATION METHOD CHANGES (IF IT DOES)
C
C  IPROPS AND IPROPL CONTROL METHODS OF PROPAGATING SOLUTIONS TO COUPLED
C  EQUATIONS
C  NPOTL AND MXLAM CONTROL SUM OVER ANGULAR DEPENDENCE OF POTENTIAL
C  NQN IS NO. OF QUANTUM NUMBERS USED TO DESCRIBE INTERACTION PARTNERS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      logical :: inolls=.false.
cINOLLS include 'fpvm3.h'
C
C  *****  PROGRAM DIMENSION LIMITATIONS  *****
C  ENERGY,TEMP,LINE DIMENSIONS LIMITED BY VALUES ...
      PARAMETER (MXTEMP=5, MXMNQN=10)
      PARAMETER (AWVMAX=0.2D0)
cINOLLS include 'all/pvmdat1.f'
C
      INTEGER EUNITS,PRNTLV,SHRINK,MONQN(MXMNQN)
      DOUBLE PRECISION MUNIT
C
C  ARRAY TO HOLD TIME AND DATE
      CHARACTER CTIME*9,CDATE*11
C
      CHARACTER(1)   PLUR(2)
      CHARACTER(2)   SFX,CLEN3,ORDNL
      CHARACTER(3)   CLEN1,CLEN2
      CHARACTER(8)   EUNAME,CURRWD(2)
      CHARACTER(20)  PDATE
      CHARACTER(80)  LABEL
      CHARACTER(12)  METHOD
      CHARACTER(130) F710,F711
C
C  FOLLOWING ARRAYS ALL HAVE DIMENSION MXNRG. MXNRG IS THE MAXIMUM
C  ALLOWED NUMBER OF TOTAL ENERGIES PER RUN.
      DIMENSION ENERGY(MXNRG)
      DIMENSION IECONV(MXNRG),ISST(MXNRG),MINJT(MXNRG),MAXJT(MXNRG)
C
C  VARIABLES DIMENSIONED FOR NO. OF LINES IN PRES. BROAD. CALC.
C  N.B. PRBRIN STILL MAX NO. LINES = 2*MXLN DESPITE OFF-DIAG CHANGES
      DIMENSION LINE(2*MXLN),LTYPE(MXLN)
C
      DIMENSION TEMP(MXTEMP),FIELD(MXFLD)
C
C  VARIABLES TO TEST PARTIAL WAVE CONVERGENCE
      DIMENSION TEST(2)
      EQUIVALENCE (TEST(1),DTOL),(TEST(2),OTOL)
C
      DOUBLE COMPLEX SCLEN

C  ARRAYS FOR EFVS
      DIMENSION FIXFLD(MAXEFV),IFVARY(MAXEFV)
      DOUBLE PRECISION OLDFAC(MXOMEG)
      LOGICAL CONVGE,LCONT
      EXTERNAL BRENT
      LOGICAL WAVE
C
C     include common block for data received via pvm
C
cINOLLS include 'all/pvmdat.f'
C
C     include common block for results to be returned via pvm
C     needed because output does not pass scattering lengths back
C
cINOLLS include 'all/pvmdat11.f'
C
C  DYNAMIC STORAGE COMMON BLOCK ...
      COMMON /MEMORY/ MX,IXNEXT,NIPR,IDUMMY,X(1)
C  MX,IXNEXT ARE MAX AND NEXT AVAILABLE LOCATION IN X() ARRAY
C  NIPR IS NUMBER OF INTEGERS PER REAL; SHOULD BE 1 OR 2.
C  E.G. FOR IBM R*8/I*4, NIPR=2.  AN INTEGER ARRAY OF DIM. N
C  CAN BE STORED IN A REAL ARRAY OF DIMENSION (N+NIPR-1)/NIPR.
C
C  COMMON BLOCKS TO CONTROL HANDLING OF VL (POTENTIAL COEFFICIENTS)
      COMMON /VLSAVE/ IVLU
C  IF IVLU>0, IT SPECIFIES A UNIT NUMBER FOR STORING THE VL ARRAY
C  (USEFUL IN CASES THAT WOULD OTHERWISE RUN OUT OF MEMORY)
      COMMON /VLFLAG/ IVLFL
C  IVLFL FLAGS WHETHER IV() ARRAY IS USED AS POINTER W/ VL ARRAY.
C
C  NCONST IS NO. OF OFF-DIAGONAL R-INDEPENDENT MONOMER TERMS
C  NRSQ = 1 IF THERE ARE OFF-DIAGONAL 1/R**2 TERMS, 0 OTHERWISE
C  VCONST ARE THE COEFFICIENTS OF THE NCONST MONOMER TERMS
C
C  COMMON BLOCK FOR CONTROL OF USE OF PROPAGATION SCRATCH FILE
      LOGICAL IREAD,IWRITE
      COMMON /PRPSCR/ ESHIFT,ISCRU,IREAD,IWRITE
C
C  COMMON BLOCK FOR CONTROL OF PROPAGATION SEGMENTS
      COMMON /RADIAL/ RMNINT,RMXINT,RMID,RMATCH,DRS,DRL,STEPS,STEPL,
     1                POWRS,POWRL,TOLHIS,TOLHIL,CAYS,CAYL,UNSET,
     2                IPROPS,IPROPL,NSEG
      PARAMETER (PUNSET=-1D30)
C
C  EXTRA COMMON BLOCK FOR VVPROP
      LOGICAL IALFP,IV,IVP,IVPP,ISHIFT,IDIAG,IPERT,ISYM
C
      COMMON /LDVVCM/ XSQMAX,ALPHA1,ALPHA2,IALPHA,IALFP,IV,IVP,IVPP,
     1                ISHIFT,IDIAG,IPERT,ISYM
C
C  COMMON BLOCK FOR DERIVATIVES
      COMMON /DERIVS/ NUMDER
      LOGICAL NUMDER
C
C  COMMON BLOCK FOR WKB INTEGRATOR
      COMMON /WKBCOM/ NGMP(3)
C
C  COMMON BLOCK TO SUBROUTINE OUTPUT FOR USE IN RESONANCE SEARCHES
      COMMON /EIGSUM/ EPSM(5)
C
C  COMMON BLOCK FOR PERTRB
      COMMON /EXPVAL/ NEXP,NPOW,DELTAN

C  COMMON BLOCK TO DESCRIBE WHICH DRIVER IS USED
      COMMON /CNTROL/ CDRIVE
      CHARACTER(1) CDRIVE

C  COMMON BLOCK FOR INPUT/OUTPUT CHANNEL NUMBERS
      LOGICAL PSIFMT
      COMMON /IOCHAN/ IPSISC,IWAVSC,IPSI,NWCOL,PSIFMT
      DATA IPSISC,IPSI,IWAVSC/108,109,110/
      DATA PSIFMT/.TRUE./

C  COMMON BLOCK FOR CONTROL OF PROPAGATION BOUNDARY CONDITIONS
      COMMON /BCCTRL/ BCYCMN,BCYCMX,BCYOMN,BCYOMX,ADIAMN,ADIAMX,
     1                WKBMN,WKBMX
      LOGICAL ADIAMN,ADIAMX,WKBMN,WKBMX

      LOGICAL LCALC,ALDONE,LSPEC,LCHAR,LSCAN,LFRSET
      LOGICAL PBLKHD,PEFVHD,PNRGHD,PLPHD
      LOGICAL LCURXS,LACCXS
      LOGICAL LOGNRG
      LOGICAL PTIME
      LOGICAL LWARN
C
      NAMELIST /INPUT/ ADIAMN, ADIAMX, ALPHA1, ALPHA2, AZERO,
     1                 BCYCMN, BCYCMX, BCYOMN, BCYOMX, DEGTOL,
     2                 DFIELD, DNRG,   DR,     DRAIRY, DRCON,
     3                 DRL,    DRMAX,  DRNOW,  DRS,    DTOL,
     4                 ENERGY, EPL,    EPS,    EREF,   EUNITS,
     5                 EUNAME, EUNIT,  FIELD,  FIXFLD, FLDMAX,
     6                 FLDMIN, IABSDR, IALFP,  IALPHA, IBFIX,
     7                 IBHI,   ICHAN,  ICON,   ICONVU, IDIAG,
     8                 IFCONV, IFEGEN, IFIELD, IFLS,   IFVARY,
     9                 ILDSVU, IMGSEL, INTFLG, IPARTU, IPERT,
     A                 IPHSUM, IPRINT, IPROPL, IPROPS, IPSI,
     B                 IPSISC, IREF,   IRMSET, IRSTRT, IRXSET,
     C                 ISAVEU, ISCRU,  ISHIFT, ISIGPR, ISIGU,
     D                 ISYM,   IV,     IVP,    IVPP,   IWAVE,
     D                 IWAVSC, IZERO,  JSTEP,  JTOTL,  JTOTU,
     E                 KSAVE,  LABEL,  LASTIN, LINE,   LMAX,
     F                 LOGNRG, LTYPE,  MAGEL,  MHI,    MMAX,
     G                 MONQN,  MSET,   MUNIT,  MXPHI,  MXSIG,
     H                 NCAC,   NCONV,  NFIELD, NFVARY, NGAUSS,
     I                 NGMP,   NLPRBR, NNRG,   NNRGPG, NSTAB,
     J                 NTEMP,  NUMDER, OTOL,   PHILW,  PHIST,
     K                 POWRX,  POWRL,  POWRS,  PRNTLV, RMAX,
     L                 RMID,   RMIN,   RUNAME, RUNIT,  RVFAC,
     M                 RVIVAS, SCALAM, SHRINK, STEPL,  STEPS,
     N                 TEMP,   THETLW, THETST, TOL,    TOLHI,
     O                 TOLHIL, TOLHIS, TOLMAX, TOLMIN, URED,
     P                 WKBMN,  WKBMX,  XSQMAX
      EQUIVALENCE (MXPAR,MXPHI), (RMID,RVIVAS), (DR,DRNOW),
     1            (TOL,TOLHI), (NLPRBR,IFLS), (IPRINT,PRNTLV),
     2            (KSAVE,IPHSUM), (MSET,IBFIX), (MHI,IBHI)
C
C  NGPT, LMAX, MMAX, AND NGMP(3) ARE VARIABLES ADDED FOR
C  COMPATIBILITY WITH THE IOS PROGRAMS
C  VARIABLES VMAX,...,MNNN ADDED FOR COMPATIBILITY WITH S.GREEN CODE
C  (MOSTLY GORDON INTEGRATOR).  ALSO TOL, TOLER, DRNOW
C
C  RMIN IS THE RADIUS AT WHICH THE PROPAGATION IS BEGUN
C  RMAX IS THE OUTER RADIUS TO WHICH THE PROPAGATION MUST EXTEND
C
      DATA CURRWD /'       ','(8-BYTE)'/
      DATA CTIME /'         '/,CDATE /'           '/
      DATA IPROGM /17/, PDATE /'2019.0'/
      DATA PLUR /' ','S'/
      DATA CDRIVE /'M'/
      DATA PTIME  /.FALSE./
C
      DATA LTYPE /MXLN*-1/
C
      DIMENSION NLABV(9),NJLQN(9)
C  NLABV ARRAY CONTAINS NUMBER OF LABELS PER SYMMETRY TERM FOR EACH
C  VALUE OF ITYPE.
      DATA NLABV /1,3,3,4,2,2,5,2,1/
C  NJLQN ARRAY CONTAINS NUMBER OF QUANTUM NUMBER NEEDED TO IDENTIFY A
C  LEVEL CONTAINED IN JLEVEL. (VALUE FOR ITYP=9 IS A DUMMY VALUE)
      DATA NJLQN/1,2,2,3,3,2,2,2,1/
C
C  THE PHYSICAL CONSTANTS USED ARE COMBINED IN THE SINGLE NUMBER BFCT.
C  BFCT IS HBAR/(4*PI*C) IN UNITS OF
C          (ATOMIC MASS UNITS)*(WAVENUMBERS)*(ANGSTROMS**2).
C  THE FOLLOWING VALUE IS FROM THE 1973 PHYSICAL CONSTANTS.
C     DATA BFCT /16.857630D0/
C  16-10-16: BFCT IS NOW STORED IN MODULE physical_constants
C
C     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
C     include statements to enroll program in pvm
C
cINOLLS include 'all/pvmdat2.f'
C
C  STORE VALUE OF MX IN CASE IT NEEDS TO BE RESET;
C  NEEDED IN FUTURE CODE WHICH USES MAXMAX/MX TO ALLOCATE
C  'PERMANENT' STORAGE FOR A RUN W/ MULTIPLE (LASTIN=0) INPUT DECKS
      MXSAVE=MX
C
  10  MX=MXSAVE
      unset=PUNSET
C  RESET ITEMS IN COMMON BLOCKS IN CASE OF REPEAT CALCULATIONS
      IVLU=0
      IVLFL=0
      NCONST=0
      NRSQ=0
      RMATCH=0.D0
      ERED=0.D0
      IPSISC=108
      IPSI=109
      IWAVSC=110
      NEXP=0
      CALL GCLOCK(TFIRST)
      CALL GDATE(CDATE)
      CALL GTIME(CTIME)
C
C--------------------------------------------------------------------
C  INITIALIZE STORAGE PARAMETERS IN /MEMORY/
      NIPR=2
      IXNEXT=1
C  SET NUSED.LT.0 AND CALL CHKSTR TO RESET COUNTER FOR EACH &INPUT.
      NUSED=-1
      CALL CHKSTR(NUSED)
C  SET DEFAULT NAMES FOR UNITS USED BY POTENTIAL ROUTINES
      EPNAME='EPSIL'
      RMNAME='RM'
C
C  SET INITIAL VALUES BEFORE READ(5,INPUT) . . .
C
      ADIAMN=.TRUE.
      ADIAMX=.TRUE.
      ALPHA1=1.D0
      ALPHA2=1.5D0
      AZERO=0.D0
      BCYCMN=-1.D0
      BCYCMX=-1.D0
      BCYOMN=1.D8
      BCYOMX=0.D0
      DEGTOL=1.D-10
      DFIELD=1.D0
      DNRG=0.D0
      DR=2.D-2
      DRAIRY=-1.D0
      DRCON=0.1D0
      DRL=unset
      DRMAX=5.D0
      DRS=unset
      DTOL=0.3D0
      DO I=1,MXNRG
        ENERGY(I)=0.D0
      ENDDO
      EPL=0.D0
      EPS=0.D0
      EREF=0.D0
      EUNITS=1
      EUNAME='E UNITS'
      EUNIT=1.D0
      DO I=1,MXFLD
        FIELD(I)=0.D0
        FIELD(I)=0.D0
      ENDDO
      DO I=1,MAXEFV
        EFVNAM(I)=' '
        EFVUNT(I)=' '
        FIXFLD(I)=0.0D0
        IFVARY(I)=MAXEFV+1
      ENDDO
      FLDMAX=0.D0
      FLDMIN=0.D0
      IABSDR=0
      IALFP=.FALSE.
      IALPHA=6
      IBFIX=0
      IBHI=0
      ICHAN=1
      ICON=1
      ICONVU=0
      IDIAG=.FALSE.
      IFCONV=0
      IFEGEN=0
      IFIELD=-1
      ILDSVU=0
      IMGSEL=4
      INTFLG=0
      IPARTU=0
      IPERT=.TRUE.
      IPHSUM=0
      IPRINT=2
      IPROPL=0
      IPROPS=0
      IREF=0
      IRMSET=9
      IRXSET=0
      ISAVEU=0
      ISCRU=0
      ISHIFT=.FALSE.
      ISIGPR=0
      ISIGU = 0
      ISYM=.TRUE.
      IV=.TRUE.
      IVP=.FALSE.
      IVPP=.FALSE.
      IWAVE=0
      IZERO=0
      JSTEP=1
      JTOTL=0
      JTOTU=0
      LABEL=' '
      LASTIN=1
      DO I=1,2*MXLN
        LINE(I)=0
      ENDDO
      LMAX=0
      LOGNRG=.FALSE.
      LTYPE=-1
      MAGEL=1
      MMAX=0
      MONQN(1)=-99999
      MXPHI=1
      MXSIG=0
      MUNIT=1.D0
      NCAC=4
      NCONV=0
      NFIELD=1
      NFVARY=-1
      NGAUSS=3
      NGMP(1)=8
      NGMP(2)=1
      NGMP(3)=16
      NLPRBR=0
      NNRG=0
      NNRGPG=1
      NSTAB=5
      NTEMP=0
      NUMDER=.FALSE.
      OTOL=.005D0
      PHILW=0.D0
      PHIST=0.D0
      POWRX=3.D0
      POWRL=unset
      POWRS=unset
      RMAX=10.D0
      RMID=unset
      RMIN=0.8D0
      RUNAME='RUNIT'
      RUNIT=unset
      RVFAC=0.D0
      SCALAM=1.D0
      SHRINK=1
      STEPS=-10.D0
      STEPL=unset
      DO I=1,MXTEMP
        TEMP(I)=0.D0
      ENDDO
      THETLW=0.D0
      THETST=0.D0
      TOLHI=0.0001D0
      TOLHIL=unset
      TOLHIS=unset
      TOLMAX=1.0D0
      TOLMIN=0.1D0
      URED=0.D0
      WKBMN=.TRUE.
      WKBMX=.TRUE.
      XSQMAX=1.D4
C  OTHER VARIABLES
      ILSU=11
      IOSFLG=0
      IRSTRT=0
      ITPSUB=0
      LWARN=.FALSE.
      MAPEFV=0
      DO I=1,MXOMEG
        OLDFAC(I)=0.D0
      ENDDO
      NDGVL=0
      NEFV=-1
      NPOTL=0
      PI=ACOS(-1.D0)

C
C  READ &INPUT  DATA.
      if (.not.inolls) READ(5,INPUT,END=9040)
C
C     INCLUDE STATEMENTS TO RECEIVE, UNPACK AND ALLOCATE DATA TO
C     VARIABLES
C
cINOLLS include 'molscat/rinput-v2018.f'
C
      LABEL=ADJUSTL(LABEL)
      LABLEN=MAX(LEN(TRIM(LABEL)),1)
      WRITE(CLEN3,'(I2)') LABLEN
      WRITE(CLEN1,'(I3)') (116-LABLEN)/2
      WRITE(CLEN2,'(I3)') (117-LABLEN)/2
      F710="(/2X,"//ADJUSTR(CLEN1)//"('='),' ',(A"//ADJUSTL(CLEN3)//
     2     "),' ',"//ADJUSTR(CLEN2)//"('='))"
      F711="(/2X,"//ADJUSTR(CLEN1)//"('-'),' ',(A"//ADJUSTL(CLEN3)//
     2     "),' ',"//ADJUSTR(CLEN2)//"('-'))"
C
      IF (URED.EQ.0.D0) THEN
        WRITE(6,*) ' YOU HAVE FORGOTTEN THE REDUCED MASS'
        STOP
      ENDIF

      IF (IPRINT.GE.1) THEN
        WRITE(6,1001)
 1001   FORMAT('  -',5('--- MOLSCAT ---'))
        WRITE(6,1002)
 1002   FORMAT(' |',76X,'|',/,' |',16X,
     1         'Non-reactive quantum scattering calculations',16X,'|',/
     2         ' |',21X,'on atomic and molecular collisions',21X,'|')
        CALL PROGVS(PDATE)
        CALL TIMEST(CDATE,CTIME)
        WRITE(6,1001)
        CALL CPRMSG('MOLSCAT',PDATE)
      ENDIF

      IF (IPRINT.GE.1) WRITE(6,1003) NIST_year
 1003 FORMAT(/'  USING CODATA ',I4,' RECOMMENDED VALUES OF',
     1   ' FUNDAMENTAL PHYSICAL CONSTANTS')

      IF (NIPR.EQ.1 .OR. NIPR.EQ.2) THEN
        AMXMB=MX/128.D0/1024.D0
        WRITE(6,1004) MX,CURRWD(NIPR),AMXMB
 1004   FORMAT(/'  MEMORY ALLOCATED TO MAIN WORKING ARRAY IS',I10,1X,A8,
     1         ' WORDS (',F8.2,' MB)')
        WRITE(6,1005) NIPR,PLUR(NIPR)
 1005   FORMAT(2X,I1,' INTEGER',A1,' CAN BE STORED IN EACH WORD.')
      ELSE
        WRITE(6,1006) NIPR
 1006   FORMAT(/' *** ILLEGAL NIPR =',I10)
      ENDIF
C
      IF (LOGNRG) DNRG=1.0D0

      IF (IPRINT.GE.1) WRITE(6,1007) IPRINT,ISIGPR
 1007 FORMAT(/'  PRINT LEVEL (IPRINT) =',I3,'     OTHER PRINT CONTROLS',
     1       '  ISIGPR =',I2)

c     IF (IPRINT.GE.1) WRITE(6,1008) LABEL
c1008 FORMAT(/'  RUN LABEL = ',A80)

      IF (IPRINT.GE.1) THEN
        IF (MUNIT.EQ.1.D0) THEN
          WRITE(6,1009) URED
 1009     FORMAT(/'  REDUCED MASS FOR INTERACTION =',F14.9,
     1            ' ATOMIC MASS UNITS (DALTONS)')
        ELSE
          WRITE(6,1010) URED,MUNIT
 1010     FORMAT(/'  REDUCED MASS FOR INTERACTION =',F14.9,
     1            ' (UNITS OF',1PG16.9,' DALTONS)')
        ENDIF
      ENDIF

      IF (ISCRU.EQ.0) THEN
        IF (NNRG.GT.1. OR. NTEMP.GT.0) WRITE(6,1021)
 1021   FORMAT(/'  NO SCRATCH FILE SPECIFIED BY ISCRU PARAMETER: ',
     1         'FULL CALCULATION WILL BE DONE AT EVERY ENERGY')
      ELSEIF (ISAV.EQ.-1) THEN
          IF (IPRINT.GE.1) WRITE(6,1022) ISCRU
 1022     FORMAT(/'  ENERGY-INDEPENDENT MATRICES SAVED FROM A ',
     1           'PREVIOUS RUN WILL BE READ FROM UNIT',I3)
          OPEN(ISCRU,FORM='UNFORMATTED',STATUS='OLD')
      ELSE !IF (ISAV.EQ.0) THEN
        IF (IPRINT.GE.1) WRITE(6,1023) ISCRU
 1023   FORMAT(/'  ENERGY-INDEPENDENT MATRICES WILL BE SAVED ',
     1         'TEMPORARILY ON UNIT',I3)
C  FOR SOME APPLICATIONS THE ISCRU FILE NEEDN'T BE SAVED: USE THIS
        OPEN(ISCRU,FORM='UNFORMATTED',STATUS='SCRATCH')
C     ELSE
C  BUT FOR OTHERS IT WILL BE REUSED: USE THIS
C       OPEN(ISCRU,FORM='UNFORMATTED')
      ENDIF
C
C  PROCESS TOTAL ENERGIES
C
      IF (EUNITS.NE.0) CALL ECNV(EUNITS,EUNIT,EUNAME,IPRINT)

      IF (IPRINT.GE.1) WRITE(6,1060)
 1060 FORMAT(/2X,59('=='))
C
C--------------------------------------------------------------------
C  INITIALIZE BASIS (BASIN/IOSBIN)
C  COMBINED MOLSCAT (BASIN) AND IOS (IOSBIN) -- APR 86
C  IOSBIN GRABS STORAGE IN ATAU=JSTATE=X (ITYPE=6 ONLY).  MAX AVAILABLE
C  PASSED INITIALLY IN NSTATE; SET6I/IOSBIN MUST UPDATE
C  IC ACCORDINGLY.  N.B. IOS CASE ALSO USES NSTATE TO PASS 'NVC'
C  FROM BASIN/IOSBIN TO IOSDRV.
C  BASIN TAKES STORAGE FOR JSTATE=X, AND ALSO RESETS IC ACCORDINGLY;
C  FOR THIS CASE, NSTATE INITIALIZED TO MAXIMUM AVAILABLE IN X().
      ISJSTT=IXNEXT  ! JSTATE
      NSTATE=MX
      CALL BASIN(NSTATE,X(ISJSTT),URED,NQN,NLABV(9),MXPAR,ITYPE,IPRINT,
     1           IOSFLG,IBOUND,NLEVEL,X(ISJSTT))

C  BASE ROUTINE INCREMENTS IXNEXT BY AMOUNT OF STORAGE IN JSTATE.
      CALL CHKSTR(NUSED)
      IF (IPRINT.GE.1) WRITE(6,1060)
C
      IF (JTOTU.LT.JTOTL) JTOTU=99999
      IF (JHALF.EQ.0 .AND. JTOTU.GE.99999) THEN
        WRITE(6,*) ' *** WARNING: AUTOMATED CONVERGENCE OF CROSS '//
     1             'SECTIONS IS NOT ALLOWED'
        JTOTU=JTOTL
      ENDIF
C
C  DEGENERACY TOLERANCE USED FOR IDENTIFYING ASYMPTOTIC DEGENERACIES,
C  USED IN YTRANS WITH MULTIPLE OPERATORS AND GETLEV
      DEGTOL=DEGTOL*EUNIT
      IF (NEXTRA.NE.0) THEN
        IF (IPRINT.GE.1) THEN
          IF (EUNIT.NE.1.D0) THEN
            WRITE(6,1101) DEGTOL,DEGTOL/EUNIT,EUNAME
          ELSE
            WRITE(6,1101) DEGTOL
          ENDIF
          WRITE(6,1102) NEXTRA
        ENDIF
 1101   FORMAT(/2X,'EXTRA OPERATORS WILL BE USED TO RESOLVE ',
     1         'ASYMPTOTIC DEGENERACIES CLOSER THAN'/2X,'DEGTOL =',
     2         G16.8,' CM-1 =',G16.8,1X,A)
 1102   FORMAT(2X,'THERE ARE ',I3,' EXTRA OPERATORS')
      ENDIF
C
C  PROCESS REQUESTED PROPAGATOR -- AND ITS INPUT DATA.
C
      LSCAN=.TRUE.
      LSPEC=.FALSE.
      LCHAR=.FALSE.
      LFRSET=(FLDMIN.NE.0.D0 .OR. FLDMAX.NE.0.D0)

C  TEST ON IZERO (PRE 2017.1 SYNTAX) FOR SPECIFIC VALUE SEARCH/RESONANCE
C  CHARACTERISATION
      IF (IZERO.NE.0 .AND. LFRSET) THEN
        WRITE(6,*) ' *** INPUT VARIABLE IZERO IS DEPRECATED.'
        WRITE(6,*) '     USE IFCONV TO SPECIFY TYPE OF SEARCH:'
        WRITE(6,*) '       -1 FOR SPECIFIC VALUE OF SCATTERING LENGTH'
        WRITE(6,*) '       1, 2 OR 3 FOR VARIOUS TYPES OF RESONANCE.'
        WRITE(6,*) '     USE ICHAN TO SPECIFY INDEX OF INCOMING CHANNEL'
        ICHAN=ABS(IZERO)
        IF (IZERO.GT.0) THEN
          LSPEC=.TRUE.
          IFCONV=-1
        ENDIF
        IF (IZERO.LT.0) THEN
          LCHAR=.TRUE.
          IFCONV=1
        ENDIF
      ELSEIF (IWAVE.EQ.0 .AND. LFRSET) THEN
C  TEST ON ICHAN, IFCONV AND NNRG TO IDENTIFY OTHER PROCEDURES
        IF (ICHAN.NE.0 .AND. IFCONV.EQ.-1) THEN
          LSPEC=.TRUE.
        ENDIF
        IF (ICHAN.NE.0 .AND. IFCONV.GE.1) THEN
          LCHAR=.TRUE.
        ENDIF
      ENDIF

      IF (LSPEC .AND. FLDMAX.LE.FLDMIN) THEN
        WRITE(6,1103) 'SEARCH'
        IFCONV=0
        LSPEC=.FALSE.
      ENDIF
 1103 FORMAT(/2X,'*** WARNING: ',A,' CANNOT BE PERFORMED BECAUSE ',
     1       'FLDMAX <= FLDMIN.',/,
     2       /6X,'ONE CALCULATION WILL BE PERFORMED (AT FLDMIN).')
      IF (LCHAR .AND. FLDMAX.LE.FLDMIN) THEN
        WRITE(6,1103) 'RESONANCE CHARACTERISATION'
        IFCONV=0
        LCHAR=.FALSE.
      ENDIF

      LSCAN=IFCONV.EQ.0

C  INITIALISE ALL EXTERNAL FIELD VARIABLE QUANTITIES
      CALL INIEFV(FIXFLD,IPRINT,FLDMIN,FLDMAX,DFIELD,
     1            NFIELD,FIELD,MAGEL,NFVARY,IFVARY,LSPEC.OR.LCHAR,LSCAN)
      IF (LSPEC.OR.LCHAR) THEN
        SVNAME=EFVNAM(ISVEFV)
        SVUNIT=EFVUNT(ISVEFV)
      ENDIF
      LSCAN=ABS(NNRG)*NFIELD.GT.1
C
      LENEFV=MAX(NEFVP-IEFVST+1,0)
      IF (NTEMP.GT.0) THEN
C  OVERRIDE ENERGY INPUT WITH TEMP INPUT
        NTEMP=MIN(NTEMP,MXTEMP)
        CALL EAVG(NTEMP,TEMP,NGAUSS,ENERGY,NNRG,IPRINT)
        NPR=NNRG

      ELSE

        ISRCH=0
        NPR=NNRG
C
C  PROCESS A NEGATIVE INPUT NNRG FOR RESONANCE SEARCH OPTION
C
        IF (NNRG.LT.0 .AND. DNRG.NE.0.D0 .AND. JTOTL.EQ.JTOTU .AND.
     1      IBFIX.GT.0 .AND. IPHSUM.GT.0) THEN
          ISRCH=1
          NNRG=5*(ABS(NNRG)/5)
          MXN=5*(MXNRG/5)
          NNRG=MIN(NNRG,MXN)
          NNRGPG=5
          NPR=5
        ENDIF
C
        NNRG=MIN(MXNRG,NNRG)
        NPR=MIN(MXNRG,NPR)
C
        IF (NNRG.LE.0) THEN
          WRITE(6,1104)
 1104     FORMAT(/' ***** ERROR - NO INPUT ENERGIES SPECIFIED - ',
     1           'RUN HALTED')
          STOP
        ENDIF
C
        IF (NNRG.GT.1 .AND. DNRG.GT.0.D0 .AND. NCONV.EQ.0) THEN
          IF (LOGNRG) THEN
            RATIO=(ENERGY(2)/ENERGY(1))**(1D0/DBLE(NNRG-1))
            DO I=2,NNRG
              ENERGY(I)=ENERGY(I-1)*RATIO
            ENDDO
          ELSE
            DO I=2,NPR
              ENERGY(I)=ENERGY(1)+DNRG*DBLE(I-1)
            ENDDO
          ENDIF
        ENDIF
C
C  CONVERT ENERGY LIST INTO CM-1
C
        DO I=1,NPR
          ENERGY(I)=ENERGY(I)*EUNIT
        ENDDO
      ENDIF
      EPS=EPS*EUNIT
      EPL=EPL*EUNIT
C
C--------------------------------------------------------------------
C  INITIALIZE POTENTIAL.
C
      IF (NUMDER .AND. IPRINT.GE.1) WRITE(6,1105)
 1105 FORMAT(/'  NUMDER=.TRUE.  POTENTIAL DERIVATIVE WILL BE COMPUTED',
     &       ' NUMERICALLY FROM POTENTIAL.')
C
C   EPSIL  (POTENTIAL ENERGY UNIT) MUST BE SET IN POTENL
C   RPUNIT (POTENTIAL LENGTH UNIT) MAY OPTIONALLY BE SET IN POTENTIAL
C     IF RPUNIT IS SET AND RUNIT IS UNSET, RUNIT IS TAKEN FROM RPUNIT,
C     AND VICE VERSA. IF BOTH ARE SET, POTENL USES SEPARATE LENGTH UNITS.
C     IF NEITHER IS SET, THEY DEFAULT TO 1 (ANGSTROMS).
C     THE SCALING FACTOR RUNIT/RPUNIT IS PLACED IN RSCALE.
C
      ILAM=IXNEXT
      MXLAM=NIPR*(MX-ILAM+1)
C
      RPUNIT=unset
      CALL POTENL(-1,MXLAM,X(ILAM),RPUNIT,EPSIL,ITYPE,IPRINT)
C
      CALL CHCKRU(RUNIT,RPUNIT,RSCALE,unset,IPRINT)
C
C  THE PROGRAM WORKS WITH REDUCED ENERGIES IN UNITS OF 1/RUNIT**2
C  ALL DISTANCES ARE IN THESE R UNITS.
C  CINT CONVERTS ENERGIES IN CM-1 INTO UNITS OF 1/RUNIT**2
C  RMLMDA CONVERT THE INTERACTION POTENTIAL INTO UNITS OF 1/RUNIT**2
C
      CINT=URED*MUNIT*RUNIT*RUNIT/BFCT
      RMLMDA=CINT*EPSIL
C
      ITYP=MOD(ITYPE,10)
C  INCREMENT IXNEXT FOR STORAGE TAKEN FOR LAM(NLABV,MXLAM)
      IXNEXT=IXNEXT+(MXLAM*NLABV(ITYP)+NIPR-1)/NIPR

      CALL VLCHK(IVLFL,IPRINT,ITYPE,NLABV,MXLAM,NPOTL,X(ILAM))

C
      IF (IPRINT.GE.1) WRITE(6,1060)
      CALL PROPST(RMIN,RMAX,DR,IRMSET,IRXSET,RVFAC,
     1            INTFLG,IMGSEL,IPRINT,
     2            EPS,EPL,POWRX,TOLHI,DRMAX,NSTAB)
C
C  IF WAVEFUNCTIONS ARE REQUESTED, 3 EXTRA FILES ARE USED:
C  CHANNEL IWAVSC   SCRATCH  SAVING BITS REQUIRED FOR WAVEFN PROPAGATION
C  CHANNEL IPSISC   SCRATCH  SAVING WAVEFN AS CREATED BY MDPROP
C  CHANNEL IPSI     FINAL FILE WITH WAVEFN SEQUENTIALLY FROM RMIN TO RMAX
C  OPEN TEMPORARY FILES LATER AS N IS REQUIRED FOR RECORD LENGTH
C
      WAVE=(IWAVE.NE.0 .AND. IPROPS.EQ.6 .AND. IPROPL.EQ.6)
      IF (IWAVE.NE.0 .AND. .NOT.WAVE) THEN
        WRITE(6,1110)
 1110   FORMAT(/'  WAVEFUNCTIONS ONLY AVAILABLE FOR LDMD PROPAGATOR:',
     1         ' REQUEST CANCELLED')
      ENDIF
C
C  WRITE HEADER ON WAVEFUNCTION FILE
C
      IF (WAVE) CALL WVHEAD(IPROGM,LABEL,ITYPE,URED,IPRINT)

      IF (WAVE .AND. ICHAN.LE.0) THEN
        WRITE(6,*) '  *** SCATTERING CHANNEL MUST BE GIVEN AS ICHAN'
        STOP
      ENDIF
C
      ISAV=0
      IF (JTOTL.EQ.JTOTU .AND. IBFIX.GT.0 .AND. NFIELD.EQ.1) ISAV=1
      IF (ISCRU.LT.0) ISAV=-ISAV
      ISCRU=ABS(ISCRU)
C
      IF (IBFIX.GT.0 .AND. IBHI.GT.0 .AND. IBHI.LT.IBFIX) IBHI=0
      IF (IBFIX.GT.0 .AND. IBHI.LE.0) IBHI=IBFIX

      IF (NCONV.GT.0) THEN
        IF (IPRINT.GE.1) WRITE(6,1060)
        WRITE(6,*)
        WRITE(6,*) ' CONVERGENCE RUN REQUESTED'
        IF (JTOTL.LT.JTOTU) THEN
          WRITE(6,*) ' RESTRICTING JTOT TO FIRST VALUE'
          JTOTU=JTOTL
        ENDIF
        IF (IBFIX.EQ.0) THEN
          WRITE(6,*) ' YOU NEED TO SET IBFIX IN A CONVERGENCE RUN'
          STOP
        ELSEIF (IBHI.GT.IBFIX) THEN
          WRITE(6,*) ' RESTRICTING SYMMETRY BLOCKS TO IBFIX = ',IBFIX
          IBHI=0
        ENDIF
      ENDIF
C
C  INFO ABOUT ENERGIES
C
      IF (IPRINT.GE.1) THEN
        WRITE(6,1060)
        IF (EUNITS.EQ.1) THEN
          WRITE(6,1200)
        ELSEIF (EUNITS.LE.9) THEN
          WRITE(6,1210) TRIM(EUNAME),EUNITS
        ELSE
          WRITE(6,1220) TRIM(EUNAME),EUNITS
        ENDIF
 1200   FORMAT(/'  INPUT ENERGY VALUES ASSUMED TO BE IN UNITS OF CM-1 ',
     1         'BY DEFAULT.')
 1210   FORMAT(/'  INPUT ENERGY VALUES CONVERTED FROM ',A/
     1         '  TO INTERNAL WORKING UNITS OF CM-1 DUE TO INTEGER ',
     2         'INPUT =',I4)
 1220   FORMAT(/'  INPUT ENERGY VALUES CONVERTED FROM ',A/
     1          '  TO INTERNAL WORKING UNITS OF CM-1 DUE TO ',
     2          'ALPHANUMERIC INPUT =',A4)

        IF (NNRG.GT.0 .AND. DNRG.EQ.0.D0 .AND. ABS(EUNIT-1.D0).GT.1.D-3
     1                .AND. NCONV.EQ.0 .AND. IPRINT.GE.1)
     2    WRITE(6,1230) (ENERGY(I),I=1,NNRG)
 1230   FORMAT(/'  INPUT ENERGY LIST IS'/1P,(16X,7G16.6))
      ENDIF
C
      IF (NCONV.EQ.0) THEN
        IF (IPRINT.GE.1) WRITE(6,1240) NNRG,PLUR(MIN(NNRG,2))
 1240   FORMAT(/'  CONTROL DATA FOR TOTAL ENERGIES.  CALCULATIONS ',
     1         'WILL BE PERFORMED FOR',I4,' VALUE',A1)
        IF (IPRINT.GE.1) THEN
          DO I=1,NPR
            IF (EUNIT.NE.1.D0) THEN
              WRITE(6,1250) I,ENERGY(I),ENERGY(I)/EUNIT,EUNAME
            ELSE
              WRITE(6,1250) I,ENERGY(I)
            ENDIF
          ENDDO
        ENDIF
 1250   FORMAT(7X,'ENERGY NO.',I4,' =',1PG19.11,' CM-1',:' =',
     &         G19.11,1X,A8)
      ELSE
        IF (NNRG.LE.1) THEN
          WRITE(6,*) ' YOU NEED TO SET NNRG > 1 FOR A CONVERGENCE RUN'
          STOP
        ELSE
          WRITE(6,*) ' USING JUST THE FIRST ENERGY FOR CONVERGENCE '//
     1               'TESTING'
          DO INRG=2,NNRG
            ENERGY(INRG)=ENERGY(1)
          ENDDO
        ENDIF
        IF (IPRINT.GE.1) THEN
          IF (EUNIT.NE.1.D0) THEN
            WRITE(6,1260) NNRG,ENERGY(1),ENERGY(1)/EUNIT,EUNAME
          ELSE
            WRITE(6,1260) NNRG,ENERGY(1)
          ENDIF
        ENDIF
 1260   FORMAT(/'  CONTROL DATA FOR CONVERGENCE TESTS.  CALCULATIONS ',
     1         'WILL BE PERFORMED ',I4,' TIMES'/
     2         7X,'ENERGY =',1PG19.11,' CM-1',:' =',G19.11,1X,A)
      ENDIF
C
      IF (ISRCH.EQ.1 .AND. IPRINT.GE.1) WRITE(6,1270)
 1270 FORMAT(/'  RESONANCE SEARCH OPTION. ONLY FIRST 5 ENERGIES ',
     1       'GIVEN. OTHERS WILL BE DETERMINED INTERACTIVELY.')
C
      IF (IFEGEN.GT.0 .AND. IPRINT.GE.1) WRITE(6,1280)
 1280 FORMAT(/'  THESE ENERGY VALUES WILL BE USED AS KINETIC ENERGIES',
     1       ' AND MODIFIED ACCORDINGLY.')
C


C  IF EXTERNAL FIELDS OR POTENTIAL SCALING INCLUDED, WRITE SUMMARY
      IF (LENEFV.GT.0 .AND. IPRINT.GE.1) THEN
        IF (IPRINT.GE.1) WRITE(6,1060)
C  WRITE HEADER
        IF (IFCONV.EQ.-1) THEN
          WRITE(6,1400) '  PROGRAM WILL ATTEMPT TO CONVERGE ON ',
     1                  'SCATTERING LENGTH A = AZERO FOR CHANNEL',
     2                  ICHAN,' TO ACCURACY',DTOL,TRIM(SVUNIT),
     3                  '  BETWEEN FLDMIN AND FLDMAX FOR ',
     4                  TRIM(SVNAME),'  WITH AZERO =',AZERO
        ELSEIF (IFCONV.GE.1) THEN
          WRITE(6,1400) '  PROGRAM WILL ATTEMPT TO CHARACTERISE ',
     1                  'RESONANCE IN SCATTERING LENGTH FOR CHANNEL',
     2                  ICHAN,' TO ACCURACY',DTOL,TRIM(SVUNIT),
     3                  '  BETWEEN FLDMIN AND FLDMAX FOR ',
     4                  TRIM(SVNAME)
          IF (IFCONV.EQ.1) THEN
            WRITE(6,*) '  USING ELASTIC RESONANCE FORMULA'
          ELSEIF (IFCONV.EQ.2) THEN
            WRITE(6,1410) '  USING FORMULA INCORPORATING WEAK '//
     1                   ' BACKGROUND INELASTICITY.',TOLMIN,TOLMAX
          ELSEIF (IFCONV.EQ.3) THEN
            WRITE(6,1410) '  USING FULL TREATMENT OF INELASTIC '//
     1                   'RESONANCE',TOLMIN,TOLMAX
          ENDIF
        ENDIF
 1400   FORMAT(/A,A,I4,A,1PG10.2,' ',A/A,A/:A,G12.5/)
 1410   FORMAT(A/'  TOLMIN = ',F6.4,' AND TOLMAX = ',F6.4)

        IF (LCHAR) THEN
          IF (NNRG.GT.1) THEN
            WRITE(6,*) ' RESONANCE CHARACTERISATION WILL ONLY BE',
     1                 ' PERFORMED FOR FIRST ENERGY'
            NNRG=1
          ENDIF
        ELSEIF (LSPEC) THEN
          IF (NNRG.GT.1) THEN
            WRITE(6,*) ' LOCATION OF FIELD AT WHICH SCATTERING LENGTH',
     1                 ' HAS SPECIFIC VALUE WILL ONLY BE PERFORMED',
     2                 ' FOR FIRST ENERGY'
            NNRG=1
          ENDIF
        ENDIF

        CALL MSGEFV(0,NFIELD)
        DO JFIELD=1,NFIELD
          IF (LSPEC .OR. LCHAR) THEN
            IF (JFIELD.EQ.1) SV_VAL=FLDMIN
            IF (JFIELD.EQ.2) SV_VAL=FLDMAX
            IF (JFIELD.GT.2) EXIT
          ENDIF
C  WRITE MESSAGE FOR THIS CYCLE
          CALL SETEFV(FIELD,SV_VAL)
          CALL MSGEFV(-JFIELD,NFIELD)
        ENDDO
C  RESET VALUES READY FOR LOOP LATER ON
        CALL RSTEFV(FIXFLD)
      ENDIF

      IF (IPRINT.GE.1) THEN
        WRITE(6,1060)
        IF (JTOTL.LT.JTOTU) THEN
          WRITE(6,1500) JTOTL,JTOTU,JSTEP
        ELSE
          WRITE(6,1510) JTOTL
        ENDIF
        IF (JTOTU.GE.99999) THEN
          WRITE(6,1520) NCAC,DTOL,OTOL
          IF (NNRGPG.GT.1) WRITE(6,1530) NNRGPG
        ENDIF
      ENDIF
 1500 FORMAT(/'  TOTAL ANGULAR MOMENTUM JTOT RUNS FROM',I4,'  TO',
     1        I7,'  IN STEPS OF',I4)
 1510 FORMAT(/'  TOTAL ANGULAR MOMENTUM JTOT =',I4)
 1520 FORMAT(/'  JTOT SERIES WILL BE TERMINATED WHEN MAX CHANGE IN ',
     1       'CROSS SECTIONS IS LESS THAN TOLERANCE FOR NCAC =',I3,
     2       ' CONSECUTIVE JTOT'/2X,'DIAGONAL (DTOL) AND ',
     3       'OFF-DIAGONAL (OTOL) TOLERANCES ARE',F9.5,' AND ',F9.5)
 1530 FORMAT(/'  N.B. CONVERGENCE CHECKING IS DONE FOR ENERGY GROUPS',
     1       ' OF NNRGPG =',I4)

      IF (IPRINT.GE.1 .AND. MXPAR.GT.1)
     1  WRITE(6,'(/2X,A,I3,A)') 'EACH JTOT IS SPLIT INTO A MAXIMUM OF ',
     1                          MXPAR,' SYMMETRY BLOCKS'
      IF (IBFIX.GT.0 .AND. IBHI.GT.0 .AND. IBHI.LT.IBFIX) IBHI=0
      IF (IBFIX.GT.0 .AND. IBHI.LE.0) IBHI=IBFIX
      IF (IBFIX.EQ.0) IBHI=MXPAR
      IF (IBFIX.GT.0 .AND. IPRINT.GE.1) THEN
        IF (IBFIX.LT.IBHI) THEN
          WRITE(6,1600) IBFIX,IBHI
        ELSE
          WRITE(6,1610) IBFIX
        ENDIF
      ENDIF
      IBMIN=MAX(1,IBFIX)
      IBMAX=MIN(IBHI,MXPAR)
 1600 FORMAT(/'  CALCULATIONS WILL BE FOR SYMMETRY BLOCKS',
     1       I4,'  TO',I4)
 1610 FORMAT(/'  CALCULATION(S) WILL BE FOR SYMMETRY BLOCK',I4)

      IF (IOSFLG.GT.0) THEN
C
C  THIS IS WHERE IOS CODE DIVERGES - CALL IOS CODE AND SKIP TO EXIT
C
        IF (IRSTRT.NE.0) THEN
          WRITE(6,*) '  *** RESTART REQUESTED WITH IOS RUN - ',
     1               'NOT ALLOWED'
          WRITE(6,*) '  *** MODIFY INPUT DECK AND RESUBMIT'
          STOP
        ENDIF
        CALL IOSDRV(NNRG,NPR,ENERGY,JTOTL,JTOTU,JSTEP,TEST,NCAC,
     1              NLPRBR,LINE,LTYPE,ITYPE,LMAX,MMAX,
     2              IPROGM,URED,LABEL,IREF,IPOT,
     3              X(ILAM),MXLAM,NPOTL,CINT,IRMSET,IRXSET,RVFAC,
     4              IPRINT,NSTATE,ISAVEU,TFIRST,RUNIT,EPSIL,RMIN,
     5              RMAX,MONQN,IBOUND,WAVE,ERED,RMLMDA,DRMAX,NSTAB,
     6              ILDSVU)
        CALL GCLOCK(TLAST)
        TOTIME=TLAST-TFIRST
        GOTO 9020
      ENDIF
C
C  PROCESS PRESSURE-BROADENING LINE-SHAPE INPUT PARAMETERS.
C
      IF (NLPRBR.GT.0) THEN
        CALL PRBRIN(NLPRBR,LINE,LTYPE,ILSU,NNRG,ENERGY,IFEGEN,
     1              X(ISJSTT),IPRINT)
        IF (IFEGEN.GT.0) NPR=NNRG
        IF (IPRINT.GE.1) WRITE(6,1060)

        IF (IPHSUM.NE.0) THEN
          WRITE(6,1700) NLPRBR,IPHSUM
 1700     FORMAT(/'  ****** WARNING. NLPRBR =',I3,' AND IPHSUM =',I3,
     1           ' ARE INCOMPATIBLE. IPHSUM IS RESET TO ZERO')
          IPHSUM=0
        ENDIF
      ENDIF
C
C--------------------------------------------------------------------
C  INITIALIZE OUTPUT ROUTINE.
C  OUTPUT TAKES AN ADDITIONAL AMOUNT OF STORAGE
C  FOR SIG AT X(IXNEXT) AND INCREASES IXNEXT ACCORDINGLY.
C
      IF (NNRG*NFIELD.GT.MXNRG) THEN
        WRITE(6,1800) NNRG,NFIELD,MXNRG
 1800   FORMAT('  NNRG =',I5,' * NFIELD =',I5,' WOULD OVERFLOW ',
     1         'DIMENSION OF MINJT ETC, MXNRG =',I6)
        STOP
      ENDIF
      IOUT=IXNEXT        ! SIGCUR
C  NOTE THAT IXNEXT WILL BE CHANGED BY OUTINT
      CALL FLUSH(6)

C  SET LOGICALS THAT DETERMINE WHETHER TO:
C  1) CALCULATE CURRENT CROSS SECTION
      LCURXS=.NOT.(LSPEC .OR. LCHAR)

      IF (NCONST.GT.0 .OR. NRSQ.GT.0) LCURXS=LCURXS .AND. MXSIG.GT.0
      IF (NCONST.GT.0 .AND. JTOTU.GT.JTOTL .AND. IBFIX.EQ.0)
     1  LCURXS=LCURXS .AND. IREF.LE.0

C  REASONING HERE IS THAT IF AN EFV DOES AFFECT THE ASYMPTOTIC ENERGIES
C  THEN ACCUMULATION SHOULD NOT BE ALLOWED, AS THE INDEXING WILL NOT
C  WORK CORRECTLY (ACCUMULATION WILL WORK CORRECTLY, BUT THERE WILL NEED
C  TO BE MANY EMPTY ELEMENTS OF THE SIGACC ARRAY, TO ACCOMODATE LEVELS
C  FROM OTHER FIELDS)
      IF (NFVARY.GT.0 .OR. NDGVL.GT.0) THEN
        IF (IFVARY(NFVARY).NE.0) LCURXS=LCURXS .AND. NFIELD.EQ.1
      ENDIF

C  2) ACCUMULATE CONTRIBUTIONS TO TOTAL CROSS SECTION (ALLOW
C  ACCUMULATION IF EFV IS POTENTIAL SCALING FACTOR, AS THEN THE PAIR
C  LEVELS WILL BE CONSISTENT BETWEEN DIFFERENT CALCULATIONS)
      IF (NFVARY.EQ.1 .AND. IFVARY(1).EQ.0) THEN
        LACCXS=LCURXS
      ELSE
        LACCXS=(LCURXS .AND. (NFVARY.EQ.0 .AND. NDGVL.EQ.0))
      ENDIF

      CALL OUTINT(LABEL,ENERGY,EUNIT,NNRG,NFIELD,NSTATE,NQN,X(ISJSTT),
     1            X(IOUT),IECONV,URED,ITYPE,IPHSUM,ISST,MINJT,MAXJT,
     2            ISIGU,IPARTU,ISAVEU,IPROGM,MXSIG,ISIGPR,JSTEP,IRSTRT,
     3            ILDSVU,LCURXS,LACCXS,NSIG,ICHAN,IFCONV,IBOUND,IPRINT)
C
C  STORAGE CAPACITY HAS ALREADY BEEN CHECKED (IN OUTINT) FOR THESE
C  ARRAYS
      NSTOR=NSIG*NSIG
      IDEG=IOUT+NSTOR    ! SIGDEG
      IACC=IOUT+2*NSTOR  ! SIGACC
      IC1=IXNEXT
      NUSED=0
      CALL CHKSTR(NUSED)
C
cINOLLS include 'molscat/num-xsec.f'
C
C  PROCESS RESTART REQUEST ...
      MXP=0
      IF (IRSTRT.GT.0 .OR. IRSTRT.EQ.-1) THEN
        IF (.NOT.LACCXS) THEN
          WRITE(6,*) ' RESTART OPTION ONLY USEFUL IF CROSS SECTIONS'//
     1               ' ARE BEING ACCUMULATED'
          STOP
        ENDIF

        CALL RESTRT(IRSTRT,ISAVEU,JTOTL,JSTEP,MXPAR,IBFIX,IBHI,
     1              LABEL,ITYPE,NSTATE,NQN,URED,IPROGM,X(ISJSTT),NNRG,
     2              ENERGY,X(IOUT),X(IACC),X(IDEG),ISST,
     3              IECONV,MINJT,MAXJT,ISIGU,IPARTU,OTOL,DTOL,
     4              X(IC1),X(IC1),MRSTRT,IERST,IFST,MXP,IPRINT,
     5              LCURXS,LACCXS,ICHAN,NSIG,NFIELD,IBOUND,RUNIT,CINT,
     6              AWVMAX)
      ENDIF
      IF (IPRINT.GE.1) WRITE(6,1060)
C
      EFIRST=ENERGY(1)*CINT
      EMX=-1D30
      DO INRG=1,NNRG
        EMX=MAX(EMX,ENERGY(INRG))
      ENDDO
      EMX=EMX*CINT

      NJLQN(9)=NQN-1
C
C  EINT AND JSINDX ARE NOT DEFINED YET BUT ARE NOT NEEDED IN THIS CALL
      IF (NCONST.EQ.0 .AND. NDGVL.EQ.0)
     1  CALL THRESH(X(1),N,CINT,ITYPE,MONQN,NQN,NJLQN(ITYP),EREF,X(1),0)
C  EREF IS IN UNITS OF CM^-1
      IF (IPRINT.GE.1) CALL EREFIN(MONQN,NQN,NJLQN(ITYP),EUNAME,EREF,
     1                             EUNIT)

C  SET UP LOGICALS CONTROLLING PRINTING
C
      PBLKHD=IPRINT.GE.2 .OR.
     1     (IPRINT.GE.1 .AND. NLPRBR.EQ.0 .AND.
     2      (NCONV.GT.0 .OR. LSPEC .OR.
     3                            (LSCAN .AND. NFIELD*NNRG.GT.1)))

      PEFVHD=IPRINT.GE.4 .AND. LENEFV.GT.0

      CALL GCLOCK(TITIME)
      TTIME=TITIME-TFIRST
      IF (IPRINT.GE.1) WRITE(6,1900) TTIME,NUSED
 1900 FORMAT(/'  INITIALIZATION DONE.  TIME WAS',F7.2,' CPU SECS.',I10,
     1       ' WORDS OF STORAGE USED.')

C
C **************  LOOP OVER JTOT VALUES BEGINS HERE.  ******************
C
      IF (IPRINT.GE.1) WRITE(6,FMT=F710) TRIM(LABEL)

      DO 100 JTOT=JTOTL,JTOTU,JSTEP
        THETA=THETLW+THETST*DBLE(JTOT)
C
C ***************  LOOP OVER SYMMETRY BLOCKS BEGINS HERE  **************
C
        DO 200 IB=IBMIN,IBMAX

C  WRITE HEADER FOR CURRENT BLOCK IF IPRINT>=2
          IF (PBLKHD) WRITE(6,2100) JTOT,IB
 2100     FORMAT(/2X,29('*'),'  ANGULAR MOMENTUM JTOT  =',I4,'  ',
     1           ' AND SYMMETRY BLOCK  = ',I4,2X,28('*'))

          PHI=PHILW+PHIST*DBLE(IB-1)
C
          IF (IRSTRT.GE.2 .AND. JTOT.EQ.JTOTL .AND. IB.LT.MRSTRT) THEN
            WRITE(6,2200) IB,IRSTRT
 2200       FORMAT('  *** SKIPPING SYMMETRY BLOCK NO =',I3,
     1             '  DUE TO IRSTRT =',I3)
            GOTO 200
          ENDIF
C
C
C  CHOOSE BASIS FUNCTIONS
C
          CALL BASE(JTOT,X(ISJSTT),N,X,X,CINT,
     1              X,X,X,X,MXLAM,NPOTL,
     2              X(ILAM),X,WGHT,IEXCH,THETA,PHI,IB,.TRUE.,
     3              EFIRST,NSTATE,IPRINT,IBOUND,X(ISJSTT),X)
C
C  MOLD IS A REMNANT OF THE PREVIOUS SYMMETRY BLOCK PROCESSING.
C  MXP IS USED IN CONVERGENCE CHECKING, MOLD IS PASSED TO PRBR
C
          MOLD=-IB
          IF (IB.EQ.MXPAR .AND. N.LE.0) MOLD=0
          MXP=MAX(MXP,ABS(MOLD))
          IF (IB.EQ.MXPAR) MOLD=0
C
C  N IS THE NUMBER OF BASIS FUNCTIONS
C  SKIP THIS JTOT,IB IF NO CHANNELS
C
          IF (N.GT.0) THEN

            NSQ = N*N
C
C  ALLOCATE STORAGE FOR COUPLED EQUATION SOLVER.
C
C  ALLOCATE STORAGE COMMON TO ALL SCATTERING. . .
C  NOTE THAT INTEGER ARRAYS OF LENGTH N ARE NOT REDUCED BY NIPR
C  IC1 IS IXNEXT AFTER ALLOCATIONS OF BASIN, POTENL, OUTINT ...
            ISNEVR=IC1           ! LNEVER
            ISJIND=ISNEVR+NLEVEL ! JSINDX
            IF (NLEVEL.EQ.0) ISJIND=ISNEVR+NSTATE
            ISINLV=ISJIND+N      ! INDLEV
            ISSR=ISINLV+N        ! SREAL
            ISSI=ISSR+NSQ        ! SIMAG
            ISK=ISSI+NSQ         ! K-MATRIX
            ISVL=ISK+NSQ         ! VL
            NV=N*(N+1)/2
            IF (IVLU.EQ.0) NV=NV*NVLBLK
            ISIV=ISVL+NV         ! IV
            ISEINT=ISIV          ! EINT
            IF (IVLFL.GT.0) ISEINT=ISIV+(NV+NIPR-1)/NIPR
            ISCENT=ISEINT+N      ! CENT
            ISWVEC=ISCENT+N      ! WVEC
            ISL=ISWVEC+N         ! L
            ISNB=ISL+N           ! NBASIS
            ISP=ISNB+N           ! P
            IPDIM=MXLAM+NCONST+NRSQ !NPOTL
            IXNEXT=ISP+IPDIM
            IF (NUMDER) IXNEXT=IXNEXT+2*IPDIM
            ISDGVL=IXNEXT        ! DGVL
            IF (NCONST.EQ.0) IXNEXT=IXNEXT+N*NDGVL
C
C  SET UP SOME STORAGE POINTERS FOR LATER USE IN CONVRG
C
            IF (NCONV.GT.0) THEN
              ISSRO=IXNEXT    ! SROLD
              ISSIO=ISSRO+NSQ ! SIOLD
              IXNEXT=ISSIO+NSQ
            ENDIF
            IC2=IXNEXT
            CALL CHKSTR(NUSED)
C  IXNEXT/IC2 REFLECT STORAGE ALWAYS NEEDED FOR THIS JTOT,SYMMETRY BLOCK.
C
C  SET UP BASIS FUNCTIONS IN ALLOCATED STORAGE
C
            CALL BASE(JTOT,X(ISJSTT),N,X(ISJIND),X(ISL),CINT,
     1                X(ISEINT),X(ISCENT),X(ISVL),X(ISIV),MXLAM,NPOTL,
     2                X(ILAM),X(ISWVEC),WGHT,IEXCH,THETA,PHI,IB,.FALSE.,
     3                EFIRST,NSTATE,IPRINT,IBOUND,X(ISJSTT),X(ISDGVL))
          ENDIF
C
C ******************  LOOP OVER EXTERNAL FIELDS BEGINS HERE  *************
C
          OLDFAC=0.D0
          IFXE=0
          DO 300 JFIELD=1,NFIELD
            IF (LSPEC .OR. LCHAR) THEN
              IF (JFIELD.EQ.1) THEN
                FLDNOW=FLDMIN
              ELSEIF (JFIELD.EQ.2) THEN
                FLDNOW=FLDMAX
              ELSE
                FLDNOW=FLDNEW
              ENDIF
            ENDIF

C  SET ALL THE EXTERNAL VARIABLES, USING FLDNOW FOR THE (SINGLE) VARYING
C  QUANTITY IF SEARCH OR CHARACTERISATION OF RESONANCE BEING PERFORMED
            CALL SETEFV(FIELD,FLDNOW)
            IF (PEFVHD) THEN
              IF (IPRINT.GE.6) THEN
                WRITE(6,'(/2X,59("--"))')
              ENDIF
              CALL MSGEFV(JFIELD,NFIELD)
            ENDIF

            IF (IRSTRT.GE.3 .AND. JTOT.EQ.JTOTL .AND.
     1          IB.EQ.MRSTRT .AND. JFIELD.LT.IFST) THEN
              WRITE(6,2300) JFIELD,IRSTRT
 2300         FORMAT('  *** SKIPPING EFV SET NO =',I3,
     1             '  DUE TO IRSTRT =',I3)
              GOTO 300
            ENDIF

            IF (N.GT.0) THEN
C
C  FOR CASES WHERE THE HAMILTONIAN IS DIAGONAL AT INFINITY, BUT THE INTERACTION
C  ENERGY IS DEPENDENT ON EFVS, CHEINT WILL SHIFT THE VALUES IN EINT
C
              IF (NCONST.EQ.0 .AND. NDGVL.GT.0)
     1          CALL CHEINT(X(ISEINT),X(ISDGVL),N,OLDFAC,CINT)
C
C  FOR CASES WHERE THE HAMILTONIAN CONTAINS OFF-DIAGONAL TERMS
C  AT INFINITY, YTRANS PROVIDES A CONVENIENT WAY TO GET EINT
C
C  NOTE THAT THIS CALL TO YTRANS ALSO POPULATES WVEC AND CALCULATES NOPEN
C
              CALL YTRANS(X(ISSR),X(ISK),X(ISEINT),X(ISWVEC),
     1                    X(ISJIND),X(ISL),N,X(ISP),X(ISVL),X(ISIV),
     2                    MXLAM,NPOTL,ERED,RMLMDA,DEGTOL,NOPEN,
     3                    IBOUND,X(ISCENT),IPRINT,.FALSE.)
              IXNEXT=IC2
C
              CALL CHNSRT(X(ISNB),X(ISEINT),N)
C
C  FIND EREF IF ENERGIES ARE TO BE TREATED AS KINETIC
C
              IIREF=IREF
              IF (IREF.NE.0 .OR. MONQN(1).NE.-99999) THEN
                CALL THRESH(X(ISEINT),N,CINT,ITYPE,MONQN,NQN,
     1                      NJLQN(ITYP),EREF,X(ISJIND),IPRINT)
C               CALL LOCHAN(X(ISEINT),X(ISL),N,CINT,EREF,JREF,IPRINT)
              ENDIF
C
C  FOR OFF-DIAGONAL MONOMER HAMILTONIANS, ADD NEW THRESHOLDS TO ELEVEL
C  ARRAY AND INDEX CHANNELS TO ELEVEL FOR ACCUMULATING CROSS SECTIONS
C
              IF (LCURXS) THEN
                CALL GETLEV(N,X(ISEINT),X(ISINLV),X(ISL),CINT,
     1                      EREF,ENERGY,NNRG,DEGTOL,MXSIG,IPRINT,
     2                      X(ISNEVR),IBOUND,EUNIT,EUNAME)
              ELSEIF (IPRINT.GE.6) THEN
                CALL THRLST(N,X(ISEINT),X(ISCENT),CINT,X(ISL),
     2                      IBOUND,EUNIT,EUNAME)
              ENDIF

C
C  CHECK THAT RMAX IS BEYOND CENTRIFUGAL BARRIER
              CALL FINDRX(ENERGY,X(ISEINT),X(ISCENT),NPR,N,CINT,
     1                    RMAX,RMXINT,EREF,IRXSET,IPRINT)
C
            ENDIF
C
C ******************  LOOP OVER ENERGIES BEGINS HERE  ******************
C
            NELOOP=(NNRG+NNRGPG-1)/NNRGPG
            INRGHI=0
            ICODE=0
            ALDONE=.TRUE.
            DO 400 IEL=1,NELOOP
              INRGLO=INRGHI+1
              INRGHI=MIN(INRGHI+NNRGPG,NNRG)
C
C  SEE WHETHER THIS BLOCK OF ENERGIES CAN BE SKIPPED
C
              LCALC=.FALSE.
              DO INRG=INRGLO,INRGHI
                IFXE=IFXE+1
                IF (IECONV(IFXE).LT.0 .AND. IECONV(IFXE).GT.-2*MXP) THEN
                  SFX=ORDNL(INRG)
                  WRITE(6,2400) JTOT,INRG,SFX
 2400             FORMAT(/'  * * * WARNING.  JTOT =',2I5,'-',A2,
     1                   ' ENERGY PREVIOUSLY FAILED TO CONVERGE.')
                  LCALC=.TRUE.
                ELSEIF (IECONV(IFXE).EQ.0) THEN
                  LCALC=.TRUE.
                ELSEIF (IECONV(IFXE).GT.0) THEN
                  IF (JTOTU.LT.99999 .OR. IECONV(IFXE).LT.NCAC*MXP)
     1              LCALC=.TRUE.
                ENDIF
              ENDDO
C
              IF (.NOT.LCALC) GOTO 400
C  RESET IFXE
              IFXE=IFXE-INRGHI+INRGLO-1
              ALDONE=.FALSE.
              DO 500 INRG=INRGLO,INRGHI

                IFXE=IFXE+1
                IF (IRSTRT.EQ.3 .AND. JTOT.EQ.JTOTL .AND.
     1              IB.EQ.MRSTRT .AND. JFIELD.EQ.IFST .AND.
     2              INRG.LT.IERST) THEN
                  WRITE(6,2500) INRG,IRSTRT
 2500             FORMAT('  *** SKIPPING ENERGY NO =',I3,
     1                   '  DUE TO IRSTRT =',I3)
                  GOTO 500
                ENDIF
C
C  ADDRESS OF CURRENT SET OF ACCUMULATED CROSS SECTIONS:
                ICXS=IOUT+((JFIELD-1)*NNRG+(INRG+1))*NSTOR

                IF (N.LE.0) THEN
                  IF (LACCXS) CALL OUTSIG(ISIGU,IB,MXPAR,INRG,
     1                                    ENERGY(INRG),MINJT(IFXE),
     2                                    MAXJT(IFXE),X(ICXS),IPRINT)
                  GOTO 500
                ENDIF
C
C  IF THIS IS A PRESSURE BROADENING CALC AND THIS S MATRIX
C  WILL NOT BE USED, SKIP IT
C
                IF (NLPRBR.GT.0 .AND. IFEGEN.GE.2) THEN
                  CALL PRBCNT(INRG,X(ISJIND),N,IUSE)
                  IF (IUSE.EQ.0) THEN
                    LWARN=.TRUE.
                    IF (IPRINT.GE.4)
     1                WRITE(6,2510) JTOT,IB,INRG,ENERGY(INRG)
 2510               FORMAT(/'  ****** S MATRIX FOR JTOT =',I5,
     1                     '   SYMMETRY BLOCK =',I4,3X,'ENERGY(',I4,
     2                     ') =',F18.9/9X,'WILL NOT BE USED IN ',
     3                     'PRESSURE BROADENING CALCULATION: SKIPPING')
                    IF (IECONV(IFXE).GE.0) IECONV(IFXE)=IECONV(IFXE)+1
                    IF (LACCXS) CALL OUTSIG(ISIGU,IB,MXPAR,INRG,
     1                                      ENERGY(INRG),MINJT(IFXE),
     2                                      MAXJT(IFXE),X(ICXS),IPRINT)
                    GOTO 500
                  ENDIF
                ENDIF
C
C  ADD EREF IF ENERGIES ARE TO BE TREATED AS KINETIC
C
                ETOT=ENERGY(INRG)+EREF
                ERED=ETOT*CINT
                IF (IPRINT.GE.4)
     1            CALL EREFMS(EREF,EUNIT,EUNAME,MONQN,NQN)
C
                IF (ICODE.EQ.0) THEN
                  EFIRST=ERED
                  ICODE=1
                ENDIF
                ESHIFT=ERED-EFIRST
                IWRITE=(ISCRU.GT.0 .AND. ICODE.EQ.1)
                IREAD=(ISCRU.GT.0 .AND. ICODE.EQ.2)
C
C  ICODE CONTROLS WHETHER POTENTIAL INFORMATION IS READ FROM CHANNEL
C  ICODE=1 CALCULATES INFORMATION AND STORES IT
C  ICODE=2 (SET AFTER 1ST ENERGY) READS STORED INFORMATION
C
C
C  FOR SURFACE SCATTERING AT SUBSEQUENT ENERGY,
C  GET CORRESPONDING THETA FOR PRINTING
C
                IF (ITYPE.EQ.8 .AND. INRG.NE.1) THEN
                  SINTH=SIN(THETA*PI/180.D0)
                  SINTH=SINTH**2*ENERGY(1)/ETOT
                  IF (SINTH.GT.1.D0) GOTO 500
                  THETJ=ASIN(SQRT(SINTH))*180.D0/PI
                  IF (IPRINT.GE.2) WRITE(6,2530) INRG,ETOT,THETJ
 2530             FORMAT(/'  NOTE: K VECTORS PARALLEL TO SURFACE WERE ',
     1                   'CALCULATED FOR ENERGY(1)'/
     2                   '  SUBSEQUENT ENERGY(',I4,') =',F10.4,
     3                   ' CORRESPONDS TO THETA =',F10.4,' DEGREES')
                ENDIF
C
C  TEMPORARY STORAGE FOR HEADER, FINDRM
C
                IT1=IXNEXT  ! DIAG
                IT2=IT1+N   ! DIAG2
                IT3=IT2+N   ! XK
                IT4=IT3+N   ! PHASE
                IXNEXT=IT4+N
                CALL CHKSTR(NUSED)
C
                CALL HEADER(X(ISSI),X(ISK),N,NSQ,X(ISP),X(ISVL),X(ISIV),
     1                      X(ISEINT),X(ISCENT),X(IT1),MXLAM,NPOTL,
     2                      ICODE,ISAV,ERED,EFIRST,RMLMDA,IPRINT)
C
                EREDMX=ERED
                IF (ITYPE.NE.8 .AND. ISCRU.NE.0) EREDMX=EMX+EREF*CINT
                IF (ICODE.EQ.1 .AND. IRMSET.GT.0) THEN
C  FOR IRMSET > 0 OPTION, CHOOSE APPROPRIATE RMIN
                  RMNINT=RMIN
                  JPRINT=IPRINT
                  IF (ISCRU.NE.0 .AND. INRG.NE.1) JPRINT=0
                  CALL FINDRM(X(ISSI),N,RMNINT,RTURN,X(ISP),X(ISVL),
     1                        X(ISIV),EREDMX,X(ISEINT),X(ISCENT),RMLMDA,
     2                        X(IT1),X(IT2),X(IT3),X(IT4),MXLAM,NPOTL,
     3                        IRMSET,ITYPE,JPRINT)
C
                ELSEIF (ICODE.EQ.1) THEN
                  RMNINT=RMIN
                  RTURN=RMIN
                ENDIF
                IF (NSEG.EQ.2 .AND. RVFAC.GT.0.D0) THEN
                  RMID=RTURN*RVFAC
                  IF (IPRINT.GE.9) WRITE(6,2540) RMID,RVFAC
                ENDIF
 2540           FORMAT(/'  RMID =',F9.4,' OBTAINED FROM RVFAC =',F6.3)

                IF (RMNINT.GT.RMXINT) THEN
                  IF (IPRINT.GE.4) WRITE(6,2550) JTOT,IB,INRG
 2550             FORMAT(2X,'SKIPPING JTOT =',I5,', SYMMETRY BLOCK =',
     1                   I3,', ENERGY(',I3,') BECAUSE RMIN > RMAX')
                  IECONV(IFXE)=IECONV(IFXE)+1
                  IF (LACCXS) CALL OUTSIG(ISIGU,IB,MXPAR,INRG,
     1                                    ENERGY(INRG),MINJT(IFXE),
     2                                    MAXJT(IFXE),X(ICXS),IPRINT)
                  GOTO 500
                ENDIF

C
C  RESET IXNEXT TO RECOVER TEMPORARY STORAGE FROM HEADER AND FINDRM
C
                IXNEXT=IT1
C
C  NEW CAPABILITY ADDED 28 SEPT 2012 G. MCBANE.
C  IF ILDSVU>0, WRITE LOG-DERIVATIVE MATRIX OUT TO A FILE.

C  WE WRITE THE PROPAGATION HEADER HERE BECAUSE DEEPER THAN THIS THE
C  CODE DOES NOT KNOW ABOUT JTOT.  GLOBAL HEADER AND GLOBAL VECTORS
C  WERE WRITTEN BY OUTINT.  PROPAGATION VECTORS AND MAIN
C  LOG-DERIVATIVE DATA WILL BE WRITTEN BY PROPAGATOR OR ITS
C  CONTROLLER.  SEE LDRDWT.F FOR DESCRIPTION OF FORMAT AND READ/WRITE
C  ROUTINES.  SECOND ARGUMENT .TRUE. MEANS "WRITE".
C  ERED AND RMLMDA ADDED 7 JAN 2013 FOR USE WITH MQDT CODE.
C  ILDSVU FILES WRITTEN BEFORE THIS DATE WILL NOT CONTAIN THOSE
C  VALUES; LDRDWT.F HAS ALTERNATIVE LINES (COMMENTED OUT) THAT CAN
C  BE REINSTATED IF NECESSARY TO READ OLD FILES.

                IF (ILDSVU.GT.0) THEN
                  IDUM = LDRWPH(ILDSVU, .TRUE., JTOT, INRG,ENERGY(INRG),
     1                           IEXCH, WT, IB, N, ERED, RMLMDA)
                ENDIF

C
C  SOLVE COUPLED EQUATIONS.
C  PROPAGATORS ARE CALLED FROM SUBROUTINE SCCTRL

                IF (WAVE) THEN
                  CALL WVINFO(JTOT,IB,ICHAN,N,NQN,NSTATE,X(ISJSTT),
     1                        X(ISJIND),X(ISL),ETOT,EREF,EUNIT,EUNAME)
                ENDIF

C  CALCULATE K USING THE HIGHEST ENERGY (ISCRU/=0) OR THE CURRENT ENERGY
                IF (ICODE.EQ.1 .OR. ISCRU.EQ.0) THEN
                  CAYS=CALCK(EPS*CINT,EREDMX,X(ISEINT),N)
                  CAYL=CALCK(EPL*CINT,EREDMX,X(ISEINT),N)
                ENDIF

                CALL SCCTRL(N,MXLAM,NPOTL,
     1                      X(ISJIND),X(ISSR),X(ISSI),X(ISK),X(ISVL),
     2                      X(ISIV),X(ISEINT),X(ISCENT),X(ISWVEC),
     3                      X(ISL),X(ISNB),X(ISP),ERED,RMLMDA,DEGTOL,
     4                      DRMAX,NSTAB,NOPEN,IPRINT,IBOUND,ICHAN,
     5                      WAVE,ILDSVU)
C
                CALL GCLOCK(TJTIME)
                TTIME=(TJTIME-TITIME)
                TITIME=TJTIME
C
                IF (NOPEN.GT.0) THEN
C  RESET ICODE TO ALLOW "SUBSEQUENT ENERGY" CALCULATIONS
                  ICODE=2
                ELSE
                  IF (IPRINT.GE.2) THEN
                    IF (IRMSET.EQ.0 .OR. IPRINT.EQ.2)
     1                WRITE(6,2560) INRG,ENERGY(INRG)
                    IF (PTIME) WRITE(6,2570) TTIME
                  ENDIF
 2560             FORMAT(/'  ****** NO OPEN CHANNELS FOR CURRENT ',
     1                   'BLOCK AT ENERGY(',I4,') =',1PG19.11)
 2570             FORMAT(2X,'STEP TIME =',0PF6.2,' SECS')
                  IF (IECONV(IFXE).GE.0) IECONV(IFXE)=IECONV(IFXE)+1
                  GOTO 500
                ENDIF
C
C  FORCE IRSTRT=0  SO THAT ISAVEU WILL BE UPDATED.
                IRSTRX=0

C  TESTING CONVERGENCE OF S-MATRIX ELEMENTS
                IF (NCONV.GT.0) THEN
                  CALL CONVRG(INRG,X(ISSR),X(ISSI),X(ISSRO),
     1                        X(ISSIO),ICON,DRCON,ICONVU,
     2                        NOPEN*NOPEN,IPRINT)
                ENDIF
C
                IT1=IXNEXT             ! TEMP1/INDUSE
                IT2=IXNEXT+MAX(N,NSIG) ! INDACC
                IXNEXT=IT2+MAX(N,NSIG)
                CALL CHKSTR(NUSED)
                CALL OUTPUT(JTOT,X(ISNB),X(ISJIND),X(ISL),X(ISINLV),
     1                      X(ISWVEC),X(ISSR),X(ISSI),X(ISK),RUNIT,
     2                      SCLEN,NOPEN,IB,IBMAX,WGHT,IEXCH,
     3                      INRG,TTIME,ENERGY(INRG),EREF,X(IOUT),
     4                      X(ICXS),X(IDEG),X(ISJSTT),ISST,IECONV(IFXE),
     5                      MINJT(IFXE),MAXJT(IFXE),NSTATE,
     6                      NQN,OTOL,DTOL,IPHSUM,ISIGU,IPARTU,ISAVEU,
     7                      ISIGPR,IRSTRX,ICHAN,X(IT1),X(ISCENT),
     8                      X(ISEINT),IBOUND,X(IT1),X(IT2),
     9                      X(ISNEVR),CINT,JFIELD,IPRINT,.FALSE.,PTIME,
     A                      AWVMAX)
C  LINE UNDER RUNNING TOTAL FROM OUTPUT IF NOT LAST ONE OF BLOCK
                IF (ISIGPR.GT.0 .AND. IPRINT.GE.3 .AND. NCONV.GT.0 .AND.
     1              .NOT.(INRG.EQ.NNRG .AND. JFIELD.EQ.NFIELD))
     2            WRITE(6,"(/2X,59('- '))")
                IXNEXT=IT1
C
C  IF LSPEC=TRUE, ATTEMPT TO FIND WHERE SCATTERING LENGTH HAS SPECIFIED VALUE
C  IF LCHAR=TRUE, ATTEMPT TO CHARACTERISE POLE
C
                IF (ICHAN.GT.NOPEN) THEN
                  WRITE(6,2600) ICHAN,NOPEN
 2600             FORMAT(/'  *** WARNING ICHAN = ',I3,' IS GREATER'
     1                    ' THAN NOPEN = ',I3,' SO STOPPING.')
                  STOP
                ENDIF
                SCLNOW=DBLE(SCLEN)
                SLIMAG=IMAG(SCLEN)
                IF (LSPEC) THEN
C
C  CONVERGE ON POINT WHERE SCATTERING LENGTH IS AZERO
C
                  SCLNOW=SCLNOW-AZERO
                  IF (JFIELD.EQ.2) THEN
                    IF (SCLNOW*SCLLST.GT.0.D0) THEN
                      WRITE(6,2610) FLDMIN,FLDMAX,SCLNOW
 2610                 FORMAT(/'  A - AZERO HAS SAME SIGN AT FLDMIN =',
     1                       F12.8,' AND FLDMAX =',F12.8,/,
     2                       '  VALUE OF A - AZERO AT FLDMAX IS',G12.4,
     3                       '. ABANDON CONVERGENCE ATTEMPT.')
                      GOTO 290
                    ENDIF
                  ENDIF
                  IF (JFIELD.GE.2) THEN
                    IF (JFIELD.EQ.2) THEN
                      XA=FLDLST
                      FA=SCLLST
                      XB=FLDNOW
                      FB=SCLNOW
                      FC=FA
                    ELSEIF (JFIELD.GT.2) THEN
C
C  SET UP FOR NEXT CYCLE OF BRENT ALGORITHM
C  (CONTRAPOINT (XA,FA) AND CURRENT ITERATE (XB,FB) MUST BRACKET THE ROOT)
                      IF (FA*SCLNOW.LT.0.D0) THEN
                        XB=FLDNOW
                        FB=SCLNOW
                      ELSE
                        XA=FLDNOW
                        FA=SCLNOW
                      ENDIF
                    ENDIF
                    FLDNEW=BRENT(XA,XB,XC,FA,FB,FC,JFIELD.GE.2,DTOL,
     1                           CONVGE,METHOD)
                    DFSTEP=FLDNEW-FLDNOW
                    IF (.NOT.CONVGE) THEN
                      IF (IPRINT.GE.4)
     1                  WRITE(6,2620) METHOD,SCLNOW,TRIM(SVNAME),FLDNEW,
     2                                TRIM(SVUNIT),DFSTEP
 2620                 FORMAT(/'  ',A,' STEP FROM A - AZERO=',G12.4,
     1                       ' GIVES ',1X,A,' =',F13.8,1X,A,
     2                       ' WITH STEP SIZE',G12.4)
                    ELSE
                      IF (IPRINT.GE.1)
     1                  WRITE(6,2630) TRIM(SVNAME),FLDNEW,
     2                                TRIM(SVUNIT),DFSTEP
 2630                 FORMAT('  CONVERGED ON A = AZERO AT ',A,' = ',
     1                       F18.13,1X,A,' WITH LAST STEP =',G12.4)
                      GOTO 290
                    ENDIF
                  ENDIF
C
                  FLDLST=FLDNOW
                  SCLLST=SCLNOW
                ELSEIF (LCHAR) THEN
C
C  MAY 2012: CONVERGE ON POSITION OF POLE: ALGORITHM MODIFIED
C  MAY NEED WARNINGS AND/OR LO/HI LOGIC IF STEPS ARE OUT OF RANGE
C
C  MAY 2017: POLE CONVERGENCE REPLACED WITH RESONANCE CHARACTERISATION
C            ALGORITHM AND MOVED OUT TO LOCPOL ROUTINE
C
                  CALL LOCPOL(JFIELD,FLDNOW,SCLNOW,SLIMAG,FLDNEW,DTOL,
     &                        TOLMIN,TOLMAX,IFCONV-1,IPRINT,LCONT)
                  IF (.NOT.LCONT) GOTO 290
                ENDIF
C
C  FOR LOW-ENERGY SCATTERING AT MORE THAN ONE ENERGY,
C  CALCULATE EFFECTIVE RANGE. THIS MAY NOT WORK IF IREF=0
C  AND THE LOWEST THRESHOLD ENERGY IS NON-ZERO
C  BUT THAT IS RARE AND HARD TO DETECT HERE
C
C  LOW-ENERGY CRITERION USED HERE SHOULD CORRESPOND TO CRITERION
C  USED IN OUTPUT TO DECIDE WHETHER TO CALCULATE SCATTERING LENGTH
C
                IF (INRG.EQ.1) THEN
                  XK2REF=CINT*ENERGY(INRG)
                  SCLREF=DBLE(SCLEN)
                ELSE
                  XK2NOW=CINT*ENERGY(INRG)
                  SCLNOW=DBLE(SCLEN)
                  IF (IPRINT.GE.1  .AND. XK2NOW.LT.AWVMAX**2 .AND.
     1                                   XK2REF.LT.AWVMAX**2) THEN
                    RNGEFF=2.D0*(1.D0/SCLREF-1.D0/SCLNOW)/
     1                     (XK2NOW-XK2REF)
                    SCLZER=1.D0/SCLREF+0.5D0*XK2REF*RNGEFF
                    IF (LENEFV.GT.0) THEN
                      WRITE(6,2700) JFIELD,ICHAN
                    ELSE
                      WRITE(6,2701) ICHAN
                    ENDIF
                    WRITE(6,2710) '1/A',INRG,RNGEFF,TRIM(RUNAME),
     1                            '1/A',SCLZER,TRIM(RUNAME)//'^-1'
                    RNGEFF=2.D0*(SCLNOW-SCLREF)/(XK2NOW-XK2REF)
                    SCLZER=SCLREF-0.5D0*XK2REF*RNGEFF
                    RNGEFF=RNGEFF/SCLZER**2
                    WRITE(6,2710) ' A ',INRG,RNGEFF,TRIM(RUNAME),
     1                            '  A',SCLZER,TRIM(RUNAME)
 2700               FORMAT(/'  EFFECTIVE RANGE AT EFV SET ',I3,
     1                      ' FOR CHANNEL',I4,':')
 2701               FORMAT(/'  EFFECTIVE RANGE  FOR CHANNEL',I4,':')
 2710               FORMAT('  FROM EXPANSION OF ',A3,
     2                     ' AT ENERGIES 1 AND',I4,' IS',G13.5,1X,A,
     3                     ' WITH ',A3,'(K=0) =',G19.10,1X,A)
                    IF (INRG.NE.NNRG) WRITE(6,2801)
                  ENDIF
                ENDIF
C
                IF (IECONV(IFXE).GE.0 .AND. NLPRBR.GT.0) THEN
C
C  TEMPORARY STORAGE FOR PRBR -- THESE ARE INTEGERS, COULD USE NIPR
                  IT1=IXNEXT  ! IC
                  IT2=IT1+N   ! IL
                  IT3=IT2+N   ! IC1
                  IT4=IT3+N   ! IL1
                  IXNEXT=IT4+N
                  CALL CHKSTR(NUSED)
                  CALL PRBR(JTOT,MOLD,NOPEN,INRG,RUNIT,
     1                      X(ISNB),X(ISJIND),X(ISL),X(ISWVEC),
     2                      X(ISSR),X(ISSI),X(IT1),X(IT2),X(IT3),X(IT4),
     3                      X(ISJSTT),MXPAR,WGHT,IPRINT,ILSU)
C  RECOVER TEMPORARY STORAGE ...
                  IXNEXT=IT1
                ENDIF

                IF (IPRINT.GE.4 .AND. INRG.NE.NNRG .AND. ISRCH.EQ.0)
     1            WRITE(6,2801)
C
  500         CONTINUE
C
C ***************  END OF LOOP OVER ENERGIES IN GROUP  *****************
C
C  RESONANCE SEARCH OPTION - GENERATE NEXT 5 ENERGIES
C
              IF (ISRCH.NE.0) THEN
                CALL NEXTE(ENERGY(INRGLO),EPSM,ENEW,DNRG,EUNIT,EUNAME,
     1                     IPHSUM,IPRINT)
 2801           FORMAT(/'  ',59('- '))
                IF (INRGHI.NE.NNRG) THEN
                  IF (IPRINT.GE.1) WRITE(6,2801)
C  PROTECT AGAINST NEGATIVE ENERGIES UNLESS IREF IS IN USE
                  IF (ENEW.LE.0.D0 .AND. IIREF.EQ.0) GOTO 9000
                  INRGST=INRGHI+1
                  INRGND=MIN(INRGHI+NNRGPG,NNRG)
                  NGROUP=INRGND-INRGST+1
                  IF (IPRINT.GE.1)
     1              WRITE(6,1240) NGROUP,PLUR(MIN(NGROUP,2))
                  DO JNRG=INRGST,INRGND
                    ENERGY(JNRG)=ENEW+(JNRG-INRGST)*DNRG
                    IF (IPRINT.GE.1) THEN
                      IF (EUNIT.NE.1.D0) THEN
                        WRITE(6,1250) JNRG,ENERGY(JNRG),
     1                                ENERGY(JNRG)/EUNIT,EUNAME
                      ELSE
                        WRITE(6,1250) JNRG,ENERGY(JNRG)
                      ENDIF
                    ENDIF
                  ENDDO
                ENDIF
              ENDIF
C
  400       CONTINUE
C
C ********************  END OF LOOP OVER ENERGY GROUPS  ****************
C
  300     CONTINUE
C
C ********************  END OF LOOP OVER EXTERNAL FIELDS  **************
C
          IF (IPRINT.GE.1) THEN
            IF (LSPEC) WRITE(6,3100) NFIELD
 3100       FORMAT(/,'  CONVERGENCE ON VALUE NOT ACHIEVED IN',I4,
     1             ' STEPS')
            IF (LCHAR) WRITE(6,3110) NFIELD
 3110       FORMAT(/,'  RESONANCE CHARACTERISATION NOT ACHIEVED IN',I4,
     1             ' STEPS')
          ENDIF
C
  290     CALL RSTEFV(FIXFLD)
          IF (ALDONE) THEN
            IF (IPRINT.GE.1) WRITE(6,3120) DTOL,OTOL,NCAC
 3120       FORMAT(///'  CALCULATION TERMINATED BY CONVERGENCE OF ',
     1             'TOTAL CROSS SECTIONS.'//'  DIAGONAL AND OFF-',
     2             'DIAGONAL TOLERANCES WERE ',2F9.5,'   NCAC =',I3)
            GOTO 9000
          ENDIF
C
C  RESTORE ERED TO FIRST ENERGY VALUE.
          ERED = EFIRST
  200   CONTINUE
C
C ******************  END OF LOOP OVER SYMMETRY BLOCKS  ****************
C
        IF (NLPRBR.GT.0) CALL PRBOUT(JSTEP,JTOT,IPRINT)
  100 CONTINUE
C
C ********************  END OF LOOP OVER JTOT VALUES  ******************
C
C  END OF RUN BOOKKEEPING
C
C  CALL TO OUTPCH ONLY IF NOT SEARCHING AND NOT TESTING CONVERGENCE
 9000 IF (.NOT.LSPEC .AND. .NOT.LCHAR .AND. NCONV.EQ.0)
     1  CALL OUTPCH(X(IACC),ENERGY,NNRG,FIELD,NFIELD,MINJT,MAXJT,
     2              ISIGPR,LABEL,F710,EUNAME,ISIGU,LWARN,EREF,X(ISINLV),
     3              X(ISNEVR),IPRINT)
      IF (NLPRBR.GT.0 .AND. IPRINT.GE.1) WRITE(6,FMT=F710) TRIM(LABEL)
      IF (NLPRBR.GT.0) CALL PRBOUT(JSTEP,-99999,IPRINT)
      IF (NLPRBR.GT.0) CALL DACLOS
      CALL GCLOCK(TLAST)
      TOTIME=TLAST-TFIRST
C  MAKE SURE WE HAVE NUSED FOR IPHSUM BY CALLING CHKSTR
      CALL CHKSTR(NUSED)
      IF (IPHSUM.GT.0) WRITE(IPHSUM,9010) TOTIME,TTIME,NUSED
 9010 FORMAT(/'  TOTAL CPU =',F9.2,' SECS   LAST CYCLE =',
     1       F8.2,' SECS   NUSED =',I8)
C
C *** IOS CALCULATION (IOSFLG.GT.0) REJOINS CODE BELOW
C  ASCERTAIN 'HIGH-WATER' MARK IN STORAGE FROM CHKSTR.
C  MX MAY HAVE BEEN REDUCED, SO USE MXSAVE FOR ALLOCATED STORAGE
C
 9020 CALL CHKSTR(NUSED)

      IF (IPRINT.GE.1) THEN
        WRITE(6,'(/)')
        WRITE(6,1001)
        WRITE(6,1002)
        CALL PROGVS(PDATE)
        CALL TIMEMS(TOTIME,NUSED,MXSAVE)
        WRITE(6,1001)
      ENDIF

      IF (LASTIN.EQ.0) GOTO 10
C
C     include statements to pack and send results to master
C
cINOLLS include 'molscat/store-scatln-v17.f'
cINOLLS include 'molscat/store-xsec.f'
cINOLLS include 'all/pvmdat4.f'
C
 9040 RETURN
      END
