      SUBROUTINE DRIVER
C  Copyright (C) 2019 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
      USE efvs
      USE potential
      USE physical_constants
      USE sizes, MXNRG => MXNRG_in_FIELD
C
C***********************************************************************
C
C  ---------------  FIELD - J.M. HUTSON & C.R. LE SUEUR  ---------------
C
C  QUANTUM MOLECULAR BOUND-STATE PROGRAM
C
C  TO FIND THE APPLIED FIELD WHERE A BOUND STATE HAS A SPECIFIED ENERGY.
C  WHEN ENERGY IS SET TO A THRESHOLD, THIS FINDS RESONANCE POSITIONS
C
C  CURRENT VERSION: 2019.0
C***********************************************************************
C
C  DEFAULT UNITS ARE
C   MASSES IN UNIFIED ATOMIC MASS UNITS (DALTONS, CARBON MASS/12)
C   ENERGIES AS WAVENUMBERS IN CM-1
C   LENGTHS IN ANGSTROMS
C  BUT THESE MAY BE CHANGED VIA THE VARIABLES EUNITS, EUNIT, MUNIT, RUNIT
C  ENERGIES ARE OFTEN WRITTEN OUT IN CM-1 AS WELL AS THE SPECIFIED UNITS
C
C  RMIN   IS THE RADIUS AT WHICH THE OUTWARDS PROPAGATION IS BEGUN
C  RMAX   IS THE RADIUS AT WHICH THE INWARDS  PROPAGATION IS BEGUN
C  RMATCH IS THE MATCHING POINT
C  RMID   IS THE POINT AT WHICH THE PROPAGATION METHOD CHANGES (IF IT DOES)
C
C  IPROPS AND IPROPL CONTROL METHODS OF PROPAGATING SOLUTIONS TO COUPLED
C  EQUATIONS
C  NPOTL AND MXLAM CONTROL SUM OVER ANGULAR DEPENDENCE OF POTENTIAL
C  NQN IS NO. OF QUANTUM NUMBERS USED TO DESCRIBE INTERACTION PARTNERS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      logical :: inolls=.false.
cINOLLS include 'fpvm3.h'
      PARAMETER (NEXP=10,MXMNQN=10)
      INTEGER EUNITS,PRNTLV,SHRINK,MONQN(MXMNQN)
      DOUBLE PRECISION MUNIT
cINOLLS include 'all/pvmdat1.f'
C
C  ARRAY TO HOLD TIME AND DATE
      CHARACTER CTIME*9,CDATE*11
      CHARACTER METHOD*12
C
      LOGICAL LFSCAN,LFSRCH,NOBIS,UPWARD
      LOGICAL CONVGE
C
      CHARACTER(80)  LABEL
      CHARACTER(120) LABL
      CHARACTER(3)   C1,C2
      CHARACTER(40)  FTITLE
      CHARACTER(8)   EUNAME
      CHARACTER(20)  PDATE
C
C  FOLLOWING ARRAYS ALL HAVE DIMENSION MXNODE. MXNODE IS THE MAXIMUM
C  NUMBER OF NODES THAT CAN BE SOUGHT IN A SINGLE RUN.
C
      DIMENSION FLDLO(MXNODE),FLDHI(MXNODE),EIGHI(MXNODE),EIGLO(MXNODE),
     1          NLO(MXNODE),NHI(MXNODE),IHI(MXNODE),ILO(MXNODE)
C
C  VARIABLES DIMENSIONED FOR SAVING CONVERGED EIGENVALUES
      DIMENSION EVAL(MXNODE,NEXP),EXTRAP(MXNODE),EXTRAV(MXNODE,NEXP),
     1          NCHECK(MXNODE)
C
C  ARRAYS FOR EFVS AND ENERGIES
      DIMENSION FIELD(MAXEFV)
      DIMENSION FIXFLD(MAXEFV),IFVARY(MAXEFV)
      DIMENSION ENERGY(MXNRG)
      LOGICAL ZCNTN
      DIMENSION OLDFAC(MXOMEG)
C
C     include common block for data received via pvm
C
cINOLLS include 'all/pvmdat.f'
C
C  DYNAMIC STORAGE COMMON BLOCK ...
      COMMON /MEMORY/ MX,IXNEXT,NIPR,IDUMMY,X(1)
      COMMON /VLFLAG/ IVLFL
C  MX,IXNEXT ARE MAX AND NEXT AVAILABLE LOCATION IN X() ARRAY
C  NIPR IS NUMBER OF INTEGERS PER REAL; SHOULD BE 1 OR 2.
C    E.G. FOR IBM R*8/I*4, NIPR=2.  AN INTEGER ARRAY OF DIM. N
C    CAN BE STORED IN A REAL ARRAY OF DIMENSION (N+NIPR-1)/NIPR.
C  IVLFL FLAGS WHETHER IV() ARRAY IS USED AS POINTER W/ VL ARRAY.
C
C  COMMON BLOCK FOR CONTROL OF USE OF PROPAGATION SCRATCH FILE
      LOGICAL IREAD,IWRITE
      COMMON /PRPSCR/ ESHIFT,ISCRU,IREAD,IWRITE
C
C  COMMON BLOCK FOR CONTROL OF PROPAGATION SEGMENTS
      COMMON /RADIAL/ RMNINT,RMXINT,RMID,RMATCH,DRS,DRL,STEPS,STEPL,
     1                POWRS,POWRL,TOLHIS,TOLHIL,CAYS,CAYL,UNSET,
     2                IPROPS,IPROPL,NSEG
      PARAMETER (PUNSET=-1D30)
C
      COMMON /VLSAVE/ IVLU
C
C  COMMON BLOCK FOR EXPECTATION VALUES, COMMUNICATING WITH PERTRB
      COMMON /EXPVAL/ IPERTN,NPOWN,DELTAN

C  COMMON BLOCK FOR NUMERICAL DERIVATIVES
      COMMON /DERIVS/ NUMDER
      LOGICAL NUMDER

C  COMMON BLOCK TO DESCRIBE WHICH DRIVER IS USED
      COMMON /CNTROL/ CDRIVE
      CHARACTER(1) CDRIVE

C  COMMON BLOCK FOR INPUT/OUTPUT CHANNEL NUMBERS
      LOGICAL PSIFMT
      COMMON /IOCHAN/ IPSISC,IWAVSC,IPSI,NWVCOL,PSIFMT
      DATA IPSISC,IPSI,IWAVSC/108,109,110/
      DATA PSIFMT/.TRUE./
      LOGICAL WAVE

C  COMMON BLOCK FOR CONTROL OF PROPAGATION BOUNDARY CONDITIONS
      COMMON /BCCTRL/ BCYCMN,BCYCMX,BCYOMN,BCYOMX,ADIAMN,ADIAMX,
     1                WKBMN,WKBMX
      LOGICAL ADIAMN,ADIAMX,WKBMN,WKBMX
C
      NAMELIST /INPUT/ ADIAMN, ADIAMX, BCYCMN, BCYCMX, BCYOMN,
     1                 BCYOMX, DEGTOL, DFIELD, DNRG,   DR,
     2                 DRAIRY, DRL,    DRS,    DTOL,   ENERGY,
     3                 EPL,    EPS,    EREF,   EUNITS, EUNAME,
     4                 EUNIT,  FIELD,  FIXFLD, FLDMAX, FLDMIN,
     5                 IBDSUM, IBFIX,  IBHI,   IFIELD, IFVARY,
     6                 IMGSEL, INTFLG, IPRINT, IPROPL, IPROPS,
     7                 IPSI,   IPSISC, IREF,   IRMSET, ISCRU,
     8                 IWAVE,  IWAVSC, JSTEP,  JTOTL,  JTOTU,
     9                 KSAVE,  LABEL,  LASTIN, MAGEL,  MONQN,
     A                 MHI,    MSET,   MUNIT,  MXCALC, NFVARY,
     B                 NNRG,   NOBIS,  NODMAX, NODMIN, NUMDER,
     C                 PHILW,  PHIST,  POWRX,  POWRL, POWRS,
     D                 PRNTLV, RMATCH, RMAX,   RMID,   RMIN,
     E                 RUNIT,  RUNAME, STEPL,  STEPS,  SCALAM,
     F                 THETLW, THETST, TOLHI,  TOLHIL, TOLHIS,
     G                 URED,   WKBMN,  WKBMX,
C
C  UNUSED NAMELIST VARIABLES RETAINED FOR DATA-FILE COMPATIBILITY
C
     1                 IRXSET,ISAVEU,ISIGPR,MXSIG,OTOL
      EQUIVALENCE (PRNTLV,IPRINT),(IBDSUM,KSAVE),(IBFIX,MSET),
     1            (IBHI,MHI)

      CHARACTER(1) PLUR(0:2)
C
      DIMENSION NLABV(9),NJLQN(9)
C  NLABV ARRAY CONTAINS NUMBER OF LABELS PER SYMMETRY TERM FOR EACH
C  VALUE OF ITYPE.
      DATA NLABV /1,3,3,4,2,2,5,2,1/
C  NJLQN ARRAY CONTAINS NUMBER OF QUANTUM NUMBER NEEDED TO IDENTIFY A
C  LEVEL CONTAINED IN JLEVEL. (VALUE FOR ITYP=9 IS A DUMMY VALUE)
      DATA NJLQN/1,2,2,3,3,2,2,2,1/
C
      DATA LABEL /'        '/
      DATA IPROGM /1/, PDATE /'2019.0'/
      DATA PLUR/'S',' ','S'/
      DATA CDRIVE /'F'/
C
C  THE PHYSICAL CONSTANTS USED ARE COMBINED IN THE SINGLE NUMBER BFCT.
C  BFCT IS HBAR/(4*PI*C) IN UNITS OF (ATOMIC MASS UNITS)*(WAVENUMBERS)
C                                      *(ANGSTROMS**2).
C  THE FOLLOWING VALUE IS FROM THE 1973 PHYSICAL CONSTANTS.
C     DATA BFCT /16.857630D0/
C  16-10-16: BFCT IS NOW STORED IN MODULE physical_constants
C
C  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
C     include statements to enroll program in PVM
C
cINOLLS include 'all/pvmdat2.f'
C
      MXSAVE=MX
   10 MX=MXSAVE
      unset=PUNSET
      CALL GCLOCK(TFIRST)
      CALL GDATE(CDATE)
      CALL GTIME(CTIME)
C
C  SET PARAMETERS IN COMMON/MEMORY/
C
      NIPR=2
      IXNEXT=1
C  SET NUSED.LT.0 AND CALL CHKSTR TO RESET COUNTER FOR EACH &INPUT.
      NUSED=-1
      CALL CHKSTR(NUSED)
C  SET DEFAULT NAMES FOR UNITS USED BY POTENTIAL ROUTINES
      EPNAME='EPSIL'
      RMNAME='RM'
C
C  SET INITIAL VALUES BEFORE READ(5,INPUT) . . .
C
      ADIAMN=.TRUE.
      ADIAMX=.TRUE.
      BCYCMN=-1.0D0
      BCYCMX=-1.0D0
      BCYOMN=1.0D8
      BCYOMX=0.0D0
      DEGTOL=1.0D-10
      DFIELD=1.0D30
      DNRG=0.0D0
      DR=0.02D0
      DRAIRY=unset
      DRL=unset
      DRS=unset
      DTOL=1.0D-7
      DO I=1,MXNRG
        ENERGY(I)=0.0D0
      ENDDO
      EPL=0.D0
      EPS=0.D0
      EREF=0.0D0
      EUNITS=1
      EUNAME='E UNITS'
      EUNIT=1.D0
      FIELD(1)=0.0D0
      FIELD(2)=0.0D0
      DO I=1,MAXEFV
        EFVNAM(I)=' '
        EFVUNT(I)=' '
        FIELD(I)=0.0D0
        FIXFLD(I)=0.0D0
        IFVARY(I)=MAXEFV+1
      ENDDO
      FLDMAX=0.0D0
      FLDMIN=0.0D0
      IBDSUM=0
      IBFIX=0
      IBHI=0
      IFIELD=-1
      IMGSEL=4
      INTFLG=0
      IPRINT=2
      IPROPL=0
      IPROPS=0
      IREF=0
      IRMSET=0
      ISCRU=0
      IWAVE=0
      JSTEP=1
      JTOTL=0
      JTOTU=0
      LABEL=' '
      LASTIN=1
      MAGEL=1
      MONQN(1)=-99999
      MUNIT=1.D0
      MXCALC=1000
      NFVARY=-1
      NITER=20
      NNRG=1
      NOBIS=.FALSE.
      NODMAX=99999
      NODMIN=0
      NUMDER=.FALSE.
      PHILW=0.0D0
      PHIST=0.0D0
      POWRX=3.0D0
      POWRL=unset
      POWRS=unset
      RMATCH=unset
      RMAX=10.0D0
      RMID=unset
      RMIN=0.8D0
      RUNAME='RUNIT'
      RUNIT=unset
      SCALAM=1.0D0
      STEPL=unset
      STEPS=-10.0D0
      THETLW=0.0D0
      THETST=0.0D0
      TOLHI=1.0D-4
      TOLHIL=unset
      TOLHIS=unset
      URED=0.0D0
      WKBMN=.TRUE.
      WKBMX=.TRUE.
C  OTHER VARIABLES
      DRMAX=5.0D0
      ILDSVU=0  ! FOR BOUND/FIELD, TURN OFF ILDSVU
C  INITIALISE IPERTN TO 0 SO THAT WAVMAT DOES NOT ATTEMPT PERTURBATION
      IPERTN=0
      ITPSUB=0
      MAPEFV=0
      NCALC=0
      NDGVL=0
      NEFV=-1
      NFIELD=0
      NPOTL=0
      NUSED=0
      PI=ACOS(-1.0D0)
      UPWARD=.FALSE.
C
      if (.not.inolls) READ(5,INPUT,END=999)
C
C     include statements to receive, unpack and allocate data to
C     variables
C
cINOLLS include 'field/rinput-v2018.f'
C
      LABEL=ADJUSTL(LABEL)
      LABLEN=MAX(LEN(TRIM(LABEL)),1)
      L1=(116-LABLEN)/2
      L2=116-L1-LABLEN
      WRITE(C1,'(I3)') L1
      WRITE(C2,'(I3)') L2
      FTITLE="(1X,"//ADJUSTR(C1)//"('='),' ',A,' ',"//ADJUSTR(C2)//
     1       "('='))"
      WRITE(LABL,FMT=FTITLE) TRIM(LABEL)

      IF (URED.EQ.0.0D0) THEN
        WRITE(6,*) ' YOU HAVE FORGOTTEN THE REDUCED MASS'
        STOP
      ENDIF
C
      IF (IPRINT.GE.1) THEN
        WRITE(6,1001)
 1001   FORMAT(2X,'-- FIELD ---',4('--- FIELD ---'),'--- FIELD --')
        WRITE(6,1002)
 1002   FORMAT(' |',76X,'|'/' |',10X,
     2         'Bound states of interacting pairs of atoms and '
     3         'molecules',10X,'|'/' |',22X,
     4         'as a function of external field',23X,'|')
        CALL PROGVS(PDATE)
        CALL TIMEST(CDATE,CTIME)
        WRITE(6,1001)
        CALL CPRMSG('FIELD  ',PDATE)
      ENDIF
C
      IF (IPRINT.GE.1) WRITE(6,1003) NIST_year
 1003 FORMAT(/'  USING CODATA ',I4,' RECOMMENDED VALUES OF',
     1   ' FUNDAMENTAL PHYSICAL CONSTANTS')
C
      IF (IPRINT.GE.1) THEN
        AMXKB=DBLE(MX)/128.0D0/1024.0D0
        WRITE(6,1004) MX,AMXKB
 1004   FORMAT(/'  MEMORY ALLOCATED TO MAIN WORKING ARRAY IS',I10,
     1          ' (8-BYTE) WORDS (',F8.2,' MB)')
      ENDIF

      IF (IPRINT.GE.1) WRITE(6,1007) IPRINT
 1007 FORMAT(/'  PRINT LEVEL (IPRINT) =',I3)

      IF (IPRINT.GE.1) THEN
        IF (MUNIT.EQ.1.D0) THEN
          WRITE(6,1009) URED
 1009     FORMAT(/'  REDUCED MASS FOR INTERACTION =',F14.9,
     1            ' ATOMIC MASS UNITS (DALTONS)')
        ELSE
          WRITE(6,1010) URED,MUNIT
 1010     FORMAT(/'  REDUCED MASS FOR INTERACTION =',F14.9,
     1            ' (UNITS OF',1PG16.9,' DALTONS)')
        ENDIF
      ENDIF
C
      IF (ISCRU.NE.0) THEN
        WRITE(6,1020)
 1020   FORMAT('  *** WARNING. THE OPTION TO REUSE A SCRATCH FILE TO',
     1         ' SAVE INFORMATION BETWEEN PROPAGATIONS IS NOT ',
     2         'SUPPORTED IN FIELD')
        ISCRU=0
      ENDIF
C
C  PROCESS TOTAL ENERGIES
C
      IF (EUNITS.NE.0) CALL ECNV(EUNITS,EUNIT,EUNAME,IPRINT)
C
      NNRG=MIN(NNRG,MXNRG)
      IF (NNRG.GT.1 .AND. DNRG.NE.0.0D0) THEN
        DO I=2,NNRG
          ENERGY(I)=ENERGY(1)+DNRG*DBLE(I-1)
        ENDDO
      ENDIF

      EPS=EPS*EUNIT
      EPL=EPL*EUNIT

      IF (IPRINT.GE.1) WRITE(6,1060)
 1060 FORMAT(/2X,59('=='))
C
C--------------------------------------------------------------------
C  INITIALIZE BASIS ROUTINE  -----------------
C
      IXJSTT=IXNEXT
      NSTATE=MX
      CALL BASIN(NSTATE,X(IXJSTT),URED,NQN,NLABV(9),MXPAR,ITYPE,IPRINT,
     1           IOSFLG,IBOUND,NLEVEL,X(ISJSTT))
C
      IF (NEXTRA.NE.0) THEN
C  IF NEXTRA HAS BEEN SET, ASSUME THAT DEGTOL IS NEEDED
        DEGTOL=DEGTOL*EUNIT
        IF (IPRINT.GE.1) THEN
          IF (EUNIT.NE.1.D0) THEN
            WRITE(6,1101) DEGTOL,DEGTOL/EUNIT,EUNAME
          ELSE
            WRITE(6,1101) DEGTOL
          ENDIF
          WRITE(6,1102) NEXTRA
        ENDIF
 1101   FORMAT(/2X,'EXTRA OPERATORS WILL BE USED TO RESOLVE ',
     1         'ASYMPTOTIC DEGENERACIES CLOSER THAN'/2X,'DEGTOL =',
     2         G16.8,' CM-1 =',G16.8,1X,A)
 1102   FORMAT(2X,'THERE ARE ',I3,' EXTRA OPERATORS')
      ENDIF
C
      IF (FLDMIN.EQ.0.0D0 .AND. FLDMAX.EQ.0.0D0) THEN
        WRITE(6,*) 'YOU HAVE NOT SPECIFIED A RANGE'
        STOP
      ENDIF

      IF (FLDMAX.EQ.FLDMIN) DFIELD=1.0D0
      LFSCAN=(ABS(DFIELD).LT.ABS(FLDMIN-FLDMAX) .OR. FLDMIN.EQ.FLDMAX)
      LFSRCH=.NOT.LFSCAN

C  INITIALISE ALL EXTERNAL VARIABLE QUANTITIES
      CALL INIEFV(FIXFLD,IPRINT,FLDMIN,FLDMAX,DFIELD,
     1            NFIELD,FIELD,MAGEL,NFVARY,IFVARY,LFSRCH,LFSCAN)

      LENEFV=MAX(NEFVP-IEFVST+1,0)
C
C  BASE ROUTINE INCREMENTS IXNEXT BY AMOUNT OF STORAGE IN JSTATE.
      CALL CHKSTR(NUSED)
      IVLSAV=IVLU
      IF (IPRINT.GE.1) WRITE(6,1060)
C
C--------------------------------------------------------------------
C  INITIALIZE POTENTIAL.
C   EPSIL  (POTENTIAL ENERGY UNIT) MUST BE SET IN POTENL
C   RPUNIT (POTENTIAL LENGTH UNIT) MAY OPTIONALLY BE SET IN POTENTIAL
C     IF RPUNIT IS SET AND RUNIT IS UNSET, RUNIT IS TAKEN FROM RPUNIT,
C     AND VICE VERSA. IF BOTH ARE SET, POTENL USES SEPARATE LENGTH UNITS.
C     IF NEITHER IS SET, THEY DEFAULT TO 1 (ANGSTROMS).
C     THE SCALING FACTOR RUNIT/RPUNIT IS PLACED IN RSCALE.
C
      ILAM=IXNEXT
      MXLAM=NIPR*(MX-ILAM+1)
C
      RPUNIT=unset
      CALL POTENL(-1,MXLAM,X(ILAM),RPUNIT,EPSIL,ITYPE,IPRINT)
C
      CALL CHCKRU(RUNIT,RPUNIT,RSCALE,unset,IPRINT)
C
C  THE PROGRAM WORKS WITH REDUCED ENERGIES IN UNITS OF 1/RUNIT**2
C  ALL DISTANCES ARE IN THESE R UNITS.
C  CINT CONVERTS ENERGIES IN CM-1 INTO UNITS OF 1/RUNIT**2
C  RMLMDA CONVERT THE INTERACTION POTENTIAL INTO UNITS OF 1/RUNIT**2
C
      CINT=URED*MUNIT*RUNIT*RUNIT/BFCT
      RMLMDA=CINT*EPSIL
C
      ITYP=MOD(ITYPE,10)
      IXNEXT=IXNEXT+(MXLAM*NLABV(ITYP)+NIPR-1)/NIPR

      CALL VLCHK(IVLFL,IPRINT,ITYPE,NLABV,MXLAM,NPOTL,X(ILAM))

      CALL CHKSTR(NUSED)
      IC1=IXNEXT
      IF (IPRINT.GE.1) WRITE(6,1060)
C
C  PROCESS REQUESTED PROPAGATOR -- AND ITS INPUT DATA.
C
      CALL PROPST(RMIN,RMAX,DR,IRMSET,0,0.D0,
     1            INTFLG,IMGSEL,IPRINT,
     2            EPS,EPL,POWRX,TOLHI,DRMAX,NSTAB)
C
C  IF WAVEFUNCTIONS ARE REQUESTED, 3 EXTRA FILES ARE USED:
C  CHANNEL IWAVSC  SCRATCH  SAVING BITS REQUIRED FOR WAVEFN PROPAGATION
C  CHANNEL IPSISC  SCRATCH  SAVING WAVEFN AS CREATED BY MDPROP
C  CHANNEL IPSI    FINAL FILE WITH WAVEFN SEQUENTIALLY FROM RMIN TO RMAX
C  OPEN TEMPORARY FILES LATER AS N IS REQUIRED FOR RECORD LENGTH
C
      WAVE=(IWAVE.NE.0 .AND. IPROPS.EQ.6 .AND. IPROPL.EQ.6)
      IF (IWAVE.NE.0 .AND. .NOT.WAVE) THEN
        WRITE(6,1110)
 1110   FORMAT(/'  WAVEFUNCTIONS ONLY AVAILABLE FOR LDMD PROPAGATOR:',
     1         ' REQUEST CANCELLED')
      ENDIF
C
C  WRITE HEADER ON WAVEFUNCTION FILE
C
      IF (WAVE) CALL WVHEAD(IPROGM,LABEL,ITYPE,URED,IPRINT)

      IF (IPRINT.GE.1) WRITE(6,1060)
C
      IF (ITYPE.EQ.8) EBAS=100.0D0

      IF (NCONST.EQ.0) CALL THRESH(X(ISEINT),N,CINT,ITYPE,MONQN,NQN,
     1                             NJLQN(ITYP),EREF,X(ISJIND),0)
      IF (IPRINT.GE.1) THEN
        IF (LFSCAN) THEN
          WRITE(6,1300) TRIM(EFVNAM(ISVEFV)),FLDMIN,
     1                  TRIM(EFVUNT(ISVEFV)),FLDMAX,
     2                  TRIM(EFVUNT(ISVEFV)),DFIELD,
     3                  EFVUNT(ISVEFV)
        ELSE
          WRITE(6,1310) '  PROGRAM WILL ATTEMPT TO CONVERGE ON BOUND',
     1                  ' STATES AS A FUNCTION OF ',
     2                  TRIM(EFVNAM(ISVEFV))
        ENDIF
        IF (LENEFV.GT.1)
     1    WRITE(6,1320) '  WITH ALL OTHER VARIABLES FIXED AS:',
     2                  (TRIM(EFVNAM(IEFV)),EFV(IEFV),
     3                   TRIM(EFVUNT(IEFV)),IEFV=IEFVST,ISVEFV-1),
     4                  (TRIM(EFVNAM(IEFV)),EFV(IEFV),
     5                   TRIM(EFVUNT(IEFV)),IEFV=ISVEFV+1,NEFV)
        IF (.NOT.LFSCAN) THEN
          WRITE(6,1330)
          WRITE(6,1340) DTOL,EFVUNT(ISVEFV)
          WRITE(6,1350) NODMIN,NODMAX
        ENDIF

 1300   FORMAT(/'  PROGRAM WILL SCAN ',A,' FROM ',1PG12.5,' ',A,
     1         ' TO',G12.5,' ',A,' IN STEPS OF ',G12.5,' ',A/
     2         '  CONVERGENCE WILL NOT BE ATTEMPTED')
 1310   FORMAT(/A,A,A)
 1320   FORMAT(A,(/2X,A,' = ',F17.9,' ',A))
 1330   FORMAT(/'  FOR EACH LEVEL, THE BISECTION METHOD WILL BE',
     1         ' USED UNTIL THE VWDB METHOD OFFERS RELIABLE ',
     2         'CONVERGENCE')
 1340   FORMAT(/'  VWDB CONVERGENCE WILL TERMINATE WHEN THE STEP SIZE ',
     1          'IS LESS THAN',1PG12.5,1X,A)
 1350   FORMAT(/'  PROGRAM WILL SEEK EIGENVALUES WITH GENERALISED',
     1         ' NODE COUNTS FROM',I5,' TO',I7/'  LYING IN ')

        CALL MSGEFV(0,NFIELD)

        DO IFLD=1,NFIELD
          IF (.NOT.LFSCAN) THEN
            IF (IFLD.EQ.1) SV_VAL=FLDMIN
            IF (IFLD.EQ.2) SV_VAL=FLDMAX
            IF (IFLD.GT.2) EXIT
          ENDIF
C  WRITE MESSAGE FOR THIS CYCLE
          CALL SETEFV(FIELD,SV_VAL)
          CALL MSGEFV(-IFLD,NFIELD)
        ENDDO
C  RESET VALUES READY FOR LOOP LATER ON
        CALL RSTEFV(FIXFLD)

        EMX=-1D30
        DO I=1,NNRG
          EMX=MAX(EMX,ENERGY(I))
        ENDDO

        IF (EUNITS.EQ.1) THEN
          IF (IPRINT.GE.1) WRITE(6,1200)
        ELSEIF (EUNITS.LE.9) THEN
          WRITE(6,1210) TRIM(EUNAME),EUNITS
        ELSE
          WRITE(6,1220) TRIM(EUNAME),EUNITS
        ENDIF
 1200   FORMAT(/'  INPUT ENERGY VALUES ASSUMED TO BE IN UNITS OF CM-1 ',
     1         'BY DEFAULT.')
 1210   FORMAT(/'  INPUT ENERGY VALUES CONVERTED FROM ',A/
     1         '  TO INTERNAL WORKING UNITS OF CM-1 DUE TO INTEGER ',
     2         'INPUT =',I4)
 1220   FORMAT(/'  INPUT ENERGY VALUES CONVERTED FROM ',A/
     1          '  TO INTERNAL WORKING UNITS OF CM-1 DUE TO ',
     2          'ALPHANUMERIC INPUT =',A4)
        WRITE(6,1360) TRIM(EUNAME),(ENERGY(I),I=1,NNRG)
 1360   FORMAT(/'  PROGRAM WILL SEEK EIGENVALUES AT ENERGIES (IN ',A,
     1         ')'/1P,(16X,7G16.6))
        NJLQN(9)=NQN-1
        CALL EREFIN(MONQN,NQN,NJLQN(ITYP),EUNAME,EREF,EUNIT)
C
      ENDIF
C
      CALL GCLOCK(TITIME)
      TTIME=TITIME-TFIRST
      TIMLST=TITIME

      IF (IPRINT.GE.1) THEN
        WRITE(6,1060)
        IF (JTOTL.LT.JTOTU) THEN
          WRITE(6,1500) JTOTL,JTOTU,JSTEP
        ELSE
          WRITE(6,1510) JTOTL
        ENDIF
 1500   FORMAT(/'  TOTAL ANGULAR MOMENTUM JTOT RUNS FROM',I4,'  TO',
     1          I6,'  IN STEPS OF',I4)
 1510   FORMAT(/'  TOTAL ANGULAR MOMENTUM JTOT =',I4)
      ENDIF
C
C  INCORPORATING POSSIBILITY OF LOOPING FROM IBFIX TO IBHI CRLS 25-07-18
      IF (IPRINT.GE.1 .AND. MXPAR.GT.1)
     1  WRITE(6,'(/2X,A,I3,A)') 'EACH JTOT IS SPLIT INTO A MAXIMUM OF ',
     1                          MXPAR,' SYMMETRY BLOCKS'
      IF (IBFIX.GT.0 .AND. IBHI.GT.0 .AND. IBHI.LT.IBFIX) IBHI=0
      IF (IBFIX.GT.0 .AND. IBHI.LE.0) IBHI=IBFIX
      IF (IBFIX.EQ.0) IBHI=MXPAR
      IF (IBFIX.GT.0 .AND. IPRINT.GE.1) THEN
        IF (IBFIX.LT.IBHI) THEN
          WRITE(6,1600) IBFIX,IBHI
        ELSE
          WRITE(6,1610) IBFIX
        ENDIF
      ENDIF
 1600 FORMAT(/'  CALCULATIONS WILL BE FOR SYMMETRY BLOCKS',
     1       I4,'  TO',I4)
 1610 FORMAT(/'  CALCULATIONS WILL BE FOR SYMMETRY BLOCK',
     1       I4,'  ONLY')

      IF (IPRINT.GE.1) WRITE(6,1900) TTIME,NUSED
 1900 FORMAT(/'  INITIALIZATION DONE.  TIME WAS',F7.2,' CPU SECS.',
     1       I10,' WORDS OF STORAGE USED.')
C
C  **************  LOOP OVER JTOT VALUES BEGINS HERE.  ******************
C
      IF (IPRINT.GE.1) WRITE(6,'(/1X,A)') TRIM(LABL)
      DO 100 JTOT=JTOTL,JTOTU,JSTEP
        THETA=THETLW+THETST*DBLE(JTOT)
C
C  ***************  LOOP OVER SYMMETRY BLOCKS BEGINS HERE  **************
C
        DO 200 IB=MAX(1,IBFIX),MIN(IBHI,MXPAR)
          IF (IPRINT.GE.1) WRITE(6,2100) JTOT,IB
 2100     FORMAT(/2X,29('*'),'  ANGULAR MOMENTUM JTOT  =',I4,'  ',
     1           ' AND SYMMETRY BLOCK  = ',I4,2X,28('*'))

          PHI=PHILW+PHIST*DBLE(IB-1)
          IVLU=IVLSAV
C
C  CHOOSE BASIS FUNCTIONS
C
          CALL BASE(JTOT,X(IXJSTT),N,X,X,CINT,
     1              X,X,X,X,MXLAM,NPOTL,
     2              X(ILAM),X,WGHT,IEXCH,THETA,PHI,IB,.TRUE.,
     3              EBAS,NSTATE,IPRINT,IBOUND,X(ISJSTT),X)
C
C  N IS THE NUMBER OF BASIS FUNCTIONS
C  SKIP THIS JTOT,IB IF NO CHANNELS
C
          IF (N.LE.0) GOTO 200
          NSQ = N*N
C
C  ALLOCATE STORAGE FOR COUPLED EQUATION SOLVER.
C
C  ALLOCATE STORAGE COMMON TO ALL PROPAGATORS. . .
          ISJIND=IC1                 ! JSINDX
          ISEINT=ISJIND+N            ! EINT
          ISCENT=ISEINT+N            ! CENT
          ISWVEC=ISCENT+N            ! WVEC
          ISL=ISWVEC+N               ! L
          ISP=ISL+N                  ! P
          IPDIM=MXLAM+NCONST+NRSQ
          ISIV=ISP+IPDIM             ! IV
          IF (NUMDER .AND. IPRINT.GE.23 .AND.
     1                                   (IPROPS.EQ.7 .OR. IPROPL.EQ.7))
     2      ISIV=ISIV+2*IPDIM
          NV=N*(N+1)/2
          IF (IVLU.EQ.0) NV=NV*NVLBLK
          ISVL=ISIV                  ! VL
          IF (IVLFL.GT.0) ISVL=ISIV+(NV+NIPR-1)/NIPR
          ISDGVL=ISVL+NV             ! DGVL
          IXNEXT=ISDGVL
          IF (NCONST.EQ.0) IXNEXT=IXNEXT+N*NDGVL
          CALL CHKSTR(NUSED)
C
C  SET UP BASIS FUNCTIONS IN ALLOCATED STORAGE
C
          CALL BASE(JTOT,X(IXJSTT),N,X(ISJIND),X(ISL),CINT,
     1              X(ISEINT),X(ISCENT),X(ISVL),X(ISIV),MXLAM,NPOTL,
     2              X(ILAM),X(ISWVEC),WGHT,IEXCH,THETA,PHI,IB,.FALSE.,
     3              EBAS,NSTATE,IPRINT,IBOUND,X(ISJSTT),X(ISDGVL))
C
C  CALCULATE STORAGE ALLOCATIONS FOR Y(OUT), Y(IN) AND U
C
          NSQ=N*N
          ISYOUT=IXNEXT        ! Y(OUT)
          ISYIN=ISYOUT+NSQ     ! Y(IN)
          ISU=ISYIN+NSQ        ! U
          IXNEXT=ISU+NSQ

          CALL CHKSTR(NUSED)
C
C  ******************  LOOP OVER ENERGIES BEGINS HERE  ******************
C
          DO 300 INRG=1,NNRG
C  CANNOT USE PROPAGATOR SCRATCH FILE IF FIELDS ARE CHANGING
            IREAD=.FALSE.
            IWRITE=.FALSE.
            IF (IPRINT.GE.1) THEN
              IF (IPRINT.GE.2) WRITE(6,2300)
 2300         FORMAT(2X,59('= '))
              WRITE(6,2302) INRG,ENERGY(INRG),EUNAME
 2302         FORMAT(/2X,1P,'ENERGY # ',I4,' = ',G17.10,1X,A)
            ENDIF
C
C  FIRST SET THE LIMITS
C
            OLDFAC=0.0D0
C
C  ALLOCATE STORAGE USED FOR EIGENVECTORS OF SMALLEST EIGENVALUE AT
C  FLDMIN AND FLDMAX
            ISLOW=IXNEXT    ! EVEC AT FLDMIN
            ISHIGH=ISLOW+N  ! EVEC AT FLDMAX
            IC2=ISHIGH+N
            IXNEXT=IC2
            CALL CHKSTR(NUSED)

C  ISEVEC IS A POINTER TO WHERE THE EIGENVECTOR OF THE SMALLEST
C  EIGENVALUE FOR THE CURRENT CALCULATION IS STORED
            ISEVEC=ISLOW

C
C  ******************  LOOP OVER FIELDS BEGINS HERE  ******************
C
            DO 400 IFLD=1,NFIELD
              IF (IFLD.EQ.2 .AND. .NOT.LFSCAN) ISEVEC=ISHIGH
              IF (.NOT.LFSCAN) THEN
                IF (IFLD.EQ.1) FLD=FLDMIN
                IF (IFLD.EQ.2) FLD=FLDMAX
                IF (IFLD.GT.2) EXIT
              ELSE
                FLD=FLDMIN+DFIELD*DBLE(IFLD-1)
              ENDIF
              CALL SETEFV(FIELD,FLD)
              IF (IPRINT.GE.7 .AND. .NOT.LFSCAN)
     1          CALL PRPROP(SVNAME,FLD,SVUNIT)
C
C  CALL CHEINT OR YTRANS TO GET EINT FOR THIS FIELD
C
              IF (NCONST.EQ.0 .AND. NDGVL.GT.0) THEN
                CALL CHEINT((ISEINT),X(ISDGVL),N,OLDFAC,CINT)
                IF (IPRINT.GE.10)
     1            CALL THRLST(N,X(ISEINT),X(ISCENT),CINT,X(ISL),
     2                        IBOUND,EUNIT,EUNAME)
              ENDIF

              IF (NCONST.GT.0 .OR. NRSQ.GT.0) THEN
                CALL YTRANS(X(ISYOUT),X(ISU),X(ISEINT),X(ISWVEC),
     1                      X(ISJIND),X(ISL),N,X(ISP),X(ISVL),X(ISIV),
     2                      MXLAM,NPOTL,ERED,RMLMDA,DEGTOL,NOPEN,
     3                      IBOUND,X(ISCENT),IPRINT,.FALSE.)
C
                IF (IPRINT.GE.10)
     1            CALL THRLST(N,X(ISEINT),X(ISCENT),CINT,X(ISL),
     2                        IBOUND,EUNIT,EUNAME)
              ENDIF
C
C  CALCULATE EREF
C
              ETEMP=ENERGY(INRG)*EUNIT
              IF (IREF.NE.0 .OR. MONQN(1).NE.-99999)
     1          CALL THRESH(X(ISEINT),N,CINT,ITYPE,MONQN,NQN,
     2                      NJLQN(ITYP),EREF,X(ISJIND),IPRINT)
              ERED=ETEMP+EREF
              IF (IPRINT.GE.7) CALL EREFMS(EREF,EUNIT,EUNAME,MONQN,NQN)
              IF (IPRINT.GE.8) CALL EABSMS(ERED,EUNIT,EUNAME)
C
              ERED=ERED*CINT
              EREDMX=ERED
              IF (ITYPE.NE.8 .AND. ISCRU.NE.0) EREDMX=EMX+EREF*CINT
              IF (IRMSET.GT.0 .AND. IFLD.EQ.1 .AND. INRG.EQ.1) THEN
                RMNINT=RMIN
                ITW=IXNEXT
                IT1=ITW+N*N
                IT2=IT1+N
                IT3=IT2+N
                IT4=IT3+N
                IXNEXT=IT4+N
                CALL CHKSTR(NUSED)
                CALL FINDRM(X(ITW),N,RMNINT,RTURN,X(ISP),X(ISVL),
     1                      X(ISIV),EREDMX,X(ISEINT),X(ISCENT),RMLMDA,
     2                      X(IT1),X(IT2),X(IT3),X(IT4),MXLAM,NPOTL,
     3                      IRMSET,ITYPE,IPRINT)
                IXNEXT=ITW
              ENDIF

              CAYS=CALCK(EPS*CINT,EREDMX,X(ISEINT),N)
              CAYL=CALCK(EPL*CINT,EREDMX,X(ISEINT),N)
              IF (STEPS.GT.0.D0 .AND. CAYS.EQ.0.D0) THEN
                WRITE(6,*) ' *** ERROR: EKIN+EPS IS NOT +VE'
                STOP
              ENDIF
              IF (STEPL.GT.0.D0 .AND. CAYL.EQ.0.D0) THEN
                WRITE(6,*) ' *** ERROR: EKIN+EPL IS NOT +VE'
                STOP
              ENDIF

              CALL BDCTRL(N,MXLAM,NPOTL,X(ISYOUT),X(ISYIN),
     1                    X(ISU),X(ISEVEC),X(IDUM),X(ISVL),X(ISIV),
     2                    X(ISEINT), X(ISCENT), X(ISP), NODE, ERED,
     3                    RMLMDA, EIGMIN, .FALSE., IMIN, IPRINT)
              IF (LFSCAN .AND. IPRINT.GE.1) THEN
                CALL PRPRCT(IFLD,SVNAME,FLD,SVUNIT)
                CALL PREVAL(NODE,EIGMIN)
              ENDIF
C
              CALL GCLOCK(TITIME)
              TTIME=TITIME-TIMLST
              TIMLST=TITIME
C
              CALL FLUSH(6)
C
              IF (IFLD.EQ.1) THEN
                NODLO=NODE
                EIGLOW=EIGMIN
                ILOW=IMIN
              ELSE
                NODHI=NODE
                EIGHIG=EIGMIN
                IHIGH=IMIN
              ENDIF

              IF ((IFLD.EQ.2 .AND. .NOT.LFSCAN) .AND. IPRINT.GE.2)
     1          CALL PRMNMX(NODLO,NODHI,FLDMIN,FLDMAX,SVNAME,SVUNIT)
C
              NCALC=NCALC+1
              NFOUND=0
              IF (NCALC.GE.MXCALC) GOTO 390
C
  400       CONTINUE
C
            IF (LFSCAN) GOTO 330
C
            NNODES=NODHI-NODLO
            IF (NODHI.EQ.NODLO) THEN
              IF (IPRINT.GE.3)
     1          WRITE(6,2410)
 2410         FORMAT(/'  NO NODES BETWEEN FLDMAX AND FLDMIN.'/
     1               '  CONVERGENCE WILL BE SKIPPED FOR THIS JTOT AND ',
     2               'SYMMETRY BLOCK.')
            ELSEIF (NODHI.GT.NODLO) THEN
              UPWARD=.FALSE.
              NNODES=MIN(NNODES,MXNODE)
              IF (IPRINT.GE.3)
     1          WRITE(6,2420) 'IN',NNODES,PLUR(MIN(2,NNODES))
 2420         FORMAT(/'  NODE COUNT ',A2,'CREASES BETWEEN FLDMIN ',
     1               'AND FLDMAX'/'  PROGRAM WILL ASSUME MONOTONIC ',
     2               'BEHAVIOUR AND SEEK',I4,' NODE',A,
     3               ' IN THIS INTERVAL')
            ELSEIF (NODHI.LT.NODLO) THEN
              UPWARD=.TRUE.
              NNODES=-NNODES
              NNODES=MIN(NNODES,MXNODE)
              IF (IPRINT.GE.3)
     1          WRITE(6,2420) 'DE',NNODES,PLUR(MIN(2,NNODES))
            ENDIF

C
C  ALLOCATE STORAGE FOR EIGENVECTORS OF SMALLEST EIGENVALUE AT RANGE
C  ENDPOINTS FOR EACH NODE
            ISVLO=IC2             ! EVEC AT FLDLO
            ISVHI=ISVLO+NNODES*N  ! EVEC AT FLDHI
            IXNEXT=ISVHI+NNODES*N
            IC3=IXNEXT
            CALL CHKSTR(NUSED)

C
C  LOOP OVER ALL NODES, SETTING UP INITIAL VALUES FOR RANGE ENDPOINTS
C
            DO I=1,NNODES
C
C  IVLO AND IVHI ARE ADDRESSES FOR EVEC AT FLDLO AND FLDHI FOR CURRENT NODE
C
              IVLO=ISVLO+(I-1)*N
              IVHI=ISVHI+(I-1)*N

              FLDLO(I)=FLDMIN
              NLO(I)=NODLO
              EIGLO=EIGLOW
              ILO(I)=ILOW
              CALL DCOPY(N,X(ISLOW),1,X(IVLO),1)
              FLDHI(I)=FLDMAX
              NHI(I)=NODHI
              EIGHI(I)=EIGHIG
              IHI(I)=IHIGH
              CALL DCOPY(N,X(ISHIGH),1,X(IVHI),1)
            ENDDO
C
C
C  FROM NOW ON, THE CLOSEST AVAILABLE BOUNDS ON THE FIELD OF EACH
C  NODE WILL BE STORED IN FLDLO(NODE-NODHI) AND FLDHI(NODE-NODHI).
C
cINOLLS include 'field/pvmdat7.f'
C
            DO 500 INODE=1,NNODES
              NPROP=1
              TNTIME=TITIME
              NSEEK=INODE+NODHI
              IF (.NOT.UPWARD) NSEEK=INODE+NODLO
              IF (NSEEK.LT.NODMIN .OR. NSEEK.GT.NODMAX) GOTO 500
              IF (IPRINT.GE.2) CALL PRNDCT(INODE,NSEEK)
C
cINOLLS include 'all/pvmdat5.f'
C
C  START BISECTION TO FIND THIS NODE
C
  510         FLDHLF=0.5D0*(FLDLO(INODE)+FLDHI(INODE))
              NCALC=NCALC+1
              IF (NCALC.GT.MXCALC) THEN
                NFOUND=INODE-1
                GOTO 390
              ENDIF
              IF (IPRINT.GE.7) CALL PRBIS(FLDLO(INODE),FLDHI(INODE),
     1                                    FLDHLF,SVUNIT,'BISECTION')
              CALL SETEFV(FIELD,FLDHLF)
C
C  CALL CHEINT OR YTRANS TO GET EINT FOR THIS FIELD
C
              IF (NCONST.EQ.0 .AND. NDGVL.GT.0) THEN
                CALL CHEINT(X(ISEINT),X(ISDGVL),N,OLDFAC,CINT)
                IF (IPRINT.GE.10)
     1            CALL THRLST(N,X(ISEINT),X(ISCENT),CINT,X(ISL),
     2                        IBOUND,EUNIT,EUNAME)
              ENDIF

              IF (NCONST.GT.0 .OR. NRSQ.GT.0) THEN
                CALL YTRANS(X(ISYOUT),X(ISU),X(ISEINT),X(ISWVEC),
     1                      X(ISJIND),X(ISL),N,X(ISP),X(ISVL),X(ISIV),
     2                      MXLAM,NPOTL,ERED,RMLMDA,DEGTOL,NOPEN,
     3                      IBOUND,X(ISCENT),IPRINT,.FALSE.)
                IF (IPRINT.GE.10)
     1            CALL THRLST(N,X(ISEINT),X(ISCENT),CINT,X(ISL),
     2                        IBOUND,EUNIT,EUNAME)
              ENDIF
              IXNEXT=IC3
C
C  ADD EREF IF ENERGIES ARE TO BE TREATED AS KINETIC: DEFAULTS TO 0
C
              ETEMP=ENERGY(INRG)*EUNIT
              IF (IREF.NE.0 .OR. MONQN(1).NE.-99999)
     1          CALL THRESH(X(ISEINT),N,CINT,ITYPE,MONQN,NQN,
     2                      NJLQN(ITYP),EREF,X(ISJIND),IPRINT)
              ERED=ETEMP+EREF
              IF (IPRINT.GE.7) CALL EREFMS(EREF,EUNIT,EUNAME,MONQN,NQN)
              IF (IPRINT.GE.8) CALL EABSMS(ERED,EUNIT,EUNAME)
C
              ERED=ERED*CINT

              CAYS=CALCK(EPS*CINT,EREDMX,X(ISEINT),N)
              CAYL=CALCK(EPL*CINT,EREDMX,X(ISEINT),N)
              IF (STEPS.GT.0.D0 .AND. CAYS.EQ.0.D0) THEN
                WRITE(6,*) ' *** ERROR: EKIN+EPS IS NOT +VE'
                STOP
              ENDIF
              IF (STEPL.GT.0.D0 .AND. CAYL.EQ.0.D0) THEN
                WRITE(6,*) ' *** ERROR: EKIN+EPL IS NOT +VE'
                STOP
              ENDIF

              CALL BDCTRL(N,MXLAM,NPOTL,X(ISYOUT),X(ISYIN),
     1                    X(ISU),X(ISEVEC),X(IDUM),X(ISVL),X(ISIV),
     2                    X(ISEINT), X(ISCENT), X(ISP), NODE, ERED,
     3                    RMLMDA, EIGMIN, .FALSE., IMIN, IPRINT)
              IF (IPRINT.GE.6) CALL PRPRCT(NPROP,SVNAME,FLDHLF,SVUNIT)
              IF (IPRINT.GE.7) CALL PREVAL(NODE,EIGMIN)
              NPROP=NPROP+1
C
              CALL GCLOCK(TITIME)
              TTIME=TITIME-TIMLST
              TIMLST=TITIME
C
              CALL FLUSH(6)
C
C  LOOP OVER THIS NODE AND THE REST, UPDATING INITIAL VALUES FOR RANGE
C  ENDPOINTS
              DO I=INODE,NNODES
                IVLO=ISVLO+(I-1)*N
                IVHI=ISVHI+(I-1)*N
                IF ((UPWARD .AND. (NODE.GE.NODHI+I)) .OR.
     1              (.NOT.UPWARD .AND. NODE.LT.NODLO+I)) THEN
                  IF (FLDHLF.GT.FLDLO(I)) THEN
                    FLDLO(I)=FLDHLF
                    NLO(I)=NODE
                    EIGLO(I)=EIGMIN
                    ILO(I)=IMIN
                    CALL DCOPY(N,X(ISEVEC),1,X(IVLO),1)
                  ENDIF
                ELSE
                  IF (FLDHLF.LT.FLDHI(I)) THEN
                    FLDHI(I)=FLDHLF
                    NHI(I)=NODE
                    EIGHI(I)=EIGMIN
                    IHI(I)=IMIN
                    CALL DCOPY(N,X(ISEVEC),1,X(IVHI),1)
                  ENDIF
                ENDIF
              ENDDO
C
C
              IF (UPWARD .AND. (NLO(INODE)-NHI(INODE).GT.1)) GOTO 510
              IF (.NOT.UPWARD .AND. (NHI(INODE)-NLO(INODE).GT.1))
     1          GOTO 510
C
              IF ((UPWARD .AND. (NHI(INODE).GE.NLO(INODE))) .OR.
     2            (.NOT.UPWARD .AND. (NLO(INODE).GE.NHI(INODE)))) THEN
                WRITE(6,2500) NSEEK,INODE,
     1                      (NLO(I),FLDLO(I),NHI(I),FLDHI(I),I=1,NNODES)
 2500           FORMAT(/'  ERROR IN NODE COUNT LOGIC.'/
     1                 '  CURRENTLY SEARCHING FOR NODE',I4,
     2                 ' (INDEX NUMBER',I3,')'/
     2                 '  NLO       FLDLO         NHI      FLDHI'/
     3                 (2(I5,F16.5)))
                STOP
              ENDIF
C
C  ARRIVE HERE IF ONLY THE REQUIRED NODE LIES IN THIS INTERVAL.
C  DECIDE WHETHER TO USE VWDB METHOD OR CONTINUE BISECTION.
C
C  ONLY SAFE TO USE VWDB METHOD IF WE ARE ON THE CORRECT BRANCH
C  OF THE MATCHING EIGENVALUE. IT SHOULD BE SAFE TO WAIT UNTIL
C  THE EIGENVALUES WITH THE SMALLEST ABSOLUTE VALUES ARE BOTH
C  OF THE CORRECT SIGN.
C
C  PROBLEMS SOMETIMES ARISE BECAUSE THE NODE COUNT CHANGES AT
C  AN ENERGY SLIGHTLY AWAY FROM THE ZERO IN THE EIGENVALUE.
C  AVOID FURTHER BISECTION IF FLDLO AND FLDHI ARE TOO CLOSE
C
              IF (FLDHI(INODE)-FLDLO(INODE).GT.100.0D0*DTOL) THEN
                IF (UPWARD .AND.
     1              (EIGHI(INODE).LT.0.0D0 .OR. EIGLO(INODE).GT.0.0D0))
     2            GOTO 510
                IF (.NOT.UPWARD .AND.
     1              (EIGHI(INODE).GT.0.0D0 .OR. EIGLO(INODE).LT.0.0D0))
     2            GOTO 510
              ENDIF
C
C  START THE VWDB METHOD WITH A POINT EITHER SIDE
C
              IF (EIGHI(INODE)*EIGLO(INODE).GE.0.0D0) THEN
                IF (FLDHI(INODE)-FLDLO(INODE).GT.100.0D0*DTOL) GOTO 510
                WRITE(6,*) ' *** BISECTION TO FIND ZERO-CROSSING FOR ',
     1                     'NODE',INODE,'HAS FAILED'
                IF (IPRINT.GE.8) THEN
                  WRITE(6,*) ' LATEST VALUES FOR FIELDS AND',
     1                       ' EIGENVALUES ARE',
     2                       FLDLO(INODE),EIGLO(INODE),
     3                       FLDHI(INODE),EIGHI(INODE)
                ENDIF
                GOTO 500
              ENDIF
C
C  EIGENVECTOR FOR SMALLEST EIGENVALUE IN CURRENT SEARCH IS STORED AT
C  POSITION IVSMLL (WHICH IS THE SAME AS IVLO - EVECS AT RANGE ENDPOINTS
C  ARE NO LONGER NEEDED FOR THE CURRENT NODE)
C
              IVSMLL=ISVLO+(INODE-1)*N
              IF (ABS(EIGHI(INODE)).LT.ABS(EIGLO(INODE))) THEN
                FLDNOW=FLDHI(INODE)
                EIGNOW=EIGHI(INODE)
                ESMALL=EIGNOW
                ISMALL=IHI(INODE)
                IVHI=ISVHI+(INODE-1)*N
                CALL DCOPY(N,X(IVHI),1,X(IVSMLL),1)
                FLDLST=FLDLO(INODE)
                EIGLST=EIGLO(INODE)
              ELSE
                FLDNOW=FLDLO(INODE)
                EIGNOW=EIGLO(INODE)
                ESMALL=EIGNOW
                ISMALL=ILO(INODE)
                FLDLST=FLDHI(INODE)
                EIGLST=EIGHI(INODE)
              ENDIF

              IF (IPRINT.GE.7) CALL PRBEND('VWDB METHOD')

              DLAST=1.0D30

              XA=FLDLST
              XB=FLDNOW
              FA=EIGLST
              FB=EIGNOW
              FC=FA
              XC=XA
              IF (IPRINT.GE.7) CALL PRVWST(XA,XB,FA,FB,SVUNIT)
              CONVGE=.FALSE.
              DO 600 ITER=1,NITER
C
C  CALCULATE THE NEXT FIELD USING THE VWDB ALGORITHM
C
                SV1=XA
                SV2=XB
                SV3=XC
                FLDNEW=BRENT(XA,XB,XC,FA,FB,FC,ITER.EQ.1,DTOL,CONVGE,
     1                       METHOD)
                IF (IPRINT.GE.7) CALL PRVWDB(SV1,SV2,SV3,SVNAME,SVUNIT,
     1                                       METHOD,FLDNEW)
                DE=FLDNEW-XB

                NCALC=NCALC+1
                IF (NCALC.GT.MXCALC) THEN
                  NFOUND=INODE-1
                  GOTO 390
                ENDIF

                CALL SETEFV(FIELD,FLDNEW)
C
C  CALL CHEINT OR YTRANS TO GET EINT FOR THIS FIELD
C
                IF (NCONST.EQ.0 .AND. NDGVL.GT.0) THEN
                  CALL CHEINT((ISEINT),X(ISDGVL),N,OLDFAC,CINT)
                  IF (IPRINT.GE.10)
     1              CALL THRLST(N,X(ISEINT),X(ISCENT),CINT,X(ISL),
     2                          IBOUND,EUNIT,EUNAME)
                ENDIF

                IF (NCONST.GT.0 .OR. NRSQ.GT.0) THEN
                  CALL YTRANS(X(ISYOUT),X(ISU),X(ISEINT),X(ISWVEC),
     1                        X(ISJIND),X(ISL),N,X(ISP),X(ISVL),X(ISIV),
     2                        MXLAM,NPOTL,ERED,RMLMDA,DEGTOL,NOPEN,
     3                        IBOUND,X(ISCENT),IPRINT,.FALSE.)
                  IF (IPRINT.GE.10)
     1              CALL THRLST(N,X(ISEINT),X(ISCENT),CINT,X(ISL),
     2                          IBOUND,EUNIT,EUNAME)
                  IXNEXT=IC3
                ENDIF
C
C  ADD EREF IF ENERGIES ARE TO BE TREATED AS KINETIC: DEFAULTS TO 0
C
                ETEMP=ENERGY(INRG)*EUNIT
                IF (IREF.NE.0 .OR. MONQN(1).NE.-99999)
     1            CALL THRESH(X(ISEINT),N,CINT,ITYPE,MONQN,NQN,
     2                        NJLQN(ITYP),EREF,X(ISJIND),IPRINT)
                ERED=ETEMP+EREF
                IF (IPRINT.GE.7) CALL EREFMS(EREF,EUNIT,EUNAME,MONQN,
     1                                       NQN)
                IF (IPRINT.GE.8) CALL EABSMS(ERED,EUNIT,EUNAME)
                IF (CONVGE .AND. .NOT.WAVE) EXIT
C
                ERED=ERED*CINT

                CAYS=CALCK(EPS*CINT,ERED,X(ISEINT),N)
                CAYL=CALCK(EPL*CINT,ERED,X(ISEINT),N)
                IF (STEPS.GT.0.D0 .AND. CAYS.EQ.0.D0) THEN
                  WRITE(6,*) ' *** ERROR: EKIN+EPS IS NOT +VE'
                  STOP
                ENDIF
                IF (STEPL.GT.0.D0 .AND. CAYL.EQ.0.D0) THEN
                  WRITE(6,*) ' *** ERROR: EKIN+EPL IS NOT +VE'
                  STOP
                ENDIF

                CALL BDCTRL(N,MXLAM,NPOTL,X(ISYOUT),X(ISYIN),
     1                      X(ISU),X(ISEVEC),X(IDUM),X(ISVL),X(ISIV),
     2                      X(ISEINT), X(ISCENT), X(ISP), NODE, ERED,
     3                      RMLMDA, EIGMIN, .FALSE., IMIN, IPRINT)

                IF (ABS(EIGMIN).LT.ABS(ESMALL)) THEN
C  UPDATE SMALLEST EIGENVALUE, EIGENVECTOR OF SMALLEST EIGENVALUE AND
C  INDEX
                  ESMALL=EIGMIN
                  ISMALL=IMIN
                  CALL DCOPY(N,X(ISEVEC),1,X(IVSMLL),1)
                ENDIF

                IF (IPRINT.GE.6)
     1            CALL PRPRCT(NPROP,SVNAME,FLDNEW,SVUNIT)
                IF (IPRINT.GE.7) CALL PREVAL(NODE,EIGMIN)
                NPROP=NPROP+1
C
                CALL GCLOCK(TITIME)
                TTIME=TITIME-TIMLST
                TIMLST=TITIME
C
                CALL FLUSH(6)
C
                IF (EIGMIN*FA.GT.0.D0) THEN
                  FCOMP=FA
                ELSE
                  FCOMP=FB
                ENDIF
                IF (ABS(EIGMIN).GT.ABS(FCOMP)) THEN
                  IF (ABS(FA).LT.ABS(FB)) THEN
                    FSMALL=FA
                    XSMALL=XA
                  ELSE
                    FSMALL=FB
                    XSMALL=XB
                  ENDIF
                  CALL PRINCR(FLDNEW,SVUNIT,METHOD,EIGMIN,NSEEK,
     1                        FSMALL,XSMALL,CONVGE)
                  GOTO 500
                ENDIF
C
C  SET UP FOR NEXT CYCLE OF BRENT ALGORITHM
C  (CONTRAPOINT (XA,FA) AND CURRENT ITERATE (XB,FB) MUST BRACKET THE ROOT)
                IF (FA*EIGMIN.LT.0.D0) THEN
                  XB=FLDNEW
                  FB=EIGMIN
                ELSE
                  XA=FLDNEW
                  FA=EIGMIN
                ENDIF
C
  600         CONTINUE

              IF (.NOT.CONVGE) THEN
                WRITE(6,*) ' NODE',INODE,'NOT CONVERGED IN',NITER,
     1                     'ITERATIONS'
              ENDIF
C
              CALL SETEFV(FIELD,FLDNEW)
              ZCNTN=FLDNEW.LE.FLDHI(INODE) .AND. FLDNEW.GE.FLDLO(INODE)
              ECM=ERED/CINT-EREF

              IF (IBDSUM.GT.0 .AND. CONVGE)
     1          CALL OUTEFV(NSEEK,ECM,EUNIT,EUNAME,NODE,ZCNTN,IBDSUM)
              IF (IPRINT.GE.1)
     1          CALL PRCONV(NSEEK,SVNAME,FLDNEW,SVUNIT,NODE,ZCNTN,
     2                      CONVGE,METHOD)
              IF (IPRINT.GE.6) CALL PRLAST(DE,SVUNIT)
              IF (IPRINT.GE.8) CALL PRLOC(TITIME-TNTIME)

              EVAL(INODE,1)=FLDNEW
C
cINOLLS include 'field/pvmdat8.f'
C
              NCHECK(INODE)=NSEEK
C
              IF (WAVE) THEN
                CALL WVINFO(JTOT,IB,NSEEK,N,NQN,NSTATE,X(IXJSTT),
     1                      X(ISJIND),X(ISL),ERED/CINT,EREF,EUNIT,
     2                      EUNAME)
              ENDIF
              IF (IPRINT.GE.5 .OR. WAVE) THEN

                CALL EVMTCH(X(IVSMLL),ESMALL,ISMALL,X(IXJSTT),X(ISL),
     2                      X(ISJIND),N,NSTATE,NQN,IPRINT,WAVE)
              ENDIF
C
C  END OF BOUND-STATE LOCATION SECTION
C ===========================================================================
C
C  IF WAVEFUNCTIONS REQUIRED REPEAT FINAL PROPAGATION TO SAVE
C  NECESSARY INFORMATION
C
              IF (WAVE) THEN
C
C  WRITE OUT HEADER FOR THIS WAVEFN
C
                IF (IPRINT.GE.11) WRITE(6,2580) IPSISC
 2580           FORMAT(' WAVEFUNCTIONS REQUESTED, REPEAT LAST ',
     1                 'PROPAGATION LOOP WRITING OUT NECESSARY ',
     2                 'INFORMATION ON CHANNEL ',I2)
                IREAD=IWRITE
                IWRITE=.FALSE.
C
C  ALLOCATE STORAGE FOR SUMPSI
                ITSUMP=IC3          ! SUMPSI
                IXNEXT=ITSUMP+N
                CALL CHKSTR(NUSED)

                CALL BDCTRL(N,MXLAM,NPOTL,X(ISYOUT),X(ISYIN),
     1                      X(ISU),X(ISEVEC),X(ITSUMP),X(ISVL),X(ISIV),
     2                      X(ISEINT), X(ISCENT), X(ISP), NODE, ERED,
     3                      RMLMDA, EIGMIN, .TRUE., IMIN, IPRINT)
C
                CALL GCLOCK(TITIME)
                TTIME=TITIME-TIMLST
                TIMLST=TITIME
                IXNEXT=IC3
              ENDIF
C
  500       CONTINUE

C  RELEASE STORAGE USED FOR STORING EIGENVECTORS OF SMALLEST EIGENVALUES
            IXNEXT=IC2
C
  390       IF (NCALC.GE.MXCALC) THEN
              NNODES=NFOUND
              IF (IPRINT.GE.1) WRITE(6,2390) MXCALC,NFOUND
 2390         FORMAT(/'  *** WARNING. MXCALC =',I5,' REACHED AFTER ONLY'
     1               ,I5,' NODES FOUND.')
            ENDIF
C
C  END OF WAVEFUNCTION CALCULATION
C ============================================================================
C
C  RESET EFVS TO ORIGINAL VALUES
  330       CALL RSTEFV(FIXFLD)
C
  300     CONTINUE
C
C  **********************  END OF LOOP OVER ENERGIES  *********************
C
  200   CONTINUE
C
C  ******************  END OF LOOP OVER SYMMETRY BLOCKS  ****************
C
  100 CONTINUE
C
C  ********************  END OF LOOP OVER JTOT VALUES  ******************
C
C  END OF RUN BOOKKEEPING
C
      IF (WAVE) CLOSE(IPSI)
C
      CALL GCLOCK(TLAST)
      TOTIME=TLAST-TFIRST
C
      CALL CHKSTR(NUSED)

      IF (IPRINT.GE.1) THEN
        WRITE(6,'(/)')
        WRITE(6,1001)
        WRITE(6,1002)
        CALL PROGVS(PDATE)
        CALL TIMEMS(TOTIME,NUSED,MXSAVE)
        WRITE(6,1001)
      ENDIF

      IF (LASTIN.EQ.0) GOTO 10

 999  CONTINUE
C
C     include statements to pack and send results to master
C
cINOLLS include 'all/pvmdat4.f'
C
      RETURN
      END
