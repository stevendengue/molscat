      SUBROUTINE LOCPOL(JFIELD,FLDNOW,SCLNOW,SLIMAG,FLDNXT,DTOL,
     &                  TOLMIN,TOLMAX,IDECAY,IPRINT,LCONT)
C  Copyright (C) 2019 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
      USE sizes, ONLY: MAXSCH
      USE potential, ONLY: RUNAME
      USE efvs

C  SUBROUTINE FOR CONVERGING ON RESONANCES USING SCATTERING LENGTHS.
C  DESCRIBED IN DETAIL IN (arXiv:1708.04661)
C  WRITTEN BY MDF 2017

C
C  ON ENTRY: JFIELD IS THE NUMBER OF THE CALCULATION
C            FLDNOW IS THE FIELD AT WHICH THE LATEST CALCULATION WAS PERFORMED
C            SCLNOW IS THE REAL PART OF THE SCATTERING LENGTH AT FLDNOW
C            SLIMAG IS THE IMAGINARY PART OF THE SCATTERING LENGTH AT FLDNOW
C            DTOL CONTROLS THE CONVERGENCE CRITERION
C            TOLMIN AND TOLMAX CONTROL HOW CLOSE TO THE RESONANCE POINTS ARE
C            ALLOWED TO BE
C            IDECAY DETERMINES HOW INELASTIC DECAY IS TREATED
C            IDECAY=0  THE RESONANCE IS PURELY ELASTIC
C            IDECAY=1  WEAK BACKGROUND INELASTICITY
C            IDECAY=2  FULL TREATMENT OF AN INELASTIC RESONANCE
C            IPRINT IS OBVIOUS
C  ON EXIT:  FLDNXT IS THE NEXT FIELD AT WHICH A CALCULATION SHOULD BE PERFORMED
C            IF SEARCH IS TO STOP, LCONT IS SET TO FALSE.

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)

C  MAXSCH IS SET IN MODULE SIZES
      DIMENSION FIELDS(MAXSCH),SCLENS(MAXSCH),SCLNRE(MAXSCH),
     1          SCLNIM(MAXSCH)

      LOGICAL LCONT
      CHARACTER(100) F104,F105,C130,C140,C150,TDELTA,TABG,CGAMMA
      CHARACTER(2)   C1,C2
      CHARACTER(42)  TSVNAM
      INTEGER        POS1,POS2,POS3,POS5,POS6

      DIMENSION IFIELD(3)

      SAVE FIELDS,SCLENS,SCLNRE,SCLNIM,IMIN,IMID,IMAX,ABG,B0,DELTA,OLD,
     1     F104,F105,C130,C140,C150,TDELTA,TABG,TSVNAM
      LOGICAL OLD,BETWEN

      BETWEN(D,T)=ABS(D).GE.T .AND. ABS(D).LE.2.D0*T


      IF (JFIELD.GT.MAXSCH) THEN
        WRITE(6,*) ' *** ARRAY LENGTHS IN LOCPOL NOT ADEQUATE. ',
     1             'INCREASE MAXSCH IN MODULE SIZES'
        STOP
      ENDIF

      FIELDS(JFIELD)=FLDNOW
      SCLNRE(JFIELD)=SCLNOW
      SCLNIM(JFIELD)=SLIMAG
      LCONT=.TRUE.

      IF (IDECAY.EQ.0) THEN
        SCLENS(JFIELD)=SCLNOW
      ENDIF

C  INITIALISATION
      IF (JFIELD.EQ.1) THEN
        IMAX=1
        IMID=2
        IMIN=3
        IF (TOLMIN.LT.0.D0) THEN
          WRITE(6,*) ' *** WARNING - TOLMIN IS ASSUMED TO BE >=0'
          TOLMIN=ABS(TOLMIN)
        ENDIF
        IF (TOLMAX.LT.0.D0) THEN
          WRITE(6,*) ' *** WARNING - TOLMAX IS ASSUMED TO BE >=0'
          TOLMAX=ABS(TOLMAX)
        ENDIF
        IF (TOLMIN.GT.TOLMAX) THEN
          WRITE(6,*) ' *** WARNING - ALGORITHM ASSUMES TOLMIN<=TOLMAX'
        ENDIF
        IF (IPRINT.GE.4) WRITE(6,100) TOLMIN,TOLMAX
  100   FORMAT(/'  TOLMIN = ',F8.4,'  TOLMAX = ',F8.4)
        OLD=TOLMIN*TOLMAX.EQ.0.D0

C  SET UP SOME STRINGS FOR NEAT FORMATTING
C
C  L1PAD AND L2PAD ENSURE THAT THE COLUMN TITLE FOR THE SCATTERING LENGTH
C  MATCHES UP WITH THE COLUMN ENTRIES
        LTITLE=LEN(TRIM(SVNAME))+LEN(TRIM(SVUNIT))+1
        LENNUM=16 !WIDTH OF SV NUMBER (G16.9 BELOW)
        LENCOL=MAX(LTITLE,LENNUM)
        L1PAD=2 !MINIMUM SEPARATION BETWEEN COLUMNS
        L2PAD=2
        IF (LENCOL.GT.LTITLE) THEN
          L1PAD=L1PAD+LENCOL-LTITLE
        ELSE
          L2PAD=L2PAD+LENCOL-LENNUM
        ENDIF
        WRITE(C1,'(I2)') L1PAD
        WRITE(C2,'(I2)') L2PAD
        F104="(/'  DATA USED ARE:'/2X,'POINT',3X,A,'/',A,"//
     1       TRIM(C1)//"X,'COMPLEX SCATTERING LENGTH')"
        F105="(1P,(3X,SS,I3,4X,G16.9,"//TRIM(C2)//
     1       "X,E12.5,' ',SP,E12.5,' i '))"

C  C130 CONTAINS THE TEXT:
C       3-POINT POLE FORMULA ESTIMATES ________ SVNAME_RES
C  TDELTA CONTAINS THE TEXT:
C       ____________________________________________ DELTA
C  TABG CONTAINS THE TEXT:
C       _____________________________________________ A_BG
C  C140 CONTAINS THE TEXT:
C       GIVES ______ A_RES
C  C150 CONTAINS THE TEXT:
C       THIS IMPLIES ___ GAMMA_INEL (= -2*A_BG*DELTA/A_RES)
C  (WHERE THE UNDERSCORES ARE PADDING TO MAKE SURE THESE LINE UP)
        C130='3-POINT POLE FORMULA ESTIMATES'
        CGAMMA='GAMMA_INEL (= -2*A_BG*DELTA/A_RES)'
        LEN1=LEN(TRIM(C130))+LEN(TRIM(SVNAME))+LEN('_RES')
        C140='GIVES'
        LEN2=LEN('SCATTERING LENGTH FOR POINT')+4+LEN(TRIM(C140))+
     1       LEN('A_RES')
        C150='THIS IMPLIES'
        LEN3=LEN(TRIM(C150))+LEN(TRIM(CGAMMA))
        LENREQ=MAX(LEN1,LEN2,LEN3)+2
        POS1=LENREQ-LEN('_RES')-LEN(TRIM(SVNAME))
        C130(POS1:)=TRIM(SVNAME)//'_RES'
        POS2=LENREQ-LEN2+LEN(TRIM(C140))
        C140(POS2:)='A_RES'
        POS3=LENREQ-LEN(TRIM(CGAMMA))
        C150(POS3:)=TRIM(CGAMMA)

C  TDELTA AND TABG CONTAIN THE RELEVENT TEXT PADDED OUT WITH SPACES SO
C  THAT THEY END IN THE SAME PLACE AS THE STRINGS ABOVE
        POS5=LENREQ-LEN('DELTA')
        TDELTA=' '
        TDELTA(POS5:)='DELTA'
        POS6=LENREQ-LEN('A_BG')
        TABG=' '
        TABG(POS6:)='A_BG'

C  TSVNAM IS OF THE SAME LENGTH AS THE STRING
C       DELTA (= -ALPHA_RES*GAMMA_INEL/2*ALPHA_BG)
C  SO THAT WHEN PRINTED ADJUSTR, IT ENDS IN THE SAME PLACE
        TSVNAM=TRIM(SVNAME)//'_RES'

C  SECOND POINT
      ELSEIF (JFIELD.EQ.2) THEN
        FLDNXT=(FIELDS(1)+FIELDS(2))/2.D0
        IF (IDECAY.EQ.1) THEN
          ABG=(SCLNRE(1)+SCLNRE(2))/2.D0
          IF (IPRINT.GE.7) WRITE(6,101) ABG,RUNAME
  101     FORMAT('  AVERAGE OF FIRST TWO SCATTERING LENGTHS GIVES FIRST'
     1           ' APPROXIMATION OF A_BG = ',F12.5,1X,A)
        ENDIF
      ENDIF
      IF (JFIELD.LE.2) RETURN

C  MAIN PART OF ALGORITHM
C  ORDER POINTS BY FIELD ORDER
      IFIELD(1)=IMAX
      IFIELD(2)=IMIN
      IFIELD(3)=IMID
      DO I1=1,2
        DO I2=I1+1,3
          IF (FIELDS(IFIELD(I1)).GT.FIELDS(IFIELD(I2))) THEN
            IT=IFIELD(I1)
            IFIELD(I1)=IFIELD(I2)
            IFIELD(I2)=IT
          ENDIF
        ENDDO
      ENDDO
      I1=IFIELD(1)
      I2=IFIELD(2)
      I3=IFIELD(3)

      IF (IDECAY.LT.2) THEN
C  PURE ELASTIC OR WEAKLY DECAYED RESONANCE

        IF (IDECAY.EQ.1) THEN
          DO I=1,3
            SCLENS(IFIELD(I))=SCLNRE(IFIELD(I))+SCLNIM(IFIELD(I))**2/
     1                        (SCLNRE(IFIELD(I))-ABG)
          ENDDO

          IF (IPRINT.GE.7)
     1      WRITE(6,102) ABG,TRIM(RUNAME),
     2                   (IFIELD(I),SCLNRE(IFIELD(I)),SCLNIM(IFIELD(I)),
     3                    SCLENS(IFIELD(I)),TRIM(RUNAME),I=1,3)
  102     FORMAT(/'  USING PREVIOUS VALUE OF A_BG = ',F12.7,1X,A,
     2           ' TO CALCULATE NEW "REGULARISED" SCATTERING LENGTHS',
     3           1P,3(/'  A_',SS,I2.2,' = ',E12.5,1X,SP,E12.5,' i ',
     4                ' GIVES   A_REGULARISED = ',E12.5,1X,A)/)
        ENDIF

        CALL POLEQN(FIELDS(I1),SCLENS(I1),FIELDS(I2),SCLENS(I2),
     1              FIELDS(I3),SCLENS(I3),ABG,B0,DELTA)

        IF (IPRINT.GE.4)
     1    WRITE(6,130) TRIM(C130),B0,TRIM(SVUNIT),
     2                 TRIM(TDELTA),DELTA,TRIM(SVUNIT),
     3                 TRIM(TABG),ABG,RUNAME
  130   FORMAT(2X,A,' = ',1PG16.9,
     1         1X,A,/2X,A,' = ',1PG16.9,1X,A,/
     2               2X,A,' = ',G16.9,1X,A/)

      ELSEIF (IDECAY.EQ.2) THEN
C  STRONGLY DECAYED RESONANCE
        IF (IPRINT.GE.7) THEN
          WRITE(6,FMT=F104) TRIM(SVNAME),TRIM(SVUNIT)
          WRITE(6,FMT=F105) (IFIELD(I),FIELDS(IFIELD(I)),
     1                       SCLNRE(IFIELD(I)),SCLNIM(IFIELD(I)),I=1,3)
        ENDIF
  104   FORMAT(/'  DATA USED ARE:'/2X,'POINT',3X,A,'/',A,2X,
     1         'COMPLEX SCATTERING LENGTH')
  105   FORMAT(3(/3X,SS,I3,3X,0PF12.5,20X,1PE12.5,' ',SP,E12.5,' i '))

        CALL DECAY_FIT(FIELDS(I1),SCLNRE(I1),-SCLNIM(I1),
     1                 FIELDS(I2),SCLNRE(I2),-SCLNIM(I2),
     2                 FIELDS(I3),SCLNRE(I3),-SCLNIM(I3),
     3                 B0,ALPHA_BG,BETA_BG,ALPHA_RES,BETA_RES,
     4                 GAMMA_INEL)
        DELTA=-0.5D0*GAMMA_INEL*ALPHA_RES/ALPHA_BG

        IF (IPRINT.GE.4)
     1    WRITE(6,106) ADJUSTR(TSVNAM),B0,TRIM(SVUNIT),
     3                 TRIM(RUNAME),ALPHA_BG,-BETA_BG,
     4                 TRIM(RUNAME),ALPHA_RES,-BETA_RES,
     5                 GAMMA_INEL,TRIM(SVUNIT),
     6                 DELTA,TRIM(SVUNIT)
  106     FORMAT(/'  PARAMETERS OBTAINED ARE:'/,
     1           2X,A,' = ',G16.9,1X,A/,
     2           29X,'A_BG  (IN ',A,') = ',1P G16.9,' ',SP,G16.9,' i '/
     3           29X,'A_RES (IN ',A,') = ',SS,G16.9,' ',SP,G16.9,' i '//
     4           34X,'GAMMA_INEL = ',SS,G16.9,X,A/,
     5           2X,'DELTA (= -ALPHA_RES*GAMMA_INEL/2*ALPHA_BG)',
     6           ' = ',G16.9,X,A)
        IF (ABS(GAMMA_INEL).GT.ABS(DELTA)) THEN
          IF (IPRINT.GE.6) WRITE(6,107)
  107     FORMAT('  USING GAMMA_INEL IN PLACE OF DELTA TO CONTROL'
     1           ' CONVERGENCE PROCEDURE'/)
          DELTA=GAMMA_INEL
        ELSE
          IF (IPRINT.GE.6) WRITE(6,108)
  108     FORMAT('  USING DELTA TO CONTROL CONVERGENCE PROCEDURE'/)
        ENDIF
      ENDIF


C  LOGIC FOR CHOOSING NEXT POINT, DESCRIBED IN ARXIV:1708.04661
C  FIRST, SORT 3 EXISTING POINTS
      DMIN=(B0-FIELDS(IMIN))/DELTA
      DMID=(B0-FIELDS(IMID))/DELTA
      DMAX=(B0-FIELDS(IMAX))/DELTA

      IF (ABS(DMAX).LT.ABS(DMID) .AND. .NOT.OLD) THEN
        TMP=IMAX
        IMAX=IMID
        IMID=TMP
        DMID=(B0-FIELDS(IMID))/DELTA
        DMAX=(B0-FIELDS(IMAX))/DELTA
      ENDIF
      IF (ABS(DMID).LT.ABS(DMIN) .AND. .NOT.OLD) THEN
        TMP=IMID
        IMID=IMIN
        IMIN=TMP
        DMID=(B0-FIELDS(IMID))/DELTA
        DMIN=(B0-FIELDS(IMIN))/DELTA
      ENDIF
      IF (ABS(DMAX).LT.ABS(DMID) .AND. .NOT.OLD) THEN
        TMP=IMAX
        IMAX=IMID
        IMID=TMP
        DMID=(B0-FIELDS(IMID))/DELTA
        DMAX=(B0-FIELDS(IMAX))/DELTA
      ENDIF

      IF (IDECAY.EQ.1) THEN
        BETA=-SCLNIM(IMIN)
        ALPHA=SCLNRE(IMIN)
        ARES=BETA+(ALPHA-ABG)**2/BETA
        GAMMA_INEL=-2.D0*ABG*DELTA/ARES
        IF (IPRINT.GE.4) WRITE(6,170) IMIN,TRIM(C140),ARES,RUNAME,
     1                                TRIM(C150),GAMMA_INEL,TRIM(SVUNIT)
  170   FORMAT('  SCATTERING LENGTH FOR POINT ',I2,1X,A,' = ',
     1         1PG16.9,1X,A/2X,A,' = ',G16.9,1X,A/)
      ENDIF
      IF (IPRINT.GE.7) WRITE(6,160) DMAX,DMID,DMIN
  160 FORMAT('  DISTANCES FROM RESONANCE SCALED BY DELTA:',
     1       1P,3(1X,G15.5)/)
      SPRED=ABS(FIELDS(I1)-FIELDS(I3))
      IF (ABS(B0-FIELDS(IMIN)).GT.10.D0*SPRED) THEN
        WRITE(6,120) TRIM(SVNAME)
  120   FORMAT('  PREDICTED STEP MORE THAN 10 TIMES ',A,' RANGE'/
     1       '  PROBABLY OSCILLATING SO ABANDON CONVERGENCE')
        LCONT=.FALSE.
        RETURN
      ENDIF
      IF (IDECAY.EQ.0) THEN
C  IF IDECAY=1, CHECK THE RESONANCE ISN'T ACTUALLY DECAYING.
C  USES THE DIFFERENCE BETWEEN THE REAL AND REGULARISED SCATTERING
C  LENGTHS.
        DIFF=SCLNIM(IMIN)**2/(SCLNRE(IMIN)-ABG)
C  THESE CRITERIA HASVEN'T BEEN TESTED, JUST A FIRST GUESS AT THIS STAGE.
        IF (DIFF.GT.MAX(0.1D0*ABS(SCLNRE(IMIN)),1.0D0)) THEN
          WRITE(6,125) DIFF
  125     FORMAT('  PREDICTED CORRECTION DUE TO IMAGINARY PART OF '
     1           'SCATTERING LENGTH IS ',1PG12.5,'. TERMINATING '
     2           'CONVERGENCE.'/
     3           '  RESONANCE IS PROBABLY ACTUALLY DECAYING AND SHOULD '
     4           'BE CHARACTERISED USING IFCONV = 2 OR 3')
          LCONT=.FALSE.
          RETURN
        ENDIF
      ENDIF

C  NOW WE HAVE 3 SORTED POINTS AND THEIR DISTANCES FROM THE RESONANCE.
C
C  DECIDE WHETHER TO CONTINUE, AND IF SO, WHICH POINT TO DISCARD.
C
C  WE ARE AIMING FOR:
C     1 POINT BETWEEN TOLMAX*DELTA AND 2*TOLMAX*DELTA FROM RESONANCE;
C     1 POINT BETWEEN TOLMIN*DELTA AND 2*TOLMIN*DELTA FROM RESONANCE (ON
C        OPPOSITE SIDE);
C     AND 1 POINT AS CLOSE TO THE RESONANCE AS POSSIBLE.
C  LOGIC HERE SHOULD BE CLEAR FROM THE WRITE STATEMENTS
      IF (OLD) THEN
        IMAX=IMID
        IMID=IMIN
        LCONT=ABS(B0-FIELDS(IMIN)).GE.DTOL
      ELSEIF (.NOT.BETWEN(DMAX,TOLMAX)) THEN
        IF (IPRINT.GE.6) WRITE(6,200)
  200   FORMAT('  MOVING POINT FURTHEST FROM THE RESONANCE BECAUSE IT',
     1         ' IS NOT BETWEEN TOLMAX*DELTA AND 2*TOLMAX*DELTA ',
     2         'FROM RESONANCE')
        IMAX=IMID
        DMAX=DMID
        IMID=IMIN
        DMID=DMIN
      ELSEIF (.NOT.BETWEN(DMID,TOLMIN)) THEN
        IF (IPRINT.GE.6) WRITE(6,210)
  210   FORMAT('  MOVING INTERMEDIATE POINT BECAUSE IT IS NOT BETWEEN',
     1         ' TOLMIN*DELTA AND 2*TOLMIN*DELTA FROM RESONANCE')
        IMID=IMIN
        DMID=DMIN
      ELSEIF (DMID*DMAX.GT.0.D0) THEN
        IF (IPRINT.GE.6) WRITE(6,220)
  220   FORMAT('  MOVING INTERMEDIATE POINT BECAUSE IT IS ON THE',
     1         ' SAME SIDE OF THE RESONANCE AS POINT FURTHEST FROM',
     2         ' RESONANCE')
        IMID=IMIN
        DMID=DMIN
      ELSE
        LCONT=ABS(B0-FIELDS(IMIN)).GE.DTOL
        IF (LCONT .AND. IPRINT.GE.6) WRITE(6,230)
  230   FORMAT('  FURTHEST POINT FROM RESONANCE AND INTERMEDIATE POINT',
     1         ' ARE WELL POSITIONED, SO MOVING POINT CLOSEST TO',
     2         ' RESONANCE')
      ENDIF

      IF (.NOT.LCONT) THEN
C  CONVERGENCE CRITERION MET.  END OF CHARACTERISATION
        IF (IPRINT.GE.2) THEN
          IF (OLD) WRITE(6,140)
  140     FORMAT('  NOTE THAT THE ESTIMATED A_BG AND DELTA MAY BE',
     1           ' DOMINATED BY NOISE CLOSE TO RESONANCE')
          WRITE(6,150) TRIM(SVNAME),
     2                 B0,TRIM(SVUNIT),
     4                 B0-FLDNOW,TRIM(SVUNIT)
  150     FORMAT(/'  CONVERGED ON RESONANCE AT ',A,'_RES = ',
     1            1PG16.9,1X,A,', WITH LAST STEP = ',G12.5,1X,A)
        ENDIF
        RETURN

      ELSE
C  CONVERGENCE CRITERION NOT MET.  CHOOSE NEW POINT FOR NEXT CALCULATION.
C
C  NOTE THAT IF EITHER OF TOLMIN OR TOLMAX IS ZERO, THIS REVERTS TO OLD
C  BEHAVIOUR IN WHICH NEXT POINT IS CHOSEN TO BE AT PREDICTED RESONANCE POSITION.
        IF (ABS(DMAX).LT.TOLMAX .AND. .NOT.OLD) THEN
          IF (IPRINT.GE.6) WRITE(6,300) 'TOLMAX'
  300     FORMAT('  PLACING NEW POINT AT 1.5*',A,
     1           '*DELTA FROM RESONANCE')
          IMIN=JFIELD+1
          FLDNXT=B0+1.5D0*TOLMAX*DELTA*SIGN(1.D0,DMAX)
        ELSEIF (ABS(DMID).LT.TOLMIN .AND. .NOT.OLD) THEN
          IF (IPRINT.GE.6) WRITE(6,300) 'TOLMIN'
          IMIN=JFIELD+1
          FLDNXT=B0+1.5D0*TOLMIN*DELTA*SIGN(1.D0,DMAX)
        ELSE
          IF (IPRINT.GE.6) WRITE(6,310)
  310     FORMAT('  PLACING NEW POINT AT PREDICTED RESONANCE POSITION')
          IMIN=JFIELD+1
          FLDNXT=B0
        ENDIF
      ENDIF

      RETURN
      END SUBROUTINE
C --------------------------------------------------------------- END OF LOCPOL
      SUBROUTINE POLEQN(B1,A1,B2,A2,B3,A3,ABG,B0,DELTA)
C  Copyright (C) 2019 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
C
C  SUBROUTINE TO LOCATE A SIMPLE POLE FROM 3 NEARBY POINTS
C  AND RETURN ABG, B0 AND DELTA WHERE
C     A(B) = ABG [ 1 - DELTA / (B-B0) ]
C
C  ON ENTRY: A1, A2 AND A3 ARE THE SCATTERING LENGTHS AT FIELDS B1, B2
C            AND B3 - ALL UNCHANGED ON EXIT.
C  ON EXIT:  ABG, B0 AND DELTA ARE AS DESCRIBED ABOVE.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      RATIO=(B3-B1)/(B2-B1)*(A2-A1)/(A3-A1)
      B0=(B3-B2*RATIO)/(1.D0-RATIO)
      ABGDEL=(B3-B0)*(B1-B0)*(A3-A1)/(B3-B1)
      ABG=A1+ABGDEL/(B1-B0)
      DELTA=ABGDEL/ABG

      RETURN
      END
C
C --------------------------------------------------------------- END OF POLEQN
C
      SUBROUTINE DECAY_FIT(B1,ALPHA1,BETA1,
     1                     B2,ALPHA2,BETA2,
     2                     B3,ALPHA3,BETA3,
     3                     B_RES,ALPHA_BG,BETA_BG,ALPHA_RES,BETA_RES,
     4                     GAMMA_INEL)
C  Copyright (C) 2019 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
C
C  SUBROUTINE TO FIT THREE CALCULATED SCATTERING LENGTHS TO THE EQUATION
C  FOR A DECAYED RESONANCE (NJP 9, 152) AND RETURN THE FITTED PARAMETERS.
C  METHOD DESCRIBED IN (arXiv:1708.04661)
C  WRITTEN BY MDF 2017
C
C  ON ENTRY: B1 IS THE FIELD AT WHICH THE CALCULATED SCATTERING LENGTH
C               IS A1 = ALPHA1 - i * BETA1. SIMILARLY FOR 2 AND 3.
C
C  ON EXIT: B_RES IS THE RESONANCE POSITION,
C           ALPHA_BG AND BETA_BG ARE THE REAL AND IMAGINARY PARTS OF THE
C           BACKGROUND SCATTERING LENGTH,
C           ALPHA_RES AND BETA_RES ARE THE REAL AND IMAGINARY PARTS OF
C           THE RESONANT SCATTERING LENGTH,
C           GAMMA_INEL IS THE INELASTIC WIDTH CHARATERISING THE
C           RESONANCE.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE COMPLEX A1,A2,A3,A_C,A1_REL,A2_REL,A3_REL,ABG_REL,ABG,A_RES
      PI=2.D0*DACOS(0.D0)
      A1=DCMPLX(ALPHA1,-BETA1)
      A2=DCMPLX(ALPHA2,-BETA2)
      A3=DCMPLX(ALPHA3,-BETA3)

C  FIRST, FIND CENTRE OF CIRCLE DEFINED BY 3 POINTS. FOLLOWING EQNS COME
C  FROM SOLVING THE RELEVANT SIMULTANEOUS EQUATIONS.
      A=2.D0*(ALPHA2-ALPHA1)
      B=2.D0*(BETA2-BETA1)
      C=2.D0*(ALPHA3-ALPHA2)
      D=2.D0*(BETA3-BETA2)
      E=ABS(A2)**2-ABS(A1)**2
      F=ABS(A3)**2-ABS(A2)**2
      DET=A*D-B*C
      ALPHA_C=(E*D-B*F)/DET
      BETA_C=(A*F-C*E)/DET
      A_C=DCMPLX(ALPHA_C,-BETA_C)
      A1_REL=A1-A_C
      A2_REL=A2-A_C
      A3_REL=A3-A_C
      R=ABS(A1_REL)

C  NOW CONVERT 3 POINT ON CIRCLE TO ANGLES (FOLLOWING BREIT-WIGNER
C  FUNCTION), THEN ONTO PSEUDO SCATTERING LENGTHS (FOLLOWING SIMPLE POLE).
C  POTENTIAL TO INCLUDE AN ARBITRARY OFFSET ANGLE HERE, BUT I THINK IT
C  WILL BE RARELY NEEDED, IF EVER.
      THETA1=ATAN2(DIMAG(A1_REL),DBLE(A1_REL))
      THETA2=ATAN2(DIMAG(A2_REL),DBLE(A2_REL))
      THETA3=ATAN2(DIMAG(A3_REL),DBLE(A3_REL))
      PSEUDO_A_1=TAN(THETA1/2.D0)
      PSEUDO_A_2=TAN(THETA2/2.D0)
      PSEUDO_A_3=TAN(THETA3/2.D0)

C  SOLVE FOR THE PSEUDO RESONANCE PARAMETERS
      CALL POLEQN(B1,PSEUDO_A_1,B2,PSEUDO_A_2,B3,PSEUDO_A_3,PSEUDO_ABG,
     1            PSEUDO_B_RES,PSEUDO_DELTA)

C  CONVERT BACKGROUND BACK TO ANGLE, AND INTO TRUE A_BG AND A_RES.
      THETA_BG=2.D0*ATAN(PSEUDO_ABG)
      ABG_REL=R*EXP(THETA_BG*DCMPLX(0.0,1.0))
      ABG=A_C+ABG_REL
      A_RES=-2.D0*ABG_REL*DCMPLX(0.0,1.0)

C  GET THETA OF RESONANCE POSITION, CONVERT BACK TO PSEUDO SCATTERING LENGTH
C  AND SOLVE FOR B_RES
      THETA_RES=THETA_BG+PI
      PSEUDO_RES_A=TAN(THETA_RES/2.D0)
      B_RES=PSEUDO_B_RES-PSEUDO_ABG*PSEUDO_DELTA/
     1                  (PSEUDO_RES_A-PSEUDO_ABG)

C  FINALLY, SUBSTITUTE EVERYTHING INTO FULL EQUATION FOR A AND SOLVE FOR
C  GAMMA_INEL
      GAMMA_INEL=2.D0*(B1-B_RES)/(A_RES/(A1-ABG)-DCMPLX(0.0,1.0))
      ALPHA_BG=DBLE(ABG)
      BETA_BG=-DIMAG(ABG)
      ALPHA_RES=DBLE(A_RES)
      BETA_RES=-DIMAG(A_RES)

      RETURN
      END SUBROUTINE
