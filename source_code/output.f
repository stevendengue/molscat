      SUBROUTINE OUTPUT(JTOT, NBASIS, JSINDX, L, INDLEV,
     1                  WVEC, SREAL, SIMAG, AKMAT, RUNIT,
     2                  SCLEN, NOPEN, IB, IBMAX, WGHT, IEXCH,
     3                  INRG, TTIME, ENERGN, EREF, SIGCUR, SIGACC,
     4                  SIGDEG, JSTATE, ISST, JECONV,
     5                  MINJTN, MAXJTN, NSTATE,
     6                  NQN, OTOL, DTOL, IPHSUM, ISIGU, IPARTU, ISAVEU,
     7                  ISIGPR, IRSTRT, ICHAN, TEMP1, CENT,
     8                  EINT, IBOUND, INDUSE, INDACC, LNEVER,
     9                  CINT, JFIELD, IPRINT, LRESRT, PTIME,
     A                  AWVMAX)
C  Copyright (C) 2019 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
      USE efvs
      USE potential
      USE basis_data, ONLY: NLEVEL, ELEVEL, JHALF
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
C
C  FOR MOLSCAT VERSION 14, JUL 1994
C    WITH RESTART (IRSTRT) CAPABILITIES
C
C  ENTRY OUTPUT - PROCESSES S MATRICES TO X-SECTIONS OUTPUTS THEM.
C  ENTRY OUTSIG - (10/92) SEPARATE ENTRY TO UPDATE UNIT(ISIGU)
C                 TO FIX BUG W/ NO BASIS FNS FOR SYMMETRY BLOCK IB=IBMAX
C  ENTRY OUTINT - INITIALIZATION ENTRY FROM DRIVER.
C  ENTRY OUTPCH - PUNCHES FINAL CROSS SECTIONS.
C  ENTRY OUTERR - SETS ERROR FLAG, CALLED ONLY FROM DVSCAT.
C
C  MODIFICATIONS AUG. 74 - - -
C     NSIG IS DIFFERENT FROM NSTATE. FORMER FOR ELEVEL,JLEVEL,
C     AND LATTER FOR JSTATE(NSTATE,NQN).
C     TSIG IS NOW FIRST NSIG*NSIG=NSTOR ELEMENTS OF SIG.
C     DEGENERACY IS IN 2ND NSTOR ELEMENTS OF SIG.
C  NOV 91 -- MULTIPLIES CROSS SECTIONS BY JSTEP (HERE CALLED JTSTEP TO
C            AVOID CONFLICT WITH JSTEP IN CMBASE)
C            NOTE FROM OCT 18: CMBASE -> basis_data
C  JUN 92 -- GIVES UNFORMATTED ISAVEU OUTPUT WITH ONLY
C      NONREDUNDANT S(I,J).  OLDER (FORMATTED) CODE IS SAVED AS
C      COMMENTS TO PROVIDE COMPATIBILITY WITH VERSION 10 AND EARLIER
C      N.B FORMATS 870, 880, 890 ALSO USED FOR IPARTU OUTPUT.
C    SREAL,SIMAG ARE WRITTEN USING A SUBROUTINE SWRITE.
C  JAN 93 -- NEW DYNAMIC MEMORY HANDLING
C  APR 94 -- MODIFED CALLING SEQUENCES, OUTPUT FORMATS
C            ACCOMMODATE NEGATIVE SIG-INDEX, JSTATE((NQN-1)*NSTATE+I)
C  MAR 07 -- MODIFIED TO HANDLE LOOP OVER FIELDS AS WELL AS ENERGIES
C            (WITH NEW CALLING SEQUENCES)
C  MAY 12 -- MODIFIED TO PRINT VOLUME/HYPERVOLUME INSTEAD OF LENGTH FOR L>0
C
C  JAN 18 -- CODE REARRANGED TO ALLOW EARLY RETURN IF CROSS SECTIONS ARE
C            NOT ACCUMULATED
C
      DIMENSION NBASIS(1),JSINDX(1),L(1),INDLEV(1),CENT(1),EINT(1),
     1          WVEC(1),TEMP1(1),SIG(1),
     1          INDUSE(1),INDACC(1),SIGTOT(1)
      DIMENSION SREAL(NOPEN,NOPEN),SIMAG(NOPEN,NOPEN),AKMAT(NOPEN,NOPEN)
      DOUBLE COMPLEX SCATLN,SCLEN
      INTEGER ISST(2),MAXJT(2),MINJT(2),IECONV(2)
      INTEGER NSTATE,JSTATE(1)
      DIMENSION SIGCUR(1),SIGACC(1),SIGDEG(1),ENERGY(1)
      DIMENSION FIELD(1)
      LOGICAL OKEY,LOUT,ACCUM,OPENCH,LWARN,LCURXS,LACCXS,LCURPS,LACCPS,
     1        LLOPEN,LUSE,LNEVER(1),LNEG,LDIAG,LRESRT,PTIME,LWRITE,
     2        LFIRST
      CHARACTER CTIME*9,CDATE*11
      CHARACTER(1)   STAR,SPACE
      CHARACTER(2)   CNC,CH,CX
      CHARACTER(3)   CLEFV,C1,C2,CEFVN,CEFVU
      CHARACTER(4)   C3
      CHARACTER(6)   NAMEL
      CHARACTER(8)   UNAME
      CHARACTER(10)  UTNAME
      CHARACTER(50)  F931,F932,F941,F942
      CHARACTER(50)  F191,F200,F933,F943
      CHARACTER(130) F710,F945
      CHARACTER(90)  F300,F301,F302,F303,F304,F250,F400
      CHARACTER(80)  LABL
      CHARACTER(30)  F241,F242,F243,F244,F842,F843
      CHARACTER(50)  F841
      CHARACTER(110) F844
      CHARACTER(250) F850,F305
      CHARACTER(80)  LABEL
      DATA IBMIN/-1/

C
C     include common block for results to be returned via pvm
C
cINOLLS include 'all/pvmdat1.f'
cINOLLS include 'all/pvmdat11.f'
C
C  COMMON BLOCK FOR RESONANCE SEARCHES
      COMMON /EIGSUM/ EPSM(5)

C  ALTERED TO USE ARRAY SIZES FROM MODULE sizes ON 23-06-17 BY CRLS

C  DYNAMIC STORAGE COMMON BLOCK ...
      COMMON /MEMORY/ MX,IXNEXT,NIPR,IDUMMY,X(1)
C
C  COMMON BLOCK FOR INPUT/OUTPUT CHANNEL NUMBERS
      LOGICAL PSIFMT
      COMMON /IOCHAN/ IPSISC,IWAVSC,IPSI,NWCOL,PSIFMT
C
      DATA STAR/'*'/, SPACE/' '/
      DATA EPS/1.D-20/ ! MLGM 18/01/13
C
      PI=ACOS(-1.D0)
      PI2=2.D0*PI
C
      IRET=0
C
C  SET LOGICAL VARIABLES
      OKEY=JECONV.GE.0
      ACCUM=OKEY .AND. INVERR.LE.0 .AND. ITYPE.NE.8
C
C  BOOKEEPING FOR MINJT AND MAXJT (MINJTN AND MAXJTN ARE THE VALUES FOR
C  THE CURRENT ENERGY AND FIELD)
      IF (MINJTN.EQ.-99999) MINJTN=JTOT
      IF (OKEY .AND. JTOT.GT.MAXJTN .AND. MAXJTN.GE.0)
     &  MAXJTN=JTOT
      LFIRST=JTOT.EQ.MINJTN .AND. IBMIN.EQ.-1
      IF (LFIRST) IBMIN=IB
C
      NTOP=(NQN-1)*NSTATE
      DO I=1,NOPEN
C  CONVERT WVEC TO INVERSE ANGSTROMS
        NB=NBASIS(I)
        WVEC(NB)=WVEC(NB)/RUNIT
      ENDDO

C  PRINT OUT OPEN-CHANNEL BASIS FUNCTIONS AND WAVEVECTORS IN 1/A.
      IF (IPRINT.GE.10) THEN
C       WRITE(6,'(/2X,A)') 'LIST OF OPEN CHANNELS:'
        IF (IBOUND.EQ.0) THEN
          NAMEL='    L '
        ELSE
          NAMEL='<L**2>'
        ENDIF
        IF (LCURXS) THEN
          WRITE(6,100) NAMEL
  100     FORMAT(/'  OPEN CHANNEL',3X,'WVEC (1/ANG.)',4X,'CHANNEL',
     1           7X,A6,3X,'PAIR LEVEL',12X,'PAIR ENERGY (CM-1)')
        ELSE
          WRITE(6,101) NAMEL
  101     FORMAT(/'  OPEN CHANNEL',3X,'WVEC (1/ANG.)',4X,'CHANNEL',
     1           7X,A6,6X,'PAIR ENERGY (CM-1)')
        ENDIF

      ENDIF
      DO I=1,NOPEN
        NB=NBASIS(I)
        IF (LCURXS .AND. .NOT.LRESRT) THEN
          IF (.NOT.LDIAG) THEN
C  FOR NCONST>0 OR NRSQ>0, GETLEV INDEXES THE ELEVEL IT CREATES BY INDLEV
C  AND USES -1 AS A FLAG THAT THE CHANNEL IS NEVER OPEN
C            0 AS A FLAG THAT THERE WAS NO SPACE FOR THE LEVEL
            IF (INDLEV(NB).EQ.-1) THEN
              WRITE(6,*) ' OUTPUT ERROR: CHANNEL ',I,' WAS FLAGGED'//
     1                   'AS NEVER OPEN BY GETLEV BUT IS OPEN IN '//
     2                   'OUTPUT'
              STOP
            ENDIF

C  IF INDLEV HASN'T BEEN USED, HIJACK IT TO PROVIDE INDEX TO SIGMA
          ELSEIF (.NOT.LRESRT) THEN
            INDLEV(NB)=JSTATE(NTOP+JSINDX(NB))
          ENDIF
        ENDIF

        IF (IPRINT.GE.10) THEN
          IF (LCURXS) THEN
            IF (IBOUND.EQ.0) THEN
              WRITE(6,110) I,WVEC(NB),NB,L(NB),INDLEV(NB),
     1                     EINT(NB)/CINT
            ELSE
              WRITE(6,115) I,WVEC(NB),NB,CENT(NB),INDLEV(NB),
     1                     EINT(NB)/CINT
            ENDIF
  110       FORMAT(I12,1P,E18.8,0P,6X,I4,3X,I10,  6X,I4,9X,F19.12)
  115       FORMAT(I12,1P,F18.8,0P,6X,I4,3X,F10.2,6X,I4,9X,F19.12)
          ELSE
            IF (IBOUND.EQ.0) THEN
              WRITE(6,111) I,WVEC(NB),NB,L(NB),EINT(NB)/CINT
            ELSE
              WRITE(6,116) I,WVEC(NB),NB,CENT(NB),EINT(NB)/CINT
            ENDIF
  111       FORMAT(I12,1P,E18.8,0P,6X,I4,3X,I10,  6X,F19.12)
  116       FORMAT(I12,1P,F18.8,0P,6X,I4,3X,F10.2,6X,F19.12)
          ENDIF
        ENDIF
      ENDDO
C
      IF (IPRINT.GE.11) THEN
        IF (ITYPE.EQ.8) THEN
          WRITE(6,120) '   G1   G2'
        ELSE
          WRITE(6,120) '  ROW  COL'
        ENDIF
  120   FORMAT(/A10,7X,'S**2',18X,'PHASE/2PI',14X,'RE (S)',
     1         17X,'IM (S)'  )

        DO 1000 ICOL=1,NOPEN
          LEVC=JSINDX(NBASIS(ICOL))
C  JSINDX(NBASIS(I)) IS STATE NUMBER OF ITH BASIS FUNCTION
          IF ((JSTATE(LEVC).NE.0 .OR. JSTATE(NSTATE+LEVC).NE.0) .AND.
     1        ITYPE.EQ.8) GOTO 1000
          DO 1020 IROW=1,NOPEN
            SR=SREAL(IROW,ICOL)
            SI=SIMAG(IROW,ICOL)
            SMAG=(SR**2+SI**2)
            IF (SMAG.GT.EPS) THEN
              PHASE=ATAN2(SI,SR)/PI2
              IF (ITYPE.EQ.8) THEN
C  SPECIAL CASE FOR SURFACE SCATTERING: WRITE OUT ONE COLUMN ONLY
C  LABELLED BY G VECTORS RATHER THAN CHANNEL NUMBERS
                LEVR=JSINDX(NBASIS(IROW))
                WRITE(6,130) JSTATE(LEVR),JSTATE(NSTATE+LEVR),
     1                       SMAG,PHASE,SR,SI
              ELSE
C  ALL OTHER CASES
                WRITE(6,130) IROW,ICOL,SMAG,PHASE,SR,SI
  130           FORMAT(2I5,4(ES21.13E3,2X))
              ENDIF
            ENDIF
 1020     CONTINUE
 1000   CONTINUE
      ENDIF

C  SAVE S MATRICES ON TAPE (ISAVEU) . . .
C
C  BEGINNING IN VERSION 14 NOPEN IS WITH THE 'HEADER' RECORD
C               VERSION 16 INCLUDES EXTERNAL VARIABLES
      IF (ISAVEU.GT.0 .AND. IRSTRT.EQ.0) THEN
        WRITE(ISAVEU) JTOT,INRG,IB,JFIELD,
     1                ENERGN,(EFV(IEFV),IEFV=0,NEFVP),
     2                EREF,IEXCH,WGHT,NOPEN
        IF (IBOUND.EQ.0) THEN
          WRITE(ISAVEU) (INDLEV(NBASIS(I)),L(NBASIS(I)),
     1                                     WVEC(NBASIS(I)),I=1,NOPEN)
        ELSE
          WRITE(ISAVEU) (INDLEV(NBASIS(I)),CENT(NBASIS(I)),
     1                                     WVEC(NBASIS(I)),I=1,NOPEN)
        ENDIF
        IF (IPHSUM.LE.0) THEN
          WRITE(ISAVEU) ((SREAL(I,J),J=1,I),I=1,NOPEN)
          WRITE(ISAVEU) ((SIMAG(I,J),J=1,I),I=1,NOPEN)
        ELSE
          WRITE(ISAVEU) (SREAL(I,I),SIMAG(I,I),I=1,NOPEN)
          WRITE(ISAVEU) ((AKMAT(I,J),J=1,I),I=1,NOPEN)
        ENDIF
      ENDIF

C  RESTORE WVEC TO UNITS OF 1./RUNIT
      DO I=1,NOPEN
        WVEC(NBASIS(I))=WVEC(NBASIS(I))*RUNIT
      ENDDO

C  SECTION TO CALCULATE SCATTERING LENGTHS/VOLUMES ADDED SEPT 06
C  THIS USES EXACT EXPRESSION A=(1/IK)*(1-S)/(1+S)
C  FROM J. M. HUTSON, NEW J PHYS 9, 152 (2007),
C  GENERALISED TO A**M=(1/I*K**M)*(1-S)/(1+S)
C  WHERE M = MIN(4,2*LL+1).
C  M WOULD NEED TO BE CHANGED IF THE LONG-RANGE POWER IS NOT -6
C
C  CODE MOVED INTO SUBROUTINE DECEMBER 2017
C
      CALL CALCA(NOPEN,NBASIS,L,WVEC,SREAL,SIMAG,AWVMAX,
     1           SCLEN,ICHAN,IPRINT)

      IF (IPHSUM.GT.0) THEN
        ESUM=EPSUM(AKMAT,NOPEN,TEMP1)
        IS=INRG-5*((INRG-1)/5)
        EPSM(IS)=ESUM

        IF (IPRINT.GE.1) WRITE(6,230) ESUM
  230   FORMAT(/'  S-MATRIX EIGENPHASE SUM, EPSUM/PI =',F9.5)

        IF (ICHAN.GT.0) THEN
          DD=WVEC(NBASIS(ICHAN))
          LL=L(NBASIS(ICHAN))
          IPOW=MIN(4,2*LL+1)
        ENDIF

C  THE FORMAT STRING F250 IS BUILT IN OUTINT USING THE SAME TYPE OF LOGIC
C  AS BELOW
        IF (IFCONV.NE.0) THEN
C  WRITE THE SINGLE EFV, THE EIGENPHASE SUM AND THE SCATTERING LENGTH
          WRITE(IPHSUM,FMT=F250) JTOT,IB,NOPEN,INRG,ENERGN,
     1                           EFV(ISVEFV),ESUM,
     2        ICHAN,LL,IPOW,DD,DBLE(SCLEN),IMAG(SCLEN)

        ELSEIF (ICHAN.GT.0) THEN
C  WRITE ALL THE EFVS (THERE CAN BE NONE HERE), THE EIGENPHASE SUM AND
C  THE SCATTERING LENGTH
          WRITE(IPHSUM,FMT=F250) JTOT,IB,NOPEN,INRG,ENERGN,
     1                           (EFV(LISTFV(I)),I=1,NNZRO),ESUM,
     2                           ICHAN,LL,IPOW,DD,
     3                           DBLE(SCLEN),IMAG(SCLEN)

        ELSE
C  WRITE ALL THE EFVS (THERE CAN BE NONE HERE) AND THE EIGENPHASE SUM
          WRITE(IPHSUM,FMT=F250) JTOT,IB,NOPEN,INRG,ENERGN,
     1                           (EFV(LISTFV(I)),I=1,NNZRO),ESUM
        ENDIF

        IF (ISAVEU.GT.0 .AND. IRSTRT.EQ.0) WRITE(ISAVEU) ESUM
      ENDIF

C  FROM THIS POINT THE CODE IS CONCERNED WITH CALCULATING CROSS SECTIONS
      IF (.NOT.LCURXS) RETURN

C
C  PROCESS S-MATRIX: ACCUMULATE X-SECTIONS IN SIGACC; PRINT.
C  CLEAR SIGCURR FIRST.
C
      DO I=1,NSTOR
        SIGCUR(I)=0.D0
      ENDDO
C
C  CALCULATE GLOBAL MULTIPLICATIVE FACTOR FOR X-SECTIONS.
C  JHALF=2 IF JTOT IS TWICE THE REAL (HALF-INTEGER) TOTAL ANG MOM
C       =1 FOR THE USUAL INTEGER CASE
C       =0 IS A SPECIAL FLAG IF THE JTOT LOOP IS USED FOR
C          SOMETHING ELSE, E.G. MTOT WITH AN APPLIED FIELD
C
      IF (JHALF.EQ.0) THEN
        XJ=PI
      ELSEIF (JHALF.EQ.1) THEN
        XJ=DBLE(2*JTOT+1)*PI
      ELSEIF (JHALF.EQ.2) THEN
        XJ=DBLE(JTOT+1)*PI
      ENDIF
      IF (WGHT.GT.0.D0) XJ=XJ*WGHT
      IF (ITYPE.EQ.8) XJ=1.D0
C
      DO 2000 ICOL=1,NOPEN
        LCOL=INDLEV(NBASIS(ICOL))
        IF (LCOL.EQ.0) CYCLE
C
C       HERE NEGATIVE LCOL IS A IMPLIES JI (JF) .GT. JZCSMX
C
        IF (LCOL.GT.0) THEN
          CS1=1.D0
        ELSE
          CS1=-1.D0
          LCOL=-LCOL
        ENDIF

      DO 2000 IROW=1,NOPEN
        LROW=INDLEV(NBASIS(IROW))
        IF (LROW.EQ.0) CYCLE
        SR=SREAL(IROW,ICOL)
        SI=SIMAG(IROW,ICOL)
        SMAG=SR**2+SI**2
C
C  LCOL (LROW) < 0 IMPLIES JI (JF) .GT. JZCSMX
C  IF BOTH NEGATIVE, INDICATE BY NEGATIVE SIGMA
        CSF=1.D0
        IF (LROW.LT.0) THEN
          LROW=-LROW
          IF (CS1.LT.0.D0) CSF=-1.D0
        ENDIF
C
        IF (LROW.LE.NSIG .AND. LCOL.LE.NSIG) THEN
          DD=WVEC(NBASIS(IROW))**2/RUNIT**2
          IF (IROW.EQ.ICOL) THEN
C  FOR IROW = ICOL,  CALCULATE  T = 1 - S.
            SMAG=(1.D0-SR)**2+SI**2
          ENDIF
C  II IS INDEX OF SIG(ICOL,IROW).  N.B. JSTATE(LEV,NQN) HAS POINTER
C  TO 'SERIAL' NUMBER OF 'LEVEL'.
          II=(LROW-1)*NSIG+LCOL
C  ACCOUNT FOR K(J,J), DEGEN. LATTER IN SIG(NSTOR+II).
          SIGCUR(II) = SIGCUR(II) + CSF * SMAG*XJ/(SIGDEG(II)*DD)
        ENDIF
 2000 CONTINUE

      IF (ISIGPR.GT.0 .AND. IPRINT.GE.3) THEN

C  BUILD A LIST OF ENTRIES IN CROSS SECTION MATRIX THAT ARE DUE
C  TO CURRENT SET OF CHANNELS
        IUSE=0
        DO IOPEN=1,NOPEN
          ILVL=INDLEV(NBASIS(IOPEN))
          IF (.NOT.LDIAG) ILVL=MAX(ILVL,0)
          ILVL=ABS(ILVL)
          IF (ILVL.GT.0) THEN
            LUSE=.FALSE.
            DO JUSE=1,IUSE
              IF (ILVL.EQ.INDUSE(JUSE)) LUSE=.TRUE.
            ENDDO
            IF (.NOT.LUSE .AND. ENERGN+EREF.GT.ELEVEL(ILVL)) THEN
              IUSE=IUSE+1
              INDUSE(IUSE)=ILVL
            ENDIF
          ENDIF
        ENDDO

C  SORT THE LIST
        DO I=1,IUSE-1
          DO J=I+1,IUSE
            IF (INDUSE(I).GT.INDUSE(J)) THEN
              ITMP=INDUSE(I)
              INDUSE(I)=INDUSE(J)
              INDUSE(J)=ITMP
            ENDIF
          ENDDO
        ENDDO

        WRITE(6,1900)
 1900   FORMAT(/2X,10('* '),' STATE-TO-STATE PARTIAL CROSS SECTIONS ',
     1         '(ANGSTROM**2) FROM LEVEL I TO LEVEL F ',10(' *'))
        IF (NEFV.GT.0 .OR. (NEFV.EQ.0 .AND. ISVEFV.EQ.0)) THEN
          WRITE(6,190) JTOT,IB,JFIELD,INRG,ENERGN,'CM-1'
        ELSE
          WRITE(6,192) JTOT,IB,INRG,ENERGN,'CM-1'
        ENDIF
  190   FORMAT(14X,'FOR JTOT = ',I3,' AND SYMMETRY BLOCK = ',I3,
     1             ' AND EFV SET = ',I3,
     2             ' AT ENERGY(',I3,') =',1P,G14.7,1X,A)
  192   FORMAT(23X,'FOR JTOT = ',I3,' AND SYMMETRY BLOCK = ',I3,
     1              ' AT ENERGY(',I3,') =',1P,G14.7,1X,A)

        NCOLS=6
        NCOLS=MIN(NCOLS,10) ! OR CHANGE 10 TO HIGHER VALUE IN FORMAT
                            ! STATEMENTS BELOW

  200   FORMAT(/4X,'F',2X,'I =',10(4X,I3,8X))
  201   FORMAT( 2X,I3, 5X,   1P,10(E13.5,2X))
  202   FORMAT(/2X,60('* '))

        DO ISET=1,(IUSE-1)/NCOLS+1
          WRITE(6,200) (INDUSE(I),I=(ISET-1)*NCOLS+1,
     1                              MIN(ISET*NCOLS,IUSE))
          DO I=1,IUSE
            IT=INDUSE(I)
            WRITE(6,201) IT,(ABS(SIGCUR((INDUSE(II)-1)*NSIG+IT)),
     1                       II=(ISET-1)*NCOLS+1,MIN(ISET*NCOLS,IUSE))
          ENDDO
        ENDDO
      ENDIF

      II=0
      XII=0.D0
      XIJ=0.D0
      DO JI=1,NSIG
        DO I=1,NSIG
          II=II+1
          IF (JI.NE.I) THEN
            XIJ=MAX(XIJ,ABS(SIGCUR(II)))
          ELSE
            XII=MAX(XII,ABS(SIGCUR(II)))
          ENDIF
        ENDDO
      ENDDO

C  FROM THIS POINT THE CODE IS CONCERNED WITH ACCUMULATING CROSS SECTIONS
      IF (.NOT.LACCXS) RETURN
C
C  ACCUMULATE X-SECTIONS.
C
      IF (ACCUM) THEN
        II=0
        DO 3000 JI=1,NSIG
        DO 3000 I=1,NSIG
          II=II+1
          SIGACC(II)=SIGACC(II)+SIGCUR(II)
 3000   CONTINUE
C
      ELSEIF (.NOT.ACCUM) THEN

C  CODE BELOW IS REACHED IF SIGMA NOT ACCUMULATED. . .
        IF (ITYPE.EQ.8) GOTO 4000

        IF (OKEY) THEN
 3300     WRITE(6,140) INVERR
  140     FORMAT('  ****** SIGMA NOT ACCUMULATED BECAUSE OF MATRIX ',
     1           'INVERSION ERROR',I4)
          IF (ISAVEU.GT.0) WRITE(6,150)
  150     FORMAT('  ****** SCATTERING MATRIX NOT SAVED')
          GOTO 4000
        ENDIF

        WRITE(6,160)
  160   FORMAT('  ****** SIGMA NOT ACCUMULATED DUE TO LACK OF ',
     1         'CONVERGENCE IN THIS OR PREVIOUS CALCULATION.')
        IF (ISAVEU.GT.0) WRITE(6,150)
        MAXJTN=-ABS(MAXJTN)
        JECONV=MIN(JECONV-1,-1)
        GOTO 4000
      ENDIF
C
C
C  BELOW REACHED IF SIGMA ACCUMULATED.  OUTPUT, SAVE ON TAPE, DISK.
C
 3200 IF (IPRINT.EQ.1 .OR. IPRINT.GE.3) THEN
        IF (NEFV.GT.0 .OR. (NEFV.EQ.0 .AND. ISVEFV.EQ.0)) THEN
          WRITE(6,171) JTOT,IB,JFIELD,INRG,ENERGN,XII,XIJ
        ELSE
          WRITE(6,170) JTOT,IB,INRG,ENERGN,XII,XIJ
        ENDIF
      ENDIF
  170 FORMAT(/'  FOR JTOT =',I5,', SYMMETRY BLOCK =',I3,
     1        ', ENERGY(',I3,') =',1P,G14.7,
     2        ': MAX DIAG & OFF-DIAG =',E10.2,' & ',E10.2)
  171 FORMAT(/'  FOR JTOT =',I5,', SYMMETRY BLOCK =',I3,
     1        ', EFV SET = ',I3,', ENERGY(',I3,') =',1P,G14.7,':',
     2       /'  MAX DIAG & OFF-DIAG =',E10.2,' & ',E10.2)
 1700 FORMAT(/'  FOR ENERGY(',I3,') =',1P,G14.7,
     2        ': MAX DIAG & OFF-DIAG =',E10.2,' & ',E10.2)
 1710 FORMAT(/'  FOR EFV SET = ',I3,', ENERGY(',I3,') =',1P,G14.7,':',
     2        '  MAX DIAG & OFF-DIAG =',E10.2,' & ',E10.2)
      IF (IPRINT.GE.3 .AND. PTIME) WRITE(6,180) TTIME
  180 FORMAT(2X,'TIME =',F8.2)
C
C  EXTRA RESTRICTIONS ON PRINTING SO THAT RUNNING TOTAL IS NOT PRINTED
C  AT FIRST CALL TO OUTPUT, AND ONLY PRINTED FOR THE LAST SYMMETRY BLOCK
      IF (ISIGPR.GT.0 .AND. IPRINT.GE.11 .AND. .NOT.LFIRST .AND.
     1    IB.EQ.IBMAX) THEN

        WRITE(6,210) MINJTN,JTOT
  210   FORMAT(/2X,10('* '),'STATE-TO-STATE INTEGRAL CROSS SECTIONS: ',
     1         'ACCUMULATED FROM JTOT = ',I3,' TO ',I3,1X,10(' *'))
        ISTART=(INRG+1)*NSTOR
C
        IF (JHALF.EQ.0) THEN
          XJS=1.D0
        ELSE
          XJS=DBLE(JTSTEP)/DBLE(JHALF)
          IF (JTSTEP.NE.1) WRITE(6,220) XJS
  220     FORMAT(40X,'MULTIPLIED BY ',F5.1,' TO ACCOUNT FOR JSTEP.')
        ENDIF
C
        IUSE=0
        DO IACC=1,MIN(NLEVEL,NSIG)
          IF (.NOT.LNEVER(IACC)) THEN
            IUSE=IUSE+1
            INDACC(IUSE)=IACC
          ENDIF
        ENDDO

        DO ISET=1,(IUSE-1)/NCOLS+1
          WRITE(6,200) (INDACC(I),I=(ISET-1)*NCOLS+1,
     1                              MIN(ISET*NCOLS,IUSE))
          DO I=1,IUSE
            IT=INDACC(I)
            WRITE(6,201) IT,(ABS(SIGACC((INDACC(II)-1)*NSIG+IT))*XJS,
     1                       II=(ISET-1)*NCOLS+1,MIN(ISET*NCOLS,IUSE))
          ENDDO
        ENDDO
      ENDIF

C  JECONV COUNTS THE NUMBER OF CONSECUTIVE TIMES THE MAXIMUM DIAGONAL AND
C  OFF-DIAGONAL CONTRIBUTIONS ARE LESS THAN DTOL AND OTOL (RESPECTIVELY)
C  FOR THE CURRENT ENERGY AND FIELD
      IF (XII.LE.DTOL .AND. XIJ.LE.OTOL) THEN
        JECONV=JECONV+1
      ELSE
        JECONV=MIN(JECONV,0)
      ENDIF

      CONTINUE
      GOTO 4000
C =============================================================================
C  ENTRY TO ALLOW UPDATING OF SIG() ON UNIT ISIGU
C  IN CASE THERE ARE NO BASIS FNS FOR SYMMETRY BLOCK IB=IBMAX.
C
      ENTRY OUTSIG(ISIGU,IB,IBMAX,INRG,ENERGN,MINJTN,MAXJTN,SIGACC,
     1             IPRINT)

C  THIS CODE IS ONLY USED FOR ACCUMULATING CROSS SECTIONS
      IF (.NOT.LACCXS) RETURN
      IRET=1
C
C  UPDATE DISK (ISIGU) RECORD IF THIS IS THE LAST SYMMETRY BLOCK
 4000 IF (LOUT .AND. IB.EQ.IBMAX) THEN
        XJS=JTSTEP
        IJ=0 !(INRG+1)*NSTOR
        I10=ISST(INRG)
        DO 4100 I=1,NSIG
        DO 4100 II=1,NSIG
          IJ=IJ+1
C  I10 IS INCREMENTED BY ASSOCIATED VARIABLE HERE.
          IF (SIGACC(IJ).GE.0.D0) THEN

C  (NOTE THE FORMAT STRINGS F400 AND F305 WERE BUILT IN OUTINT)
            WRITE(ISIGU,FMT=F400,REC=I10) STAR,ENERGN,
     1                                   (EFV(IEFV),IEFV=IEFVST,NEFVP),
     1      MINJTN,JTSTEP,MAXJTN,II,I,SIGACC(IJ)*XJS,SPACE
          ELSE
            WRITE(ISIGU,FMT=F400,REC=I10) STAR,ENERGN,
     1                                   (EFV(IEFV),IEFV=IEFVST,NEFVP),
     2      MINJTN,JTSTEP,MAXJTN,II,I,ABS(SIGACC(IJ))*XJS,STAR
          ENDIF
          I10=I10+1
 4100   CONTINUE

        IF (IPRINT.GE.2) THEN
          WRITE(6,FMT=F305) ISIGU,INRG,ENERGN,
     1                      (TRIM(EFVNAM(IEFV)),EFV(IEFV),
     2                       TRIM(EFVUNT(IEFV)),IEFV=IEFVST,NEFVP),
     3                      JTOT,IB
        ENDIF
      ENDIF
      IF (IRET.EQ.1) RETURN
C
C  NOTE CODE BELOW (WRITING TO IPARTU) IS NOT CURRENTLY ACCESSED BECAUSE
C  IRET IS HARD CODED TO 1.
C  NO ATTEMPT HAS BEEN MADE TO KEEP THIS UP TO DATE.
      IF (IPARTU.GT.0) THEN
        WRITE(IPARTU,310) JTOT,IB,INRG,ENERGN,
     1                     (EFV(IEFV),IEFV=IEFVST,NEFVP)
  310   FORMAT(3I5,G20.5,(G13.5))
        DO I=1,NSIG
          WRITE(IPARTU,320) (SIGCUR((II-1)*NSIG+I),II=1,NSIG)
  320     FORMAT(5G14.6)
        ENDDO
      ENDIF
C
      INVERR=0

      RETURN
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * END OF OUTSIG
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * END OF OUTPUT
C
C  INITIALIZATION ENTRY.
C
      ENTRY OUTINT(LABEL,ENERGY,EFACT,NNRG,NFIELD,NSTATE,NQN,JSTATE,
     1             SIG,IECONV,URED,ITYP,IPHSUM,ISST,MINJT,MAXJT,
     2             ISIGU,IPARTU,ISAVEU,IPROGM,MXSIG,ISIGPR,JST,IRSTRT,
     3             ILDSVU,LCURPS,LACCPS,NLEVS,ICHAN,IFCNPS,IBOUND,
     4             IPRINT)
C
      EF=EFACT
      LCURXS=LCURPS ! VARIABLES COPIED SO THEY CAN BE SAVED
      LACCXS=LACCPS
      IFCONV=IFCNPS
      LDIAG=(NCONST.EQ.0 .AND. NRSQ.EQ.0)
C
      LENEFV=MAX(NEFVP-IEFVST+1,0)
      WRITE(CEFVN,'(I3)') LEFVN
      CEFVN=ADJUSTL(CEFVN)
      WRITE(CEFVU,'(I3)') LEFVU
      CEFVU=ADJUSTL(CEFVU)
      JTSTEP=JST
      ITYPE=ITYP
      INVERR=0
C  NEW CAPABILITY ADDED 28 SEPT 2012 G. MCBANE SAVE LOG-DERIVATIVE
C  MATRICES ON DISK. LD MATRIX IS WRITTEN ON UNIT ILDSVU.
C  LDRW FUNCTIONS CONTAINED IN LDRDWT.F
C  .TRUE. IN SECOND ARGUMENT MEANS "WRITE"

      IF (ILDSVU.GT.0) THEN
        IF (IPRINT.GE.1) WRITE(6,'(/,A,I4,A,I3)')
     1        ' LOG-DERIVATIVE MATRICES WILL BE SAVED ON UNIT ',
     2        ILDSVU,' USING OUTPUT FORMAT ',IPROGM
        INQUIRE(ILDSVU,OPENED=OPENCH)
        IF (.NOT.OPENCH)
     1    OPEN(ILDSVU,STATUS='UNKNOWN',FORM='UNFORMATTED')
        IDM=LDRWGH(ILDSVU, .TRUE., LABEL,  ITYPE,  NSTATE,
     1             NLEVEL, NQN, NNRG, NFIELD, URED, IPROGM)! WRITE GLOBAL HEADER
        IDM=LDRWGV(ILDSVU, .TRUE., NSTATE, NQN, JSTATE, NLEVEL,
     1             ELEVEL,  NNRG, ENERGY)                  ! WRITE GLOBAL VECTORS

      ENDIF
C
C  PROCESS IRSTRT POSSIBILITIES NEXT.
C
      IF (IRSTRT.NE.0) THEN
        WRITE(6,*) ' *** '
        IF (IRSTRT.GT.4) THEN
          WRITE(6,*) ' *** IRSTRT REDUCED TO MAX ALLOWED VALUE = 4'
          IRSTRT=4
        ENDIF
        WRITE(6,780) ISAVEU,IRSTRT
  780   FORMAT('  *** OUTINT.  RESTART FROM UNIT(',I3,').  IRSTRT =',I4)
        WRITE(6,*) ' *** '
        IF (IPHSUM.NE.0) THEN
          WRITE(6,*) ' *** INCOMPATIBLE WITH IPHSUM.NE.0',IPHSUM
          WRITE(6,*) ' ***   CHANGE INPUT DECK AND RESUBMIT   ***'
          STOP
        ENDIF
        IF (ISAVEU.LE.0) THEN
          WRITE(6,*) ' *** INCOMPATIBLE WITH ISAVEU.LE.0',ISAVEU
          WRITE(6,*) ' ***   CHANGE INPUT DECK AND RESUBMIT   ***'
          STOP
        ELSE
C  ***** GISS VERSION FOLLOWS
          OPEN(ISAVEU,STATUS='OLD',FORM='UNFORMATTED')
        ENDIF
C  IF WE ARE DOING A RESTART, SKIP 'NORMAL' IPHSUM, ISAVEU PROCESSING.
      ELSE
C
C  PREPARE TO SAVE S MATRICES ON (ISAVEU).
C
        NQL=NQN*NSTATE
        IF (ISAVEU.GT.0) THEN
          IF (IPHSUM.LE.0) THEN
            IF (IPRINT.GE.1) WRITE(6,790) ISAVEU,IPROGM
  790       FORMAT(/'  COMPUTED S-MATRICES WILL BE SAVED ON UNIT',I3/
     1             '  N.B. THESE ARE *** UNFORMATTED *** IN MOLSCAT ',
     2             'OUTPUT FORMAT',I3)
          ELSEIF (IPHSUM.GT.0) THEN
            IF (IPRINT.GE.1) WRITE(6,800) ISAVEU
  800       FORMAT(/'  COMPUTED K-MATRICES WILL BE SAVED ON UNIT',I3)
            IF (NNRG.GT.1 .AND. NFIELD.EQ.1) THEN
              KSVFLD=0
            ELSEIF (NNRG.EQ.1 .AND. NFIELD.GT.1) THEN
              IF (IPRINT.GE.1) WRITE(6,810)
  810         FORMAT('  LABELLED WITH VARYING QUANTITY IN PLACE OF',
     1               ' ENERGY')
              KSVFLD=1
            ELSEIF (NNRG.GT.1 .AND. NFIELD.GT.1) THEN
              IF (IPRINT.GE.1) WRITE(6,811)
  811         FORMAT('  BOTH ENERGIES AND FIELDS ARE VARYING.',
     1               '  IGNORING VARIATION IN FIELDS.')
              KSVFLD=0
            ENDIF
          ENDIF
          INQUIRE(ISAVEU,OPENED=OPENCH)
          IF (.NOT.OPENCH)
     1      OPEN(ISAVEU,STATUS='UNKNOWN',FORM='UNFORMATTED')
          REWIND ISAVEU

C  THIS WRITE STATEMENT MUST NOT CHANGE!
          WRITE(ISAVEU) LABEL,ITYPE,NSTATE,NQN,URED,IPROGM

          WRITE(ISAVEU) (JSTATE(I),I=1,NSTATE*NQN)
          WRITE(ISAVEU) NLEVEL,(ELEVEL(I),I=1,NLEVEL)

C  06-09-2018: THIS WRITE STATEMENT ADDED
          WRITE(ISAVEU) NDGVL,NCONST,NRSQ,IBOUND,ITPSUB

          WRITE(ISAVEU) NEFV,ISVEFV,(EFVNAM(IEFV),EFVUNT(IEFV),
     1                               IEFV=1,NEFV)
          WRITE(ISAVEU) NFIELD,NNRG,(ENERGY(I),I=1,NNRG)
        ENDIF
C
        IF (IPHSUM.GT.0) THEN
          IF (IPRINT.GE.1) WRITE(6,820) IPHSUM
  820     FORMAT(/'  EIGENPHASE SUMMARY WILL BE WRITTEN TO UNIT',I3)
          CALL GDATE(CDATE)
          CALL GTIME(CTIME)
          INQUIRE(IPHSUM,OPENED=OPENCH)
          IF (.NOT.OPENCH) OPEN(IPHSUM,STATUS='UNKNOWN',
     1                          FORM='FORMATTED')
          WRITE(IPHSUM,830) LABEL,CDATE,CTIME,NSTATE,NQN,
     1                      NNRG,NFIELD,(JSTATE(I),I=1,NQL)
  830     FORMAT(2X,A80/2X,A11,1X,A9,3X,'NSTATE =',I3,3X,'NQN =',I3,
     1           3X,'NNRG =',I4,3X,'NFIELD =',I6/(2X,'JSTATE  ',15I4))

C  THE FOLLOWING PREPARES FORMAT STATEMENTS FOR WRITING OUTPUT TO
C  IPHSUM:

C  FIRST (ALWAYS) PART OF HEADER (LENGTH 44)
          LH=44
          F841="(/'  JTOT  IBLOCK  NOP   I',9X,'ENERGY(I)',3X,"
          F241="(I6,5X,I3,I5,I4,2X,G16.9,3X,"
          WRITE(CH,'(I2)') LH

C  FORMAT FOR EIGENPHASE SUM (LENGTH 22)
          LES=22
          F843="' EIGENPHASE SUM/PI',4X,"
          F243="1X,G19.12,2X,"

          IF (IFCONV.NE.0) THEN ! NUMBER OF EFVS TO BE PRINTED
            L1=1
          ELSE
            L1=NNZRO
          ENDIF
          WRITE(C1,'(I2)') L1
          L2=LH+L1*(LEFVN+LEFVU+5)+LES ! SPACES BEFORE SECOND
                                       ! LINE OF HEADER
          WRITE(C2,'(I3)') L2
          L3=LEFVN+LEFVU+5-19 ! SPACES NEEDED TO PAD EFVS
                              ! 5 IS NUMBER OF CHARACTERS USED FOR
                              !   BRACKETS AND SPACING IN F842 BELOW
                              ! 19 IS LENGTH OF NUMBER IN F242 BELOW
          WRITE(C3,'(I3)') L3
          C1=ADJUSTL(C1)
          C2=ADJUSTL(C2)
          C3=ADJUSTL(C3)

C  FORMAT FOR EFVS
          F842=TRIM(C1)//"(A"//ADJUSTL(CEFVN)//",' (',A"
     1         //ADJUSTL(CEFVU)//",')',2X),"
          F242=TRIM(C1)//"("//TRIM(C3)//"X,G19.12),"


C  FORMAT FOR SCATTERING LENGTH
          F844=CH//"X,'SCATTERING LENGTH'/"//TRIM(C2)//
     1        "X,'CHAN   L POW',5X,'WVEC*"//ADJUSTL(RUNAME)//
     2        "',7X,'RE(A)/"//ADJUSTL(RUNAME)//"',7X,"//
     3        "'IM(A)/"//TRIM(ADJUSTL(RUNAME))//"')"
          F244="I4,I4,I4,3(E21.13E3,2X))" ! LENGTH 81

C  WRITE HEADER: SEVERAL DIFFERENT OPTIONS

          IF (IFCONV.NE.0) THEN
C  WILL WANT SCATTERING LENGTHS AND THERE WILL DEFINITELY BE AT LEAST
C  THE SINGLE VARYING EFV

C  IF THERE'S MORE THAN 1 EFV WRITE THE REST IN A HEADER LINE HERE
            IF (LENEFV.GT.1) THEN
              WRITE(IPHSUM,FMT=851)
     1        (TRIM(EFVNAM(IEFV)),TRIM(EFVUNT(IEFV)),EFV(IEFV),
     3         IEFV=IEFVST,ISVEFV-1),
     4        (TRIM(EFVNAM(IEFV)),TRIM(EFVUNT(IEFV)),EFV(IEFV),
     6         IEFV=ISVEFV+1,NEFVP)
  851         FORMAT((2X,A,' (',A,') = ',G16.9))
            ENDIF

C  F850 CONTAINS ALL THE INFORMATION CONTAINED IN THE HEADER
            F850=TRIM(F841)//TRIM(F842)//TRIM(F843)//TRIM(F844)
            WRITE(IPHSUM,FMT=F850)
     1                            ADJUSTR(EFVNAM(ISVEFV)),EFVUNT(ISVEFV)
C  F250 MIRRORS F850 AND WILL BE USED TO WRITE DATA
            F250=TRIM(F241)//TRIM(F242)//TRIM(F243)//TRIM(F244)

          ELSEIF (NNZRO.GT.0 .AND. ICHAN.NE.0) THEN
C  WILL WANT EFVS, EIGENPHASE SUM AND SCATTERING LENGTH
            F850=TRIM(F841)//TRIM(F842)//TRIM(F843)//TRIM(F844)
            WRITE(IPHSUM,FMT=F850)
     1        (ADJUSTR(EFVNAM(LISTFV(I))),EFVUNT(LISTFV(I)),I=1,NNZRO)
            F250=TRIM(F241)//TRIM(F242)//TRIM(F243)//TRIM(F244)

          ELSEIF (NNZRO.GT.0) THEN
C  WILL WANT EFVS AND EIGENPHASE SUM
            F850=TRIM(F841)//TRIM(F842)//TRIM(F843)//")"
            WRITE(IPHSUM,FMT=F850)
     1        (ADJUSTR(EFVNAM(LISTFV(I))),EFVUNT(LISTFV(I)),I=1,NNZRO)
            F250=TRIM(F241)//TRIM(F242)//TRIM(F243)//")"

          ELSEIF (ICHAN.GT.0) THEN
C  WILL WANT EIGENPHASE SUM AND SCATTERING LENGTH
            F850=TRIM(F841)//TRIM(F843)//TRIM(F844)
            WRITE(IPHSUM,FMT=F850)
            F250=TRIM(F241)//TRIM(F243)//TRIM(F244)

          ELSE
C  WILL WANT JUST EIGENPHASE SUM
            F850=TRIM(F841)//TRIM(F843)//")"
            WRITE(IPHSUM,FMT=F850)
            F250=TRIM(F241)//TRIM(F243)//")"
          ENDIF

        ENDIF
      ENDIF

C  FIND NSIG AS MAX. INDEX FROM JSTATE(I,NQN); ALLOW FOR NEG SIG IND
      IJ=(NQN-1)*NSTATE
      NSIG=0
      DO II=1,NSTATE
        IJ=IJ+1
        NSIG=MAX(NSIG,ABS(JSTATE(IJ)))
      ENDDO

      IF (MXSIG.GT.0) THEN
        NSIG=MIN(MXSIG,NSIG)
        IF (.NOT.LDIAG) NSIG=MXSIG ! BECAUSE JSTATE MAY NOT HAVE
                                   ! BEEN POPULATED YET
        IF (IPRINT.GE.1) WRITE(6,710) MXSIG
  710   FORMAT(/'  NOTE.  MAXIMUM LEVEL FOR WHICH CROSS SECTIONS ARE'
     1         ,' ACCUMULATED MAY BE LIMITED BY MXSIG =',I4)
      ENDIF

      IF (NSIG.EQ.0 .AND. LCURXS) THEN
        WRITE(6,700)
  700   FORMAT(/'  * * * ERROR.  NO LEVELS IN SIG. MATRICES.')
        STOP
      ENDIF

      NLEVS=NSIG
      NSTOR=NSIG*NSIG
C
C  CALCULATE REQUIRED STORAGE AND INITIALIZE IT.  NSTOR LOCATIONS
C  FOR TSIG; NSTOR FOR DEGEN; NNRGF*NSTOR FOR SIG.
      NNRGF=NNRG*NFIELD
      IF (.NOT.LCURXS) THEN
        IJ=0
      ELSEIF (.NOT.LACCXS) THEN
        IJ=NSTOR*2
      ELSE
        IJ=NSTOR*(NNRGF+2)
      ENDIF
C  IXNEXT INCREMENTED TO REFLECT ADDITIONAL STORAGE TAKEN UP BY SIG.
      IXNEXT=IXNEXT+IJ
      NUSED=0
      CALL CHKSTR(NUSED)
C
C  INITIALIZE SIG TO ZERO (NOTE THAT BECAUSE OF ADDRESSES OF
C  SIGCUR, SIGDEG AND SIGACC, SIGDEG CAN BE ADDRESSED BY
C  USING AN OFFSET WITHIN SIG.  THIS IS UGLY BUT AT PRESENT
C  UNAVOIDABLE)
C
C  TO SORT THIS ISSUE OUT, THE SIZE OF SIG NEEDS TO BE DECIDED BEFORE
C  OUTINT IS CALLED, WHICH COULD BE DONE...
      IF (LACCXS) THEN
        II=2*NSTOR+1
        DO I=II,IJ
          SIG(I)=0.D0
        ENDDO
      ENDIF

C  DEGENERACY INFORMATION (SIGDEG) IN SIG(NSTOR+(LROW-1)*NSIG+LCOL)
C  FOR NCONST>0, THE ACTUAL DEGENERACY CANNOT BE CALCULATED UNTIL
C  THE LEVEL LIST IS COMPLETE (IN THE CALL TO OUTPUT), SO SET ALL THE
C  DEGENERACIES TO 1 HERE. THIS WILL USUALLY BE ADEQUATE IN FIELDS.
      IF (.NOT.LCURXS) RETURN
      II=NSTOR
      IJ=(NQN-1)*NSTATE
      DO 5000 LROW=1,NSIG
      DO 5000 LCOL=1,NSIG
        II=II+1
        IF (NCONST.EQ.0) THEN
          CALL DEGENF(LCOL,LROW,SIG(II))
        ELSE
          SIG(II)=1.D0
        ENDIF
 5000 CONTINUE
C
C  CALCULATIONS TO CONSTRUCT FORMAT STATEMENTS FOR USE IN OUTPCH:
C  IT IS IMPORTANT THAT NUMLEN MATCHES THE TOTAL LENGTH OF THE FORMAT
C  ALLOWED FOR ONE EFV.
C  THIS IS BUILT ON THE ASSUMPTION THAT THE TEXT FOR AN EFV SHOULD
C  ALWAYS END 4 SPACES BEFORE THE END OF THE NUMBER FORMAT (TO ALLOW FOR
C  THE OPTIONAL EXPONENT)
      NUMLEN=16
      LENGTH=MAX(1+LEFVN+4,2+NUMLEN)
      L1=LENGTH-(LEFVN+4)
      L2=LENGTH-NUMLEN
      WRITE(CLEFV,'(I3)') LENEFV
      CLEFV=ADJUSTL(CLEFV)
      WRITE(C1,'(I3)') L1
      WRITE(C2,'(I3)') L2

      F931="(/3X,'ENERGY (CM-1)',2X,"
      F941="(A1,1P,G17.10," ! THIS IS ENERGY

      F932=TRIM(CLEFV)//"("//TRIM(C1)//"X,A"//TRIM(CEFVN)//",4X),"
      F942=TRIM(CLEFV)//"("//TRIM(C2)//"X,G16.9)," !  THIS IS THE LIST OF EFVS

      F933="'  JTOTL  JSTEP  JTOTU',6X,'F    I',9X,'SIG(F,I)')"
      F943="0P,3I7,2X,2I5,8X,1P,G13.6,1X:,A1)" ! THIS THE REST

C  THESE FORMAT STATEMENTS ARE USED IN OUTSIG FOR SUMMARY WRITTEN TO STDOUT
      F302="(/'  OUTSIG: DA FILE (',I2,') UPDATED WITH SIGMA "//
     1     "FOR ENERGY(',I3,') =',1P,G14.7/10X,"
      F303=TRIM(CLEFV)//"(A,G16.9,A,1X)," ! THIS PART ONLY IF EFVS
      F304="'  JTOT =',I4,' MTOT =',I2)"

      IF (LENEFV.GT.0) THEN
        F400=TRIM(F941)//TRIM(F942)//TRIM(F943)
        F305=TRIM(F302)//TRIM(F303)//TRIM(F304)
      ELSE
        F400=TRIM(F941)//TRIM(F943)
        F305=TRIM(F302)//TRIM(F304)
      ENDIF
      IF (EF.NE.1.D0) F931=TRIM(ADJUSTL(F931))//
     1                     "3X,'ENERGY ',A10,1X,"
      IF (EF.NE.1.D0) F941=TRIM(ADJUSTL(F941))//"2X,G17.10,2X,"
      IF (LENEFV.GT.0) THEN
        F300=TRIM(F941)//TRIM(F942)//TRIM(F943)
        F945=TRIM(F931)//TRIM(F932)//TRIM(F933)
      ELSE
        F300=TRIM(F941)//TRIM(F943)
        F945=TRIM(F931)//TRIM(F933)
      ENDIF
C
      IF (.NOT.LACCXS) RETURN
C
C  PREPARE FOR STORAGE OF SIG ON DA (ISIGU).
      MXREC=NSTOR*NNRGF+2
      IERR=1
      IF (ISIGU.GT.0) OPEN(ISIGU,STATUS='UNKNOWN',ACCESS='DIRECT',
     1                     FORM='FORMATTED',RECL=240,IOSTAT=IERR)
      LOUT=IERR.EQ.0
C
      IF (LOUT) THEN
        IF (IPRINT.GE.1) WRITE(6,720) ISIGU
  720   FORMAT(/'  STATE-TO-STATE INTEGRAL CROSS SECTIONS ',
     1         'WILL BE STORED IN A D.A. FILE ON UNIT',I3)
C  INITIALIZE DATA SET ON ISIGU. . .
        I10=1
        WRITE(ISIGU,730,REC=I10) LABEL,ISVEFV,NEFV,NEFVP
  730   FORMAT(20A4,2I2)
        I10=I10+1
        WRITE(ISIGU,740,REC=I10) (EFVNAM(IEFV),EFVUNT(IEFV),
     2                            IEFV=IEFVST,MIN(NEFVP,IEFVST+7))
  740   FORMAT(9(A20,A6))
        I10=I10+1
        IF (NEFVP+1-IEFVST.GT.8) THEN
          WRITE(ISIGU,740,REC=I10) (EFVNAM(IEFV),EFVUNT(IEFV),
     1                              IEFV=MIN(IEFVST+8,NEFVP),NEFVP)
          I10=I10+1
        ENDIF
        DO II=1,NNRGF
          ISST(II)=I10
          DO I=1,NSTOR
            WRITE(ISIGU,750,REC=I10)
  750       FORMAT('.',239X)
            I10=I10+1
          ENDDO
        ENDDO
        WRITE(ISIGU,760,REC=I10)
  760   FORMAT('$',239X)
        I10=I10+1
      ELSE
        IF (IPRINT.GE.1) WRITE(6,770)
  770   FORMAT(/'  STATE-TO-STATE INTEGRAL CROSS-SECTIONS WILL BE ',
     1         'COMPUTED BUT NOT STORED ON DISK')
      ENDIF
C
C  NOTE THE CODE BELOW HAS NOT BEEN MAINTAINED.
      IF (IPARTU.GT.0) THEN

        IF (IPRINT.GE.1) WRITE(6,860) IPARTU
  860   FORMAT(/'  PARTIAL CROSS SECTIONS WILL BE WRITTEN TO UNIT',I3)
        REWIND IPARTU
        WRITE(IPARTU,870) LABEL,ITYPE,NSTATE,NQN,URED,IPROGM
        NQL=NQN*NSTATE
        WRITE(IPARTU,880) (JSTATE(I),I=1,NQL)
        WRITE(IPARTU,890) NLEVEL,(ELEVEL(I),I=1,NLEVEL)
        WRITE(IPARTU,890) NNRG,(ENERGY(I),I=1,NNRG)
  870   FORMAT(20A4/3I4,F8.4,3I4)
  880   FORMAT(20I4)
  890   FORMAT(I4/(5E16.8))
      ENDIF
C
C  SET UP 'BOOKKEEPING' VARIABLES.
      DO I=1,NNRGF
        MINJT(I)=-99999
        IECONV(I)=0
        MAXJT(I)=0
      ENDDO

      RETURN
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * END OF OUTINT
C
C
      ENTRY OUTPCH(SIGACC,ENERGY,NNRG,FIELD,NFIELD,MINJT,MAXJT,
     1             ISIGPR,LABL,F710,UNAME,ISIGU,LWARN,EREF,INDLEV,
     2             SIGTOT,IPRINT)

C  THIS CODE IS ONLY USED IF CROSS SECTIONS ARE ACCUMULATED
      IF (.NOT.LACCXS .OR. .NOT.ACCUM) RETURN

C  ARGUMENT 'JTSTEP' ADDED AUG 86; MOVED TO 'OUTPUT' APR 94  - SG
C  ARGUMENT 'ISIGU' ADDED JUL 92 - JMH
C  PRINT 'INCOMPLETE COUPLED STATES VALUES' ONLY IF ISIGPR.GE.2
C  NEVER PUNCH THESE VALUES (INDICATED BY NEGATIVE SIGMA) HOWEVER.
      IF (ISIGPR.EQ.0) THEN

        IF (IPRINT.GE.1) WRITE(6,900)
  900   FORMAT(/'  SIGMA NOT PRINTED BECAUSE ISIGPR = 0')
      ELSE
        IF (IPRINT.GE.1) THEN
          WRITE(6,FMT=F710) TRIM(LABL)
        ENDIF
        IF (LWARN) THEN
          WRITE(6,*)
          WRITE(6,*) ' ************************************************'
          WRITE(6,*) ' ************************************************'
          WRITE(6,*) ' **   WARNING. SOME SIGMA MAY BE INCOMPLETE    **'
          WRITE(6,*) ' **   BECAUSE  IFEGEN .GT. 1                   **'
          WRITE(6,*) ' ************************************************'
          WRITE(6,*) ' ************************************************'
        ENDIF

C  NOTE THAT ARRAY INDLEV IS NOT THE SAME ARRAY AS IN OUTPUT.  THE SAME
C  NAME HAS BEEN USED BECAUSE IT PERFORMS BROADLY THE SAME FUNCTION
        IF (NSIG.GT.0) THEN
          WRITE(6,*)
          IOPEN=0
          DO 9002 ILVL=1,MIN(NLEVEL,NSIG)
            LLOPEN=.FALSE.
            DO 9001 IENER=1,NNRG
              IF (EREF+ENERGY(IENER).GT.ELEVEL(ILVL)) LLOPEN=.TRUE.
 9001       CONTINUE
            IF (LLOPEN) THEN
              IOPEN=IOPEN+1
              INDLEV(IOPEN)=ILVL
            ELSE
              WRITE(6,924) ILVL,ELEVEL(ILVL)
  924         FORMAT(2X,'LEVEL',I4,' WITH ENERGY ',F19.12,
     1               ' IS NEVER OPEN')
            ENDIF
 9002     CONTINUE

          WRITE(6,925) IOPEN,(INDLEV(IL),ELEVEL(INDLEV(IL)),IL=1,IOPEN)
  925     FORMAT(/'  STATE-TO-STATE INTEGRAL CROSS SECTIONS IN ',
     1           'ANGSTROM**2 BETWEEN',I5,
     1           ' LEVELS WITH THRESHOLD ENERGIES (IN CM-1):',//
     2           (I5,F19.12))
        ENDIF
C
        IF (JHALF.EQ.0) THEN
          XJSTEP=1.D0
        ELSE
          XJSTEP=DBLE(JTSTEP)/DBLE(JHALF)
          IF (JTSTEP.NE.1) WRITE(6,940) XJSTEP
  940     FORMAT(/'  *** N.B. CROSS SECTIONS HAVE BEEN MULTIPLIED BY',
     1           F5.1,' TO ACCOUNT FOR JSTEP')
        ENDIF
C ***
C *** AUG 86.  FORCE PUNCH FROM INTERNAL SIG MATRIX. BY SETTING LOUT
        LOUT=.FALSE.
C ***
        IF (LOUT) THEN
C  BELOW PUNCHES FROM DISK(ISIGU ) STORAGE.
          IF (LACCXS) CALL RDSIGU(ISIGU)
          RETURN
        ENDIF
      ENDIF

C  OUTPUT FROM STORAGE IN SIG.
      IJ=0
C
      IF (EF.NE.1.D0) UTNAME='('//TRIM(UNAME)//')'
      K=0
      DO 9000 IFIELD=1,NFIELD
        CALL SETEFV(FIELD,SV_VAL)
        DO 9100 IENER=1,NNRG
          LNEG=.FALSE.
          K=K+1
          MN=MINJT(K)
          MXJ=MAXJT(K)
          EK=ENERGY(IENER)
          IF (ISIGPR.GT.0) THEN
            IF (EF.NE.1.D0) THEN
              WRITE(6,FMT=F945) UTNAME,(ADJUSTR(EFVNAM(IEFV)),
     1                                  IEFV=IEFVST,NEFVP)
            ELSE
              WRITE(6,FMT=F945) (ADJUSTR(EFVNAM(IEFV)),
     1                           IEFV=IEFVST,NEFVP)
            ENDIF
          ENDIF
          LWRITE=.FALSE.
          DO 9200 I=1,IOPEN !NSIG
            IT=INDLEV(I)
            SIGTOT(I)=0.D0
            DO 9300 II=1,IOPEN !NSIG
              IIT=INDLEV(II)
              IJ=((IFIELD-1)*NNRG+IENER-1)*NSIG**2+(IT-1)*NSIG+IIT
              SIJ=SIGACC(IJ)*XJSTEP
              IF (II.NE.I) THEN
                IF (SIGTOT(I).LT.0D0 .OR. SIJ.LT.0D0) THEN
                  SIGTOT(I)=-ABS(SIGTOT(I))-ABS(SIJ)
                ELSE
                  SIGTOT(I)=SIGTOT(I)+SIJ
                ENDIF
              ENDIF
              IF (ISIGPR.GT.0) THEN
                IF (SIJ.GE.EPS) THEN
                  IF (EF.NE.1.D0) THEN
                    WRITE(6,FMT=F300) SPACE,EK,EK/EF,
     1                                (EFV(IEFV),IEFV=IEFVST,NEFVP),
     2                                MN,JTSTEP,MXJ,IIT,IT,SIJ,SPACE
                  ELSE
                    WRITE(6,FMT=F300) SPACE,EK,
     1                                (EFV(IEFV),IEFV=IEFVST,NEFVP),
     2                                MN,JTSTEP,MXJ,IIT,IT,SIJ,SPACE
                  ENDIF
                ELSEIF (ABS(SIJ).GE.EPS .AND. ISIGPR.GE.2) THEN
                  IF (EF.NE.1.D0) THEN
                    WRITE(6,FMT=F300) SPACE,EK,EK/EF,
     1                                (EFV(IEFV),IEFV=IEFVST,NEFVP),
     2                                MN,JTSTEP,MXJ,IIT,IT,ABS(SIJ),STAR
                  ELSE
                    WRITE(6,FMT=F300) SPACE,EK,
     1                                (EFV(IEFV),IEFV=IEFVST,NEFVP),
     2                                MN,JTSTEP,MXJ,IIT,IT,ABS(SIJ),STAR
                  ENDIF
                ENDIF
              ENDIF
 9300       CONTINUE
            IF (ISIGPR.GT.0 .AND. I.NE.IOPEN .AND.
     1          ABS(SIGTOT(I)).GT.0.D0) WRITE(6,*)
            IF (ABS(SIGTOT(I)).GT.0.D0) LWRITE=.TRUE.
 9200     CONTINUE
          IF (ISIGPR.GT.0 .AND. LWRITE) THEN
            WRITE(6,950)
  950       FORMAT(/2X,'TOTAL INELASTIC INTEGRAL CROSS SECTIONS IN ',
     1             'ANGSTROM**2 FROM LEVEL')
  951       FORMAT(2X,1P,E12.5,A1,46X,0P,I3)
            DO I=1,IOPEN
              IF (SIGTOT(I).LT.0.D0) THEN
                WRITE(6,951) -SIGTOT(I),STAR,INDLEV(I)
                LNEG=.TRUE.
              ELSEIF (SIGTOT(I).GT.0.D0) THEN
                WRITE(6,951) SIGTOT(I),SPACE,INDLEV(I)
              ENDIF
            ENDDO
            WRITE(6,*)
          ENDIF
          IF (LNEG) THEN
            WRITE(6,*) ' INCOMPLETE CROSS SECTIONS ARE MARKED WITH A *'
            WRITE(6,*)
          ENDIF
 9100   CONTINUE
 9000 CONTINUE

      RETURN

C  * * * * * * * * * * * * * * * * * * * * * * * * * * * END OF OUTPCH
C
C
      ENTRY OUTERR(INVER)
      INVERR=INVER
      RETURN
      END
