      SUBROUTINE SIG6(NSTATE,JSTATE,A,LI,LF,SIG,S,IMSG,QL,IXQL,
     2                NIXQL,NQL,LM,LMAX)
C  Copyright (C) 2019 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
C
C  ROUTINE TO EVALUATE SIG(J,TAU->J',TAU') FROM IOS Q(L,M1,M2)
C  VALUE FOR LEVEL LI TO LF RETURNED IN SIG
C
C  S Green (2/1/93) VERSION TAKES STORAGE FOR REAL/IMAGINARY COEFFS
C  FROM /MEMORY/ ..,X
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION JSTATE(4,NSTATE),A(2),IXQL(NIXQL,NQL),LM(3,LMAX)
      DIMENSION QL(2)
      CHARACTER(1) S,STAR
C
C  DYNAMIC STORAGE COMMON BLOCK ...
      COMMON /MEMORY/ MX,IXNEXT,NIPR,IDUMMY,X(1)
C
      DATA STAR/'*'/
      DATA EPS/1.D-8/
C
C  STATEMENT FUNCTION FOR INDEX M1.GE.M2, M STARTING AT ZERO.
      IX(M1,M2)=M1*(M1+1)/2+M2+1
C
      SIG=0.D0
      JI=JSTATE(1,LI)
      XJI=JI
      NKI=2*JI+1
      ISTAI=JSTATE(4,LI)
      JF=JSTATE(1,LF)
      XJF=JF
      NKF=2*JF+1
      ISTAF=JSTATE(4,LF)
      LMN=ABS(JI-JF)
      LMX=JI+JF

      DO 1100 L=LMN,LMX
        XL=L
C  DETERMINE AMOUNT OF AVAILABLE SCRATCH STORAGE IN X().
        MAXC=MX-IXNEXT+1
C  M-VALUES CAN RANGE UP TO L.  CHECK ABILITY TO STORE IN CR,CI
        MMAX=L
 1101   IXMX=IX(MMAX,MMAX)
        IF (2*IXMX.LE.MAXC) GOTO 1102

        WRITE(6,699) L,IXMX,MAXC
  699   FORMAT(' *** CANNOT STORE ALL CR,CI FOR L=',I3,
     1         '.  REQUIRED, AVAILABLE =',2I7)
        MMAX=MMAX-1
        S=STAR
        IMSG=1
        IF (MMAX.LT.0) THEN
          WRITE(6,698) LI,LF,NAVAIL
  698     FORMAT(/' SIG6 (2/1/93).  FOR INITIAL FINAL LEVELS',2I3,
     1            ' AVAILABLE STORAGE IS INADEQUATE',I8)
          STOP
        ENDIF
        GOTO 1101

C  SET STORAGE POINTERS AND ZERO TEMP STORAGE.
 1102   IXSAVE=IXNEXT
        IXR=IXNEXT-1
        IXI=IXR+IXMX
        IXNEXT=IXI+IXMX
        DO 1109 II=1,IXMX
          X(IXR+II)=0.D0
 1109     X(IXI+II)=0.D0
C  -------------LOOP OVER IPI,IPF  IQI,IQF -----------
        IPI=-JI-1
        DO 1201 IIPI=1,NKI
          IPI=IPI+1
          API=A(ISTAI+IIPI)
          IF (ABS(API).LE.EPS) GOTO 1201

          PI=IPI
          IPF=-JF-1
          DO 1200 IIPF=1,NKF
            IPF=IPF+1
            APF=A(ISTAF+IIPF)
            IF (ABS(APF).LE.EPS) GOTO 1200

            PF=IPF
            IF (ABS(IPI-IPF).GT.MMAX) GOTO 1200

            IQI=-JI-1
            DO 1301 IIQI=1,NKI
              IQI=IQI+1
              AQI=A(ISTAI+IIQI)
              IF (ABS(AQI).LE.EPS) GOTO 1301

              QI=IQI
              IQF=-JF-1
              DO 1300 IIQF=1,NKF
                IQF=IQF+1
                AQF=A(ISTAF+IIQF)
                IF (ABS(AQF).LE.EPS) GOTO 1300

                QF=IQF
                IF (ABS(IQI-IQF).GT.MMAX) GOTO 1300

C  CALCULATE FACTOR
                TJ1 = THRJ(XJI,XL,XJF,-PI,PI-PF,PF)
                IF (ABS(TJ1).LE.EPS) GOTO 1300

                TJ2 = THRJ(XJI,XL,XJF,-QI,QI-QF,QF)
                IF (ABS(TJ2).LE.EPS) GOTO 1300

                FACT=API*AQI*APF*AQF  *TJ1*TJ2
C  RECALCULATE MP,MQ AS THEY MIGHT HAVE BEEN SWAPPED IN LAST LOOP.
                MP=IPI-IPF
                MQ=IQI-IQF
                SIGNR=1.D0
                SIGNI=1.D0
                IF (MP.GE.0) GOTO 1401

                P=PARSGN(MP)
                SIGNR=P*SIGNR
                SIGNI=P*SIGNI
                MP=ABS(MP)
 1401           IF (MQ.GE.0) GOTO 1402

                P=PARSGN(MQ)
                SIGNR=P*SIGNR
                SIGNI=P*SIGNI
                MQ=ABS(MQ)
 1402           IF (MP.GE.MQ) GOTO 1403

                SIGNI=-SIGNI
                MT=MP
                MP=MQ
                MQ=MT
 1403           INDX=IX(MP,MQ)
                IF (MP.EQ.MQ) SIGNI=0.D0
                X(IXR+INDX)=X(IXR+INDX)+SIGNR*FACT
                X(IXI+INDX)=X(IXI+INDX)+SIGNI*FACT
 1300         CONTINUE
 1301       CONTINUE
C  ----------  THIS ENDS LOOP OVER IQI,IQF
 1200   CONTINUE
 1201   CONTINUE
C  ----------  THIS ENDS LOOP OVER IPI,IPF

C  MATCH CONTRIBUTING (I.E., NON-ZERO) CR WITH QL VALUES
        IZERO=0
        INDX=0
        DO 1500 MP=IZERO,MMAX
        DO 1500 MQ=IZERO,MP
          INDX=INDX+1
C  N.B. IMAGINARY PART SHOULD VANISH; ERROR MESSAGE IF ANY SURVIVE.
          IF (ABS(X(IXI+INDX)).LE.EPS) GOTO 1501

          WRITE(6,694) L,MP,MQ,X(IXI+INDX),LI,LF
  694     FORMAT(/' *** ERROR.  NON-ZERO IMAGINARY COEFF QL(',
     &            3I4,' ) =',F12.6,'  FOR LI,LF =',2I4)
 1501     IF (ABS(X(IXR+INDX)).LE.EPS) GOTO 1500

C  CALL IXQLF TO GET INDEX OF L,MP,MQ IN QL
C  AND ACCUMULATE IN CROSS SECTION
          CALL IXQLF(LM,LMAX,L,MP,MQ,1,INDEX,IXQL,NIXQL,NQL)
C  N.B. 6TH ARG (1) ASKS FOR REAL PART; SHOULD WORK OK FOR MP.EQ.MQ
          IF (INDEX.GT.0) GOTO 1502

          IF (INDEX.EQ.-1) GOTO 1500

          S=STAR
          IMSG=1
          GOTO 1500

 1502     SIG=SIG + X(IXR+INDX)*QL(INDEX)
  602     FORMAT(2X,'I/F=',2I3,'    QL(',3I3,' )  COEFF/QL =',2F10.5)
 1500   CONTINUE

C  RECOVER TEMPORARY STORAGE ...
 1100   IXNEXT=IXSAVE
C  ----------  THIS ENDS LOOP OVER L - VALUES

C  MULTIPLY FINALLY BY 2*JF+1
      SIG = SIG * (2*JF+1)
      RETURN
      END
